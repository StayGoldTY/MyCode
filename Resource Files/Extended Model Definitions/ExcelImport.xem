<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" AutoAttach="FALSE" Category="Import" Code="EXCEL_IMPORT" HasExtendedMetaClass="TRUE" ID="{EA5B4693-07C7-4D42-B1B4-A361C488B4C3}" LastModificationDate="1427456731" LibID="{00000000-0000-0000-0000-000000000000}" Name="Excel Import" Objects="207" Symbols="0" Type="{186C8AC3-D3DC-11D3-881C-00508B03C75C}" signature="XEM_XML" version="16.5.5.4687"?>
<!-- do not edit this file -->

<EXASET xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:ExtendedModelDefinition Id="o1">
<a:ObjectID>EA5B4693-07C7-4D42-B1B4-A361C488B4C3</a:ObjectID>
<a:Name>Excel Import</a:Name>
<a:Code>EXCEL_IMPORT</a:Code>
<a:CreationDate>1241084454</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1427456731</a:ModificationDate>
<a:Modifier>PARD30010540A</a:Modifier>
<a:Comment>This extension allows you to create PowerDesigner model objects from tables of data imported from an Microsoft Excel file. The wizard can import one table on each worksheet as a PowerDesigner object type, creating one instance of the object for each row in the table, and importing the value of each column of each row into a property that you specify.

This XEM also serves as an example of how PowerDesigner can be extended to import data into objects from external file types.

I. Using the Excel import feature

1. Attach the XEM to any kind of PowerDesigner model.
2. Right-click the model or package node in the Browser and select Import New Excel File. 
3. Enter the filename of your Excel file in the wizard, and click Close to instruct it to analyze the available data. 
4. Select the PowerDesigner object type that you want to import each row of the table into, and then click Close. You can specify an existing object type, choose to create a new extended object, or skip the import of the table.
5. For each column in the table on the worksheet, specify the object property into which you want to import that column&#39;s values. You can specify an existing property, choose to create a new extended attribute (which will be named after the column heading), or skip the import of the column. 
6. If there are additional worksheets containing tables in your workbook, you will be prompted to specify a new object to import the data into. 
7. When you have specified a mapping for the final column of the final table, the import will begin, and new objects of the specified kind(s) will be created for each row in each table.
8. In addition to the specified objects, an Import Excel object is created to allow you to resynchronize your model with changes to your Excel file. To resynchronize, right-click the Import Excel object and select the Import method.

II) Implementing the import

1) Metamodel

The metamodel is quite simple: All import information is stored on an abstract GenericImport object that is overridden into a concrete ExcelImport object. This generic import stores the data source identification (Excel filename) and a list of table mapping sub-objects.
A table mapping sub-object is created for each table found in the imported document. A class kind is associated to each table in addition to a list of column mappings.
Column mappings are sub-objects of the table mapping sub-object. They map a table column to an object attribute.

2) User Interface

The dialogs asking for missing mapping information are created using custom forms defined on each metaclass element.
The Select Filename form on the generic import asks for data source definition (Excel filename)
The Table Mapping Definition form on the Table Mapping sub-object metaclass asks for the kind of object to associate with a table
The Column Mapping Definition form on the column Mapping sub-object asks for the kind of attribute to associate with a table column
Standard message boxes are also used for displaying messages to the end-user

3) Import algorithm

The import algorithm is implemented by the Import method defined on the Generic Import metaclass. The main steps are the following:
 - Open the data source document.
 - Enumerate the available tables in the document.
 - Adjust the mapping persistence structure by creating missing table mapping and column mapping objects.
 - For each table of the document:
   - Ask for incomplete mapping definition (class kind or object attribute).
   - For each row of the table document:
      - Read data.
      - Search for an existing matching object or create a new one.
      - Commit each cell value into the object.
 - Close the document.
The Global Script available on the Profile item provides many more implementation details.
 
III) Advanced features demonstrated by this XEM

1) Defining a new metaclass

This is done by creating a stereotype on the base metaclass we want to extend (extended object in our case) and selecting the &#39;use as metaclass&#39; check box. We define an abstract &#39;GenericImport&#39; stereotype that is overridden by the concrete &#39;ExcelImport&#39; metaclass. This allows sharing data and behavior that may be common to other import features. 
To define a sub-object, we add an extended composition extension and click on the New button to create a new sub-object kind (stereotype on the extended sub-object metaclass)
Once each metaclass has been declared, we can define extended attributes and display those attributes in the General page of the property sheet using a custom form with the &#39;Replace General Tab&#39; type.

2) Controlling the editing of attributes

We want to ensure that the Attribute extended attribute defined on the ColumnMapping extended metaclass belongs to the metaclass associated to the table.
To implement this, we specify that Attribute is &#39;Complete&#39; (which means that we cannot enter a value not in the list specified) and compute the list of available attributes into a GTL template (named allAttributes)

The Excel filename attribute on the Excel Import metaclass cannot be reduced to a finite list of predefined values. Instead, it must correspond to a valid Excel file. This can be checked using a trick demonstrated with the DataSource extended attribute on the ExcelImport metaclass.
We define another computed attribute that encapsulates the editing of the filename persistent attribute, which lets us implement all the validations we want in the Set Method Script (if the file could not be opened, we display an error message)
We can also perform some cascade changes (for instance update the list of table mappings and column mappings when the filename changes).

3) Accessing existing metamodel information

Two GTL templates (allMainObjects and allAttributes) demonstrate how to list available metaclasses and meta attributes.
The Imported Kind attribute on the Table mapping stereotype demonstrates how to convert a class name into class kind.
The GetAttributeText and SetAttributeText methods (see for instance the GetObjectValue and CommitCellData methods in Global Script) can be used to retrieve or modify an attribute by supplying just its public name.
The GetOrCreateExtendedAttribute method implemented also in Global Script demonstrates the retrieve and creation of meta extensions in scripts.

4) Making an extension available to all modules

An extension is generally designed for a specific module. However, in some cases (including the generic import), and where only metaclasses available in all modules (extended object, extended sub-object) are used, it may be interesting to make it available to all modules.
This is possible (though not via the PowerDesigner interface) by modifying the header of the XEM file in a text editor and replacing the existing LibID=&quot;{xxx}&quot; string by LibID=&quot;{00000000-0000-0000-0000-000000000000}&quot; 
Note that this change is not preserved if you edit the XEM in the PowerDesigner resource editor. Just remember to perform this manual change before sharing your XEM with end-users.</a:Comment>
<a:Category>Import</a:Category>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;*
&#39;* Versions: 
&#39;*           2.6 - Mar 17, 2015 - Fix import of LDM Identifier Attributes
&#39;*                                + fix issue with naming conventions defined
&#39;*                                for extended sub-objects like table or column mapping
&#39;*           2.5 - Sep 05, 2014 - Performance improvement: Add an option to skip validation 
&#39;*                                during import (less secured but much more faster for import
&#39;*                                of big files)
&#39;*                                + use cache for mapping definition
&#39;*                                + activate progress dialog with Cancel button
&#39;*           2.4 - Mar 21, 2014 - Fix for import of referenced sub-object
&#39;*                                like import of PDM index columns that references table 
&#39;*                                column object or EAM role association.
&#39;*                                16.5 SP04 version.
&#39;*           2.3 - Nov 22, 2013 - Add the ability to retrieve objects from other opened models
&#39;*                                16.5 SP03 version.
&#39;*           2.2 - Dec 20, 2012 - Fix extensions not correctly listed when defined under
&#39;*                                a stereotype as metaclass.
&#39;*                                + fix import of stereotypes as metaclass defined under
&#39;*                                another metaclass than ExtendedObject
&#39;*                                + handle #N/A cell values
&#39;*                                16.5.0 version.
&#39;*           2.1 - Aug 24, 2010 - Fix non-reuse of previously imported objects when they
&#39;*                                have a local namespace (links on components in EAM)
&#39;*                                + Consider name/code as link identifiers if they are mapped
&#39;*           2.0 - Feb 19, 2010 - + Simplify UI + import sub-objects and composition links
&#39;*                                + match link objects by source and destination
&#39;*                                + support of qualified name for referencing objects 
&#39;*                                + import several values in cell for list of objects 
&#39;*                                + handle non-repeated values for mandatory attributes
&#39;*                                15.2.0 version.
&#39;*           1.9 - Jun 19, 2009 - Add Cancel buttons in mapping definition dialog
&#39;*                                and rename Close button into Next
&#39;*                                15.1.0 version.
&#39;*           1.8.2 May 25, 2009 - Fix vbscript error + encapsulate error management 
&#39;*                                into functions + Initialize Reference class when
&#39;*                                relationship or attribute is set
&#39;*                                15.0.0.EBF 7 version.
&#39;*           1.8.1 May 19, 2009 - Fix missing items in class, attribute or relationship lists
&#39;*                                + improve error messages in some other cases
&#39;*                                + handle global object case
&#39;*                                Internal version.
&#39;*           1.8 - May 15, 2009 - Several fixes for 15.1.0 beta1 + Improve error messages
&#39;*                                + improve metamodel extension support
&#39;*                                15.1.0 beta1 version.
&#39;*           1.7 - Apr 24, 2009 - Fix import of composition collections + sort combo boxes
&#39;*                                + add option for symbols + add string literal for Boolean
&#39;*                                Internal version.
&#39;*           1.6 - Dec  2, 2008 - Several fixes on set attribute and object creation,
&#39;*                                provide more error messages in the output.
&#39;*                                Internal version.
&#39;*           1.5 - Nov 20, 2008 - Enhanced version with support of reference and relationships,
&#39;*                                ability to map to new concept, new extended attribute or new
&#39;*                                extended collection.
&#39;*                                Used for several internal demonstrations.
&#39;*           1.0 - Oct  2, 2008 - First version with basic support of standard attributes
&#39;*                                Delivered in 15.0 official build.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined 

Dim debugMode
debugMode = false  &#39; Set it to true for logging more debug information and stop on first error

Dim useProgress
useProgress = true 

&#39;******************************************************************************
&#39;*
&#39;*                    Implementation Details 
&#39;*
&#39;*
&#39;* This Import feature is designed to be adapted to any data source describing
&#39;* objects in table of data. It can be adapted for instance for an import of
&#39;* database tables, CSV files or even another model kind from which we know how
&#39;* to enumerate object instances and attributes.
&#39;*
&#39;* The functions implemented in this global script are therefore grouped into 
&#39;* two separated categories: the ones dependent of the data source kind (Excel
&#39;* in this case) and the ones that implement the import generic logic.
&#39;*
&#39;* The methods to be implemented to support a new data source are the following:
&#39;*    - Function CheckApplicationExist(): Checks if the application associated
&#39;*          to the source document can be used on the machine and returns an error
&#39;*          message if it is not the case. Returns an empty string if such
&#39;*          application exists.
&#39;*    - Function OpenSourceDocument(value): Opens the datasource.
&#39;*          The value first parameter is a string corresponding to the data 
&#39;*          source identification (Excel filename in our case) and the return
&#39;*          value corresponds to the data source object (An Excel workbook in
&#39;*          our case)
&#39;*    - Sub CloseSourceDocument(document): Closes the datasource.
&#39;*          The first parameter must be the document returned by the Open function.
&#39;*    - Function EnumerateDocumentTables(document): Enumerates the list of data
&#39;*          tables available in the document. A table of data will be mapped to a 
&#39;*          list of objects of same kind. The first parameter must be the document
&#39;*          object returned by the Open method. The return value must be a
&#39;*          VB Script Dictionary object (key/value map) with the table name as key
&#39;*          and an object identifying the table as value (an Excel Range object
&#39;*          in our case)
&#39;*   - Function EnumerateTableColumns(table, name): Enumerates the available
&#39;*          columns for a table identified by the previous method. The first 
&#39;*          parameter must be a table object (Excel Range) and the second one
&#39;*          must be the table name. The return value is a VB Script Dictionary 
&#39;*          object with the column name as key and a column object (Excel Column
&#39;*           range in our case) as value
&#39;*   - Function GetTableRowCount(table, name): Optional method to count number of
&#39;*          rows available in the table. Used by the progress bar. If this
&#39;*          information cannot be retrieved easily, return 0
&#39;*   - Function GetNextTableRow(table, line, name): Retrieves the next line of a table
&#39;*          The first parameter is the table object provided by the 
&#39;*          EnumerateDocumentTables method. The second object is an object 
&#39;*          identifying the current line of the table (An Excel Row Range in our case)
&#39;*          This parameter is set to nothing to retrieve the first line.
&#39;*          The third parameter corresponds to the table name.
&#39;*          The return value is a line object corresponding to the next table line.
&#39;*          The method must return &#39;Nothing&#39; when there is no more data in the table.
&#39;*   - Function GetRowValues(table, line, name): Retrieves the values of a table line.
&#39;*          The first parameter is the table object provided by the 
&#39;*          EnumerateDocumentTables method.
&#39;*          The second parameter is the line object provided by GetNextTableRow
&#39;*          The third parameter is the table name.
&#39;*          The expected return value is a VB Script Dictionary object with the
&#39;*          column name as key and the cell data as value. The cell data can be
&#39;*          a string or a variant
&#39;*
&#39;* The generic import algorithm is implemented in the Import method of the &#39;GenericImport&#39; stereotype.
&#39;* In addition to calling the data source specific methods described above, it is 
&#39;* decomposed into the following categories of functions:
&#39;* 
&#39;*  Import Functions
&#39;*  - Function ImportDocumentData(tablDict, importDefn, totalCreate, totalUpdate, totalWarning): The 
&#39;*          entry point for the generic import. The parameters are the dictionay
&#39;*          of table documents retrieved by EnumerateDocumentTables method, the object
&#39;*          storing all mapping information for this document and two output integer
&#39;*          parameters to return the total number of objects created or updated by
&#39;*          the import. The return value is false if the import has been aborted.
&#39;*  - Function CanImportTableData(tablMap, colnCol, classId, fldr, totalWarning, subObj)
&#39;*          Performs some checks to detect if all mandatory mapping have been defined.
&#39;*          For instance, a sub-object must have a column mapped to &lt;Parent&gt; specific attribute.
&#39;*  - Function ImportTableData(tablSrc, tablMap, totalCreate, totalUpdate, totalWarning, globalDict):
&#39;*          Imports data from a single document table. The parameters are the document table,
&#39;*           its associated table mapping object, the two output parameters for returning
&#39;*          the number of created and updated objects and at last a global dictionary object
&#39;*          that stores for each class and key attribute a map of value/object.
&#39;*          The return value is false if the import has been aborted by the end-user
&#39;*  - Sub CommitRowData(dictValues, classId, strn, subObj, lnkClss, colnCol, fldr, countCreate, countUpdate, totalWarning, globalDict):
&#39;*          Imports data from a single table row. It may create an object or update
&#39;*          an already existing one. The parameters are the row values (retrieved by
&#39;*          calling the GetRowValues method), the kind of object associated with the
&#39;*          table, an optional stereotype value, the collection of all column mappings 
&#39;*          for this table, the folder where the imported object should be stored, 
&#39;*          the two count output parameters and the global dictionary
&#39;*  - Sub CommitCellData(newobj, colnMap, vale, subObj, globalDict, countCreate, totalWarning): Assign a value retrieved from the
&#39;*          document to the object for one table cell. The parameters are the model
&#39;*          object to update, the column mapping information for the cell and the value
&#39;*          retrieved from the imported document.
&#39;*  - Function AdjustValueType(colnMap, newObj, vale, globalDict, countCreate, totalWarning):
&#39;*          Convert the string value retrieved from data source into expected data type.
&#39;*          Specifically for Object and Boolean data types
&#39;*          Returns true if the value is valid
&#39;*
&#39;*  Methods to Retrieve Existing Objects
&#39;*  - Function FindOrCreateObjectFromRow(dictValues, classId, strn, subObj, colnCol, fldr, countCreate, 
&#39;*          countUpdate, totalWarning, globalDict): Find an existing object from row values or create a new one.
&#39;*          This function will search for a column that is mapped to an identifying attribute
&#39;*          like name or code to try to retrieve the object from information provided in row values.
&#39;*          The parameters are the same as for CommitRowData function. The return value
&#39;*          is the retrieved or created object.
&#39;*  - Function FindOrCreateSubObjectFromRow(dictValues, classId, strn, colnCol, fldr, created, countCreate, 
&#39;*          countUpdate, totalWarning, globalDict): The same as previous method but for sub-objects.
&#39;*  - Function FindOrCreateObjectFromCell(colnMap, vale, newObj, countCreate, totalWarning, globalDict):
&#39;*          find an existing object from a value and a single column mapping or create a new one.
&#39;*  - Function RetrieveClassKeyDictionary(globalDict, classId, strn, attrName, fldr, create):
&#39;*          Retrieve or build a VB script dictionary object that stores for a class attribute the map of
&#39;*          attribute value (as key) and associated oject (as value). This dictionary is
&#39;*          created on first call with create=true and then stored in the global dictionary to reuse it.
&#39;*          This is an optimization that avoid looping on all objects each one we need to solve
&#39;*          a referential key. If the folder parameter is nothing, we just try to retrieve it
&#39;*          and not to create it.
&#39;*  - Sub FillClassKeyDictionary(keyDict, classId, strn, attrName, fldr): Fill a new class key dictionary
&#39;*          with all available values in the model. The attribute value is the key and the
&#39;*          corresponding object is the value.
&#39;*  - Function GetObjectValue(obj, attrName): Retrieves the object value.
&#39;*          The parameters are the object and the attribute public name.
&#39;*
&#39;*   Mapping Definition Functions
&#39;*   - Sub AdjustTableMappings(obj, dict): Each document table needs to be associated
&#39;*          to an object kind. This mapping information is stored on a table mapping
&#39;*          sub-object created for each document table. This method creates those
&#39;*          table mapping sub-objects (or deletes obsolete ones).
&#39;*          The first parameter is the ExcelImport object that stores all mapping
&#39;*          information and the second parameter is the dictionary returned by
&#39;*          the EnumerateDocumentTables method and containing the list of tables
&#39;*          available in the document.
&#39;*  - Function GetOrDefineTableMapping(tablMap, showDialog):  Retrieve mapping information
&#39;*          for a table and displays if necessary a dialog to the end-user to
&#39;*          enter this information when it is incomplete
&#39;*          The table mapping sub-object is provided in parameter and the return 
&#39;*          value is the kind of object associated to this document table.
&#39;*          The second parameter allows to display the mapping dialog even if it is
&#39;*          already correctly defined
&#39;*  - Sub AdjustColumnMappings(tablSrc, tablMap): Each column of a document table 
&#39;*          needs to be associated to an object attribute. This mapping information
&#39;*          is stored on a column mapping sub-object created for each document table
&#39;*          column. This method creates those column mapping sub-objects (or deletes 
&#39;*          obsolete ones).
&#39;*          The first parameter is the table document object returned by
&#39;*          the EnumerateDocumentTables method. The second parameter is the table
&#39;*          mapping sub-object corresponding to this document table.
&#39;*  - Function GetOrDefineColumnMapping(colnMap, showDialog):  Retrieve mapping information
&#39;*          for a table column and displays if necessary a dialog to the end-user to
&#39;*          enter this information when it is incomplete
&#39;*          The column mapping sub-object is provided in parameter and the return 
&#39;*          value is the public name of the object attribute associated to this column.
&#39;*          The second parameter allows to display the mapping dialog even if it is
&#39;*          already correctly defined
&#39;*  - Function GetMappingValue(map, attrName): Optimized retrieve of a mapping extended
&#39;*          attribute value using a global dictionary as cache.
&#39;*
&#39;*  Metamodel Extension Creation Functions
&#39;*  - Function GetOrCreateExtendedAttribute(obj, colnMap): Retrieves or creates a new
&#39;*          extended attribute definition corresponding to a document column.
&#39;*          Extended attributes are retrieved from any extension associated to current
&#39;*          model. Creation of a new extended attribute definition is done in the 
&#39;*          extension associated to the import object. If no extension
&#39;*          is associated at the beginning of the import, a new extension is automatically created.
&#39;*  - Function CreateNewMetaclass(tablMapp, kind): Displays a dialog to create a new metaclass
&#39;*          based on the one specified by kind and return the corresponding stereotype definition.
&#39;*          The fist parameter must be any table mapping object.
&#39;*  - Function CreateNewAttribute(colnMapp, kind): Displays a dialog to create a new extended attribute 
&#39;*          on the class specified by kind and return the corresponding attribute definition.
&#39;*          The fist parameter must be any column mapping object.
&#39;*  - Function CreateNewCollection(colnMapp, kind): Displays a dialog to create a new extended collection
&#39;*          on the class specified by kind and return the corresponding collection definition.
&#39;*          The fist parameter must be any column mapping object.
&#39;*
&#39;* Some utility methods are also used in this generic import algorithm:
&#39;*  - Sub DisplayError(text): Display an error message box with specified text
&#39;*  - Sub LogText(text): Display a text in the ouput window to warn the user
&#39;*  - Sub Debug(text): Display a text in the ouput window but only in debug mode
&#39;*          This debug mode can be activated by assigning true value to the debugMode
&#39;*          global variable on the top of this script. 
&#39;*  - Function SearchInCollByName(coll, name, acceptShortcut): Search for an object
&#39;*          in a collection, knowing its name.
&#39;*  - Function GetProgress(): Retrieve the progress dialog for the import
&#39;*
&#39;******************************************************************************


&#39; &lt;localize string&gt;
Dim const_colnType_Attribute, const_colnType_List, const_colnType_Reference, const_colnType_Relationship, const_colnType_Standard
const_colnType_Attribute = &quot;Attribute&quot;
const_colnType_List = &quot;List&quot;
const_colnType_Reference = &quot;Reference&quot;
const_colnType_Relationship = &quot;Relationship&quot;
const_colnType_Standard = &quot;Standard&quot;
Dim txtOpenDoc, txtCloseDoc, txtError, txtNextBtn, txtOkBtn
txtOpenDoc = &quot;Opening document &quot;
txtCloseDoc = &quot;Closing document &quot;
txtError = &quot;Error&quot;
txtNextBtn = &quot;Next&gt;&quot;
txtOkBtn = &quot;OK&quot;
Dim txtExcelNotFound, txtExcelNotLoad
txtExcelNotFound = &quot;Could not find Excel application on this machine&quot;
txtExcelNotLoad = &quot;Could not load Excel file &quot;
Dim txtExcelImport, txtNoMapping, txtNoTableToImport, txtImportingData, txtImportingTableData, txtImportingTable, txtImportingRow
txtExcelImport = &quot;Excel Import&quot;
txtNoMapping = &quot;No mapping defined for this import&quot;
txtNoTableToImport = &quot;No table to import&quot;
txtImportingData = &quot;Importing data from source document&quot;
txtImportingTableData = &quot;Importing data from table &quot;
txtImportingTable = &quot;Importing table &quot;
txtImportingRow = &quot;   Importing row &quot;
Dim txtObjectsCreated, txtUpdated, txtObjectsUpdated, txtNoCreation, txtUserAbort
txtObjectsCreated = &quot; object(s) created&quot;
txtUpdated = &quot; updated&quot;
txtObjectsUpdated = &quot; object(s) updated&quot;
txtNoCreation = &quot;  no object created or updated&quot;
txtUserAbort = &quot;  Import aborted by user&quot;
Dim txtExtensionXEM, txtCreatingXEM, txtCreatingExa, txtCreatingCol, txtOnMetaclass
txtExtensionXEM = &quot;Import Extensions&quot;
txtCreatingXEM = &quot;  Creating extension &quot;
txtCreatingExa = &quot;  Creating new attribute &quot;
txtCreatingCol = &quot;  Creating new extended collection &quot;
txtOnMetaclass = &quot; on metaclass &quot;
Dim txtDlgPrntMapping, txtDlgImportComplete
txtDlgPrntMapping = &quot;Specify Parent Object Column&quot;
txtDlgImportComplete = &quot;import complete&quot;
Dim txtListDttpString, txtListDttpBoolean, txtListDttpObject
txtListDttpString = &quot;String&quot;
txtListDttpBoolean = &quot;Boolean&quot;
txtListDttpObject = &quot;Object&quot;
Dim txtErrNoClss, txtErrSubObjNoPrnt, txtErrAbstractClass
txtErrNoClss = &quot;The associated object type does not exist&quot;
txtErrSubObjNoPrnt = &quot;The import of a sub-object requires a &quot; &amp; const_parentAttrValue &amp; &quot; column&quot;
txtErrAbstractClass = &quot;The associated object type is abstract&quot;
Dim txtQAttrName, txtQAttrCode, txtQAttrQName, txtQAttrQCode
txtQAttrName = &quot;Name&quot;
txtQAttrCode = &quot;Code&quot;
txtQAttrQName = &quot;Qualified name&quot;
txtQAttrQName = &quot;Qualified node&quot;
Dim txtConfirmImport, txtImportConfirmation
txtConfirmImport = &quot;Do you want to import the content of this Excel file?&quot;
txtImportConfirmation = &quot;Excel File Import&quot;

&#39; &lt;Do not localize strings&gt;
Dim const_newAttrValue, const_newBoolAttrValue, const_newObjAttrValue, const_newAttrValue_old, const_newBoolAttrValue_old, const_parentAttrValue
const_newAttrValue = &quot;&lt;New Attribute&gt;&quot;
const_newAttrValue_old = &quot;&lt;New Extended Attribute&gt;&quot;
const_newBoolAttrValue = &quot;&lt;New Boolean Attribute&gt;&quot;
const_newBoolAttrValue_old = &quot;&lt;New Boolean Extended Attribute&gt;&quot;
const_newObjAttrValue = &quot;&lt;New Object Attribute&gt;&quot;
const_parentAttrValue = &quot;&lt;Parent&gt;&quot;


&#39;******************************************************************************
&#39;*
&#39;*                    Specific Import Methods to be implemented 
&#39;*                    for each kind of import (Excel in this case)
&#39;*
&#39;******************************************************************************

&#39;******************************************************************************
&#39;*                         CheckApplicationExist
&#39;******************************************************************************
Function CheckApplicationExist()
   CheckApplicationExist = &quot;&quot;
   Dim objExcel
   Set objExcel = nothing
   On Error Resume next
   Set objExcel = nothing
   Set objExcel = CreateObject(&quot;Excel.Application&quot;) &#39; NO-NLS
   HandleErrorCase -1, vbcrlf + vbcrlf
   if objExcel is nothing then
      CheckApplicationExist = txtExcelNotFound
   end if
   set objExcel = nothing
End Function

&#39;******************************************************************************
&#39;*                         OpenSourceDocument
&#39;******************************************************************************
Function OpenSourceDocument(value)
   LogText txtOpenDoc + value
   Set OpenSourceDocument = nothing
   Dim objExcel, objWorkbook
   
   Set objExcel = nothing
   On Error Resume next
   Set objExcel = CreateObject(&quot;Excel.Application&quot;) &#39; NO-NLS
   HandleErrorCase -1, vbcrlf + vbcrlf
      
   if objExcel is nothing then
      &#39; No Excel Application
      DisplayError txtExcelNotFound + errorMsg
   else 
      Set objWorkbook = nothing
      On Error Resume next
      Set objWorkbook = objExcel.Workbooks.Open(value, false, true) &#39; read-only
      HandleErrorCase -1, vbcrlf + vbcrlf
      if objWorkbook is nothing then
         &#39; Not an Excel file
         DisplayError txtExcelNotLoad + value + errorMsg
      else
         set OpenSourceDocument = objWorkbook
         set objWorkbook = nothing
      End If
      set objExcel = nothing
   end if
End Function


&#39;******************************************************************************
&#39;*                         CloseSourceDocument
&#39;******************************************************************************
sub CloseSourceDocument(document)
   If not document is nothing then
      LogText txtCloseDoc + document.Name
      Dim App      
      set App = document.Application
      document.Close(false) &#39; do not save
      if not App is nothing then
         App.Quit
         set App = nothing
      end if
   End If
End Sub


&#39;******************************************************************************
&#39;*                         EnumerateDocumentTables
&#39;******************************************************************************
Function EnumerateDocumentTables(document)
   set EnumerateDocumentTables = nothing

   &#39; Create a dictionary to return table list
   Dim dict   
   Set dict = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
   if not dict is nothing then
      &#39; Loop on document spreadsheets
      Debug &quot;  Enumerating tables in document&quot;
      Dim objWorksheet
      for each objWorksheet in document.Worksheets
         Dim region
         set region = nothing
         If objWorksheet.UsedRange.Rows.Count &gt; 1 then
            &#39; Non empty worksheet, search first region with value
            set region = GetFirstExcelUsedRegion(objWorksheet)
            if not region is nothing then
               if region.Rows.Count &gt;= 1 then
                  Debug &quot;    Table &quot; + objWorksheet.Name + &quot; is not empty&quot;
                  dict.Add objWorksheet.Name, region
               End If
            end if
         End If
         if region is nothing then
            Debug &quot;    Table &quot; + objWorksheet.Name + &quot; is empty&quot;
         end if
         set region = nothing         
      next
      set EnumerateDocumentTables = dict               
      set dict = nothing
      set objWorksheet = nothing            
   end if

End Function


&#39;******************************************************************************
&#39;*                         EnumerateTableColumns
&#39;******************************************************************************
Function EnumerateTableColumns(table, name)
   set EnumerateTableColumns = nothing

   &#39; Create a dictionary to return column list
   Dim dict2   
   Set dict2 = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
   if not dict2 is nothing then
      Dim range
      set range = table
      if not range is nothing then
         if range.Rows.count &gt; 1 then
            Dim objColumn
            for each objColumn in range.Columns
               dict2.Add objColumn.Cells(1), objColumn
            next
            Debug &quot;  Enumerating columns for table &quot; + name + &quot;, &quot; + CStr(dict2.Count) + &quot; column(s) found&quot;            
            set objColumn = nothing
         end if
         set EnumerateTableColumns = dict2               
         set range = nothing            
      end if
      set dict2 = nothing
   end if

End Function


&#39;******************************************************************************
&#39;*                         GetTableRowCount
&#39;******************************************************************************
Function GetTableRowCount(table, name)
   GetTableRowCount = table.Rows.Count
End Function


&#39;******************************************************************************
&#39;*                         GetNextTableRow
&#39;******************************************************************************
Function GetNextTableRow(table, line, name)
   Dim found
   set found = nothing
   &#39; Initialize first line if necessary
   if line is nothing then
      If table.Rows.Count &gt; 1 then
         set line = table.Rows(1)
      End If
   end if
   &#39; Find next line
   if not line is nothing then
      Dim row, nextLine
      nextLine = false
      set found = nothing
      For each row in table.Rows
         if row.Row = line.Row then
            nextline = true
         elseif nextline then
            if debugMode then
               Debug &quot;   Next line of table &quot; + name + &quot; is &quot; + CStr(row.Row)
            end if
            set found = row
            Exit For
         end if
      Next
      set row = nothing
   end if
   set GetNextTableRow = found
   set found = nothing
End Function


&#39;******************************************************************************
&#39;*                         GetRowValues
&#39;******************************************************************************
Function GetRowValues(table, line, name)
   Dim dict3   
   Set dict3 = CreateObject(&quot;Scripting.Dictionary&quot;)&#39; NO-NLS
   if not dict3 is nothing then
      &#39; Retrieve used range information
      Dim topRow, leftCol, rowCount, colCount
      topRow = table.Row
      leftCol = table.Column
      rowCount = table.Rows.Count
      colCount = table.Columns.Count
      &#39; Loop on row cells
      Dim cell, vale, key
      For cell = 1 to colCount
         key = table.Cells(1, cell).Text
         if not dict3.Exists(key) then
            vale = table.Cells(line.Row-topRow+1, cell).Text
            &#39;Debug &quot;    Reading Cell value &quot; + key + &quot;(&quot; + CStr(line.Row) + &quot;,&quot; + CStr(leftCol+cell-1) + &quot;)=&quot; + CStr(vale)
            dict3.Add key, CStr(vale)
         end if
      Next
      if debugMode then
         Debug &quot;    Reading values for line &quot;  + CStr(line.Row) + &quot;, &quot; + CStr(dict3.Count) + &quot; column(s) found&quot;
      end if
   end if
   set GetRowValues = dict3
   set dict3 = nothing
End Function










&#39;******************************************************************************
&#39;*
&#39;*                         Specific Excel Helpers
&#39;*
&#39;******************************************************************************

&#39;******************************************************************************
&#39;*                         GetFirstExcelUsedRegion
&#39;******************************************************************************
Function GetFirstExcelUsedRegion(objWorksheet)
   set GetFirstExcelUsedRegion = nothing
   &#39; The UsedRange property is not reliable in Excel
   &#39; because it includes cells without value but with other property (format...)
   Dim line, cell, firstCell, lastCell, lastColumn
   set firstCell = nothing
   set lastCell = nothing
   lastColumn = 0
   &#39; Loop on all cells of used range to detect first non-empty line
   For each line in objWorksheet.usedRange.Rows
      For each cell in line.Cells
         If firstCell is nothing then
            &#39; Searching for first cell with non-empty value
            if not cell.Text = &quot;&quot; then
               Debug &quot;   Found first cell for table &quot; + objWorksheet.Name + &quot;: (&quot; + CStr(cell.Row) + &quot;,&quot; + CStr(cell.Column) + &quot;)&quot;
               set firstCell = cell
               lastColumn = cell.Column
            End If
         Else 
            &#39; Searching for last cell on the row with non-empty value
            If cell.Text = &quot;&quot; then
               Exit For
            Else
               lastColumn = cell.Column
            End If
         end if
      Next
      &#39; Stop if we already found a non-empty line
      if not firstCell is nothing then
         Exit For
      end if
   Next
   &#39; Loop on all cells of used range to detect last non-empty line
   If not firstCell is nothing then
      Dim emptyLine, lastLine
      emptyLine = false
      set lastLine = nothing
      For each line in objWorksheet.usedRange.Rows
         If line.Row &gt; firstCell.Row then
            emptyLine = true
            For each cell in line.Cells
               If not cell.Text=&quot;&quot; then
                  emptyLine = false
                  set lastLine = line
                  Exit For
               Elseif cell.Column &gt; lastColumn then
                  Exit For
               End If
            Next
            If emptyLine then
               If not lastLine is nothing then
                  set lastCell = objWorksheet.Cells(lastLine.Row, lastColumn)
               End If
               Exit For
            Else
               If not lastLine is nothing then
                  set lastCell = objWorksheet.Cells(lastLine.Row, lastColumn)
               End If
            End If
         End If
      Next   
   End If
   set line = nothing
   set cell = nothing
   set lastLine = nothing
   &#39; Construct a range with first and last cells
   if not firstCell is nothing and not lastCell is nothing then
      Debug &quot;   Found last cell for table &quot; + objWorksheet.Name + &quot;: (&quot; + CStr(lastCell.Row) + &quot;,&quot; + CStr(lastCell.Column) + &quot;)&quot;
      If lastCell.Row &gt; firstCell.Row then
         set GetFirstExcelUsedRegion = objWorksheet.Range(firstCell, lastCell)
      End If
   end if
   set firstCell = nothing
   set lastCell = nothing
End Function   










&#39;******************************************************************************
&#39;*
&#39;*                         Generic Import Methods
&#39;*
&#39;******************************************************************************

&#39; Declare a global variable in order to keep some objects alive
&#39; when they are returned by a function (static objects like meta attribute)
Dim globalObject
set globalObject = nothing

&#39; Declare global variable to handle user abort in a dialog
Dim globalUserAbort
globalUserAbort = false

&#39; Search External Models option
Dim globalSearchExternalModels
globalSearchExternalModels = false

&#39; Qualified Separator option
Dim globalQualifiedSeparator
globalQualifiedSeparator = &quot;.&quot;

 &#39; A global dictionary storage used to optimize the retrieve of mapping parameters
Dim globalDictMappingValues
set globalDictMappingValues = nothing

&#39;******************************************************************************
&#39;*                         DisplayError
&#39;******************************************************************************
Sub DisplayError(text)
   LogText text
   if interactivemode = im_Dialog then
      msgbox text, vberror, txtError
   end if
End Sub


&#39;******************************************************************************
&#39;*                         Debug
&#39;******************************************************************************
Sub Debug(text)
   if debugMode then
      output &quot;[Dbg] &quot; + text &#39; NO-NLS
   end if
End Sub


&#39;******************************************************************************
&#39;*                         LogText
&#39;******************************************************************************
Sub LogText(text)
   if debugMode then
      output &quot;[Log] &quot; + cstr(text) &#39; NO-NLS
   else
      output text
   end if
End Sub

&#39;******************************************************************************
&#39;*                         SafeAssignNameAndCode
&#39;******************************************************************************
Sub SafeAssignNameAndCode(obj, name)
   if not obj is nothing then
      Dim oldMode
      oldMode = ValidationMode
      ValidationMode = false
      obj.Name = name
      obj.Code = name
      ValidationMode = oldMode
   end if
End Sub

&#39;******************************************************************************
&#39;*                         GetProgress
&#39;******************************************************************************
Function GetProgress()
   Dim prgs
   set prgs = nothing
   if useProgress then
      set prgs = Progress(txtExcelImport, false) &#39; NO-NLS
   end if
   set GetProgress = prgs
End Function


&#39;******************************************************************************
&#39;*                         ErrorOccurs
&#39;******************************************************************************
Function ErrorOccurs()
   ErrorOccurs = false
   if not Err is nothing then
      if not Err.Number = 0 then            
         ErrorOccurs = true
      end if
   end if
end Function

&#39;******************************************************************************
&#39;*                         HandleErrorCase
&#39;******************************************************************************
Sub HandleErrorCase(warningCount, msg)
   &#39; Check if an error occurred
   if not Err is nothing then
      if not Err.Number = 0 then
         &#39; Do not display anything if initial message is empty
         if not msg = &quot;&quot; then 
            Dim errDesc         
            errDesc = Err.Description
            if not errDesc = &quot;&quot; then
               errDesc = &quot; (&quot; + errDesc + &quot;)&quot; &#39; NO-NLS
            end if
            LogText msg + errDesc
         end if
         &#39; Do not increment warning count if negative
         if not warningCount = -1 then
            warningCount = warningCount + 1
         end if
         Err.Number = 0
      end if
   end if
   &#39; Restore normal error mode
   if not debugMode then
      On Error Resume next
   else
      On Error Goto 0
   end if
End Sub


&#39;******************************************************************************
&#39;*                         GetMappingValue
&#39;******************************************************************************
Function GetMappingValue(map, attrName)
   Dim key, value
   value = &quot;&quot;
   if globalDictMappingValues is nothing then
      value = map.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; + attrName)
   else 
      key = map.ObjectID + attrName
      if globalDictMappingValues.Exists(key) then
         value = globalDictMappingValues.Item(key)
      else
         value = map.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; + attrName)
         globalDictMappingValues.Add key, value      
      end if
   end if
   GetMappingValue = value
End Function


&#39;******************************************************************************
&#39;*                         GetMappingObjectValue
&#39;******************************************************************************
Function GetMappingObjectValue(map, attrName)
   Dim key, value
   set value = nothing
   if globalDictMappingValues is nothing then
      set value = map.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; + attrName)
   else 
      key = map.ObjectID + attrName
      if globalDictMappingValues.Exists(key) then
         set value = globalDictMappingValues.Item(key)
      else
         set value = map.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; + attrName)
         globalDictMappingValues.Add key, value      
      end if
   end if
   set GetMappingObjectValue = value
End Function


&#39;******************************************************************************
&#39;*                         ResetMappingDictionary
&#39;******************************************************************************
Sub ResetMappingDictionary()
   if not globalDictMappingValues is nothing then
      globalDictMappingValues = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
   end if
End Sub


&#39;******************************************************************************
&#39;*                         GetObjectValue
&#39;******************************************************************************
Function GetObjectValue(obj, attrName)
   Dim objVale
   objVale = &quot;&quot;
   if IsNewAttributeRequest(attrName) then
      &#39; New extended attribute specific case
      attrName = colnMap.Name
      objVale = obj.GetExtendedAttribute(attrName)
   elseif InStrRev(attrName, &quot;.&quot;) &gt; 0 then
      &#39; Predefined extended attribute specific case
      objVale = obj.GetExtendedAttribute(attrName)
   else
      &#39; Standard attribute case
      objVale = obj.GetAttributeText(attrName)
   end if
   GetObjectValue = objVale    
End Function


&#39;******************************************************************************
&#39;*                         SearchInCollByName
&#39;******************************************************************************
Function SearchInCollByName(coll, name, acceptShortcut)
   Set SearchInCollByName = nothing
   Dim found
   set found = nothing
   for each found in coll
      if not found.IsShortcut() or acceptShortcut then
         if found.name = name then
            Set SearchInCollByName = found
            exit for
         end if
      end if
   next
   set found = nothing
End Function


&#39;******************************************************************************
&#39;*                         AdjustTableMappings
&#39;******************************************************************************
Sub AdjustTableMappings(obj, dict)
   if not dict is nothing and not obj is nothing then
      Dim tablCol, tablMap, tablSrc, tablNam
      set tablCol = obj.GetCollectionByName(&quot;TableMappings&quot;)
      if not tablCol is nothing then
         &#39; Create new table mappings
         for each tablNam in dict.Keys
            set tablMap = SearchInCollByName(tablCol, tablNam, false)
            if tablMap is nothing then
               set tablMap = tablCol.CreateNew()
            end if
            if not tablMap is nothing then
               SafeAssignNameAndCode tablMap, tablNam
               set tablSrc = dict.Item(tablNam)
               if not tablSrc is Nothing then
                  AdjustColumnMappings tablSrc, tablMap
               end if
            end if
         next    
         &#39; Delete obsolete table mapping
         For each tablMap in tablCol
            if not dict.Exists(tablMap.Name) then
               tablMap.Delete
            end if 
         Next
         
         &#39; Clean up
         set tablMap = nothing
         set tablCol = nothing
         set tablSrc = nothing
      End If
   end If
End sub


&#39;******************************************************************************
&#39;*                         AdjustColumnMappings
&#39;******************************************************************************
Sub AdjustColumnMappings(tablSrc, tablMap)
   if not tablSrc is nothing and not tablMap is nothing then
      Dim colnCol
      set colnCol = tablMap.GetCollectionByName(&quot;ColumnMappings&quot;)
      if not colnCol is nothing then
         dim dict
         set dict = EnumerateTableColumns(tablSrc, tablMap.Name)
         if not dict is nothing then
            &#39; Create new column mappings         
            Dim colnSrc, colnMap, newMap
            For each colnSrc in dict.Keys
               set colnMap = SearchInCollByName(colnCol, colnSrc, false)
               newMap = false
               if colnMap is nothing then
                  newMap = true
                  set colnMap = colnCol.CreateNew()
               end if
               if not colnMap is nothing then
                  SafeAssignNameAndCode colnMap, colnSrc
                  if newMap then
                     &#39; Initialize values for common options
                     InitializeColumnMappingOptions colnMap
                  end if
               end if
            Next
            &#39; Delete obsolete column mappings
            Dim found
            For each colnMap in colnCol
               found = false
               for each colnSrc in dict.Keys
                  if colnMap.Name = colnSrc then
                     found = true
                     Exit For
                  end if
               next
               if not found then
                  Debug &quot;Deleting column mapping &quot; + colnMap.Name
                  colnMap.Delete
               end if 
            Next    
            &#39; Clean up        
            set dict = nothing
            set colnMap = nothing
         end if
      end if
   end if
End Sub


&#39;******************************************************************************
&#39;*                         ImportDocumentData
&#39;******************************************************************************
Function ImportDocumentData(tablDict, importDefn, totalCreate, totalUpdate, totalWarning)
   ImportDocumentData = true
   globalUserAbort = false
   set globalDictMappingValues = nothing
   &#39; Import each table separatly
   Dim tablSrc, tablMap, tablCol, tablNam
   set tablCol = importDefn.GetCollectionByName(&quot;TableMappings&quot;)
   if tablCol is nothing then
      DisplayError txtNoMapping
   elseif tablDict.Count = 0 then
      DisplayError txtNoTableToImport
   else
      &#39; Count number of rows to import
      Dim totalRowCount
      totalRowCount = 0
      for each tablNam in tablDict.Keys
         set tablMap = SearchInCollByName(tablCol, tablNam, false)
         if not tablMap is nothing then
            Set tablSrc = tablDict.Item(tablNam)
            if not tablSrc is nothing then
               totalRowCount = totalRowCount + GetTableRowCount(tablSrc, tablNam)
            end if
         end if
      next
      &#39; Initialize progress dialog
      useProgress = false
      if totalRowCount = 0 or totalRowCount &gt; 199 then
         useProgress = true
      end if 
      Dim prgs
      set prgs = GetProgress() 
      if not prgs is nothing then
         &#39;prgs.CanBeCanceled = true &#39; only for pregress bar
         prgs.Text = txtImportingData
         prgs.Min = 0
         prgs.Max = totalRowCount
         prgs.Stepping = 1
         Debug &quot; Total number of rows to import: &quot; + CStr(prgs.Max)
         prgs.Start()
      end if
      &#39; Save the &quot;SearchExternalModels&quot; option in a global
      globalSearchExternalModels = importDefn.GetExtendedAttribute(&quot;%CurrentTargetCode%.SearchExternalModels&quot;)
      
      &#39; Save the &quot;QualifiedSeparator&quot; option in a global
      globalQualifiedSeparator = importDefn.GetExtendedAttribute(&quot;%CurrentTargetCode%.QualifiedSeparator&quot;)
      
      &#39; Define missing mappings
      if not DefineMapping(tablCol, false) then
         ImportDocumentData = false &#39; User abort
      end if
      &#39; Import each table
      If ImportDocumentData then
         &#39; Create a global dictionary for key/object retrieve
         Dim globalDict
         set globalDict = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
         set globalDictMappingValues = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
         &#39; Import tables      
         for each tablNam in tablDict.Keys
            set tablMap = SearchInCollByName(tablCol, tablNam, false)
            if not tablMap is nothing then
               if not CLng(GetMappingValue(tablMap, &quot;ImportedKind&quot;)) = 0 then  &#39; NO-NLS
                  Set tablSrc = tablDict.Item(tablNam)            
                  If not ImportTableData(tablSrc, tablMap, totalCreate, totalUpdate, totalWarning, globalDict) then
                     &#39; Import canceled by user
                     ImportDocumentData = false
                     Exit For
                  End If
               end if
            end if
         next
         set globalDict = nothing
         set globalDictMappingValues = nothing
      End if
      set tablSrc = nothing
      set tablMap = nothing
      &#39; Refresh active diagram
      if not ActiveDiagram is nothing then
         ActiveDiagram.RedrawAllViews   
      end if
      &#39; Stop progress
      if not prgs is nothing then
         prgs.Stop()
         set prgs = nothing
      end if
   end if
   set tablCol = nothing
End Function


&#39;******************************************************************************
&#39;*                         DefineMapping
&#39;******************************************************************************
Function DefineMapping(tablCol, alwaysShowDialog)
   &#39; Define missing mappings
   DefineMapping = true
   Dim tablMap
   for each tablMap in tablCol
      GetOrDefineTableMapping tablMap, alwaysShowDialog
      If globalUserAbort then
         DefineMapping = false
         Exit For
      Elseif not tablMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.Skip&quot;) then
         Dim colnMap
         for each colnMap in tablMap.GetCollectionByName(&quot;ColumnMappings&quot;) &#39; NO-NLS
            If not globalUserAbort then
               GetOrDefineColumnMapping colnMap, alwaysShowDialog
            End If
         next
         set colnMap = nothing
         If globalUserAbort then
            DefineMapping = false
            Exit For
         End If         
      End if
   next 
   set tablMap = nothing
End Function


&#39;******************************************************************************
&#39;*                         ImportTableData
&#39;******************************************************************************
Function ImportTableData(tablSrc, tablMap, totalCreate, totalUpdate, totalWarning, globalDict)
   ImportTableData = true
   Dim classId, strn, oldValidationMode, newValidationMode
   classId = GetOrDefineTableMapping(tablMap, false)
   if not globalUserAbort then
      strn = GetMappingValue(tablMap, &quot;ImportedStereotype&quot;) &#39; NO-NLS 
      Dim colnCol, fldr
      set colnCol = tablMap.GetExtendedCollection(&quot;ColumnMappings&quot;, false) &#39; NO-NLS
      set fldr = tablMap.Folder
      if not colnCol is nothing and not fldr is nothing and not classId = 0 then
         Dim subObj, mandcoln, lnkClss
         subObj = false
         mandColn = false
         lnkClss = 0
         &#39; Read and commit data
         if CanImportTableData(tablMap, colnCol, classId, fldr, totalWarning, subObj, mandColn, lnkClss) then
            LogText txtImportingTableData + tablMap.Name  &#39; NO-NLS
            LogText Time
            &#39; Get first row of the table
            Dim countCreate, countUpdate   
            dim nextLine, dictValues, dictOldValues
            set dictValues = nothing
            set dictOldValues = nothing
            set nextLine = GetNextTableRow (tablSrc, nothing, tablMap.Name)
            countCreate = 0
            countUpdate = 0
            &#39; Line count
            Dim maxLineNb, currLineNb, lastLineNb, lineNbMsg
            maxLineNb = GetTableRowCount(tablSrc, tablMap.Name)
            currLineNb = 0
            lastLineNb = 0
            &#39; Change 2nd text of progress dialog
            Dim prgs
            set prgs = GetProgress()
            if not prgs is nothing then
               prgs.Text = txtImportingTable + tablMap.Name
               prgs.Text2 = &quot;&quot;
            end if
            &#39; Adjust validation mode
            oldValidationMode = ValidationMode &#39; global
            ValidationMode = GetMappingValue(tablMap.ParentObject, &quot;Validate&quot;) &#39; NO-NLS
            &#39; Loop on all rows of the table
            while (not nextLine is nothing and not globalUserAbort)
               &#39; Handle line count
               currLineNb = currLineNb + 1
               if currLineNb - lastLineNb &gt; 24 then
                  lastLineNb = currLineNb
                  lineNbMsg = txtImportingRow + cstr(currLineNb)
                  if maxLineNb &gt; 0 then
                     lineNbMsg = + lineNbMsg + &quot; / &quot; + cstr(maxLineNb) &#39; NO-NLS
                  end if              
                  if not prgs is nothing then
                     prgs.Text2 = lineNbMsg
                  end if
                  &#39; LogText lineNbMsg        
               end if
               &#39; Preserve old values for non-repeated column values
               if mandColn then
                  set dictOldValues = dictValues
               end if 
               &#39; Read and commit current row
               set dictValues = GetRowValues(tablSrc, nextLine, tablMap.Name)
               if not dictValues is nothing then
                  &#39; Copy mandatory values from previous line
                  CopyMandatoryValues colnCol, dictOldValues, dictValues, mandColn               
                  &#39; Commit data
                  CommitRowData dictValues, classId, strn, subObj, lnkClss, colnCol, fldr, countCreate, countUpdate, totalWarning, globalDict
               end if
               if not globalUserAbort then
                  &#39; Get next row
                  set nextLine = GetNextTableRow (tablSrc, nextLine, tablMap.Name)
                  &#39; Step progress dialog
                  if not prgs is nothing then
                     prgs.Step
                     &#39; Debug &quot;  Progress position is &quot; + CStr(prgs.Position) + &quot;/&quot; + CStr(prgs.Max)
                     if prgs.Canceled() then
                        &#39; The user clicked on Cancel
                        ImportTableData = false
                        set nextLine = nothing
                     end if
                  end if
               else
                  &#39; User abort in dialog
                  ImportTableData = false
                  set nextLine = nothing
               end if
            wend
            &#39; Restore global validation mode
            ValidationMode = oldValidationMode      
            if not prgs is nothing then
               prgs.Text = &quot;&quot;
               prgs.Text2 = &quot;&quot;
            end if                   
            set prgs = nothing
            &#39; Log message with creation and update count
            if not globalUserAbort then
               Dim msg
               msg = &quot;&quot;
               if countCreate &gt; 0 then
                  msg = &quot;  &quot; + CStr(countCreate) + txtObjectsCreated
                  if countUpdate &gt; 0 then
                     msg = msg + &quot;, &quot; + CStr(countUpdate) + txtUpdated    
                  end if
               elseif countUpdate &gt; 0 then
                  msg = &quot;  &quot; + CStr(countUpdate) + txtObjectsUpdated
               else
                  msg = txtNoCreation
               end if
               LogText msg
               if not ImportTableData then
                  LogText txtUserAbort
               end if
               totalCreate = totalCreate + countCreate
               totalUpdate = totalUpdate + countUpdate
            end if
            set dictValues = nothing
         end if
      end if
   else
      ImportTableData = false &#39; user abort in dialog
   end if
   set colnCol = nothing
   set fldr = nothing
   globalUserAbort = false
End Function


&#39;******************************************************************************
&#39;*                         CanImportTableData
&#39;******************************************************************************
Function CanImportTableData(tablMap, colnCol, classId, fldr, totalWarning, subObj, mandColn, lnkClss)
   Dim canImport
   canImport = false
   &#39; Retrieve the associated metaclass
   Dim metaClss, colnMap
   subObj = false
   mandColn = false
   lnkClss = 0
   set metaClss = Metamodel.GetMetaClassByKind(classId)
   if not metaClss is nothing then
      canImport = true
      if (metaClss.Flags and SCLSS_SUBOBJECT) = SCLSS_ABSTRACT then
         &#39; Abstract case
          canImport = false
          DisplayError txtErrAbstractClass
      end if
      if (metaClss.Flags and SCLSS_SUBOBJECT) = SCLSS_SUBOBJECT then
         &#39; Sub-object case
         subObj = true
         Dim prntColnMap
         set prntColnMap = nothing
         for each colnMap in colnCol
            if GetMappingValue(colnMap, &quot;Attribute&quot;) = const_parentAttrValue then &#39; NO-NLS
               set prntColnMap = colnMap
               exit for
            end if
         next
         set colnMap = nothing
         if prntColnMap is nothing then
            DisplayError txtErrSubObjNoPrnt
            canImport = false
         else
            set prntColnMap = nothing
         end if 
      end if
      &#39; Detect link class
      if not metaClss.GetMetaMemberByPublicName(&quot;Object1&quot;) is nothing and not metaClss.GetMetaMemberByPublicName(&quot;Object2&quot;) is nothing then &#39; NO-NLS
        lnkClss = 1
         if metaClss.InheritsFrom(PdCommon.Cls_CompositionLink) then
            lnkClss = 2
         end if
         if debugMode then
            if lnkClss = 1 then
               Debug &quot;    Link class detected for &quot; &amp; GetClassname(classId, &quot;&quot;)
            else
               Debug &quot;    Composition link class detected for &quot; &amp; GetClassname(classId, &quot;&quot;)
            end if
         end if   
      end if
      &#39; Detect missing key
      if lnkClss = 0 then
      end if
      set metaClss = nothing
   else
      DisplayError txtErrNoClss
   end if
   &#39; Search for any mandatory column
   if canImport then
      for each colnMap in colnCol
         if GetMappingValue(colnMap, &quot;Mandatory&quot;) then &#39; NO-NLS
            if debugMode then
               Debug &quot;    Table has at least one mandatory column: &quot; &amp; colnMap.Name
            end if   
            mandColn = true
            exit for
         end if
      next
   end if
   set colnMap = nothing
   &#39; Return value
   CanImportTableData = canImport
End Function


&#39;******************************************************************************
&#39;*                         CopyMandatoryValues
&#39;******************************************************************************
Sub CopyMandatoryValues(colnCol, dictOldValues, dictValues, mandColn)
   if mandColn then
      Dim colnMap, key
      for each colnMap in colnCol
         if GetMappingValue(colnMap, &quot;Mandatory&quot;) then &#39; NO-NLS
            key = colnMap.Name
            if not dictOldValues is nothing then
               if dictOldValues.Exists(key) then
                  if dictValues.Exists(key) then
                     Dim currVale
                     currVale = TrimWhitespace(dictValues.Item(key))
                     if currVale = &quot;&quot; then
                        if debugMode then
                           Debug &quot;    Copying mandatory value for &quot; &amp; key &amp; &quot; using previous row: &quot; &amp; dictOldValues.Item(key)
                        end if
                        dictValues.Item(key) = dictOldValues.Item(key)
                     end if
                  else
                     if debugMode then
                        Debug &quot;    Adding mandatory value for &quot; &amp; key &amp; &quot; using previous row: &quot; &amp; dictOldValues.Item(key)
                     end if
                     dictValues.Add key, dictOldValues.Item(key)
                  end if
               end if
            end if
            &#39; Trim whitespaces for mandatory values
            if dictValues.Exists(key) then
               dictValues.Item(key) = TrimWhitespace(dictValues.Item(key))
            end if
         end if
      next
      set colnMap = nothing
   end if
End Sub


&#39;******************************************************************************
&#39;*                         GetOrDefineTableMapping
&#39;******************************************************************************
Function GetOrDefineTableMapping(tablMap, alwaysShowDialog)
   Dim classId, Skip
   classId = CLng(tablMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
   skip = GetMappingValue(tablMap, &quot;Skip&quot;) &#39; NO-NLS
   If Skip and not alwaysShowDialog then
      classId = 0
   ElseIf classId = 0 or alwaysShowDialog then   
      &#39; Class kind not defined, try to guess it
      classId = GuessDefaultTableMapping(tablMap, false)
      If alwaysShowDialog or (classId = 0 and interactiveMode = im_Dialog) then 
         &#39; Propose to define it now 
         Dim dlg
         set dlg = tablMap.CreateCustomDialog(&quot;%CurrentTargetCode%.ImportTable&quot;)
         If not dlg is nothing then
            GuessDefaultTableMapping tablMap, true
            dlg.EnforceCancelButton = true
            dlg.CloseButtonLabel = txtNextBtn
            globalUserAbort = not dlg.ShowDialog()
            resetMappingDictionary
            set dlg = nothing
            if not globalUserAbort then
               classId = CLng(tablMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
               Skip = GetMappingValue(tablMap, &quot;Skip&quot;) &#39; NO-NLS
               If Skip then
                  classId = 0
               End If 
            end if
         End If
      End If
   End If
   GetOrDefineTableMapping = classId
End Function


&#39;******************************************************************************
&#39;*                         GuessDefaultTableMapping
&#39;******************************************************************************
Function GuessDefaultTableMapping(tablMap, enforceGuess)
   Dim classId
   classId = CLng(GetMappingValue(tablMap, &quot;ImportedKind&quot;)) &#39; NO-NLS
   If classId = 0 then
      Dim shouldGuess
      if enforceGuess then
         shouldGuess = true
      else
         shouldGuess = GetMappingValue(tablMap.ParentObject, &quot;DefaultColumnMapping&quot;) &#39; NO-NLS
      end if
      if shouldGuess then
         &#39; compute class name
         Dim lib, clssname
         set lib = tablMap.model.metaclass.library
         if not lib is nothing then
            clssname = lib.PublicName+&quot;.&quot;+tablMap.Name
            set lib = nothing
         else
            clssname = tablMap.Name
         end if
         clssname = TrimWhitespace(clssName)
         clssname = replace(clssname, &quot; &quot;, &quot;&quot;)
         &#39; retrieve metaclass      
         Dim metaclss
         set metaclss = Metamodel.GetMetaclassByPublicName(clssname)
         if not metaclss is nothing then
            &#39; standard
            if not metaclss.Abstract then
               if not (metaclss.Flags and SCLSS_SUBOBJECT) = SCLSS_SUBOBJECT then
                  tablMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedClassName&quot;, metaclss.PublicName
                  classId = CLng(tablMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
               end if
            end if
         end if
         if metaclss is nothing then
            &#39; search for an extended metaclass
            if Version &gt; &quot;15.1.0.9999&quot; then &#39; NO-NLS the next method is not available in 15.1
               set metaclss = tablMap.Model.GetExtendedMetaclassByName(tablMap.Name)
               if not metaclss is nothing then
                  &#39; we retrieved the stereotype definition, 
                  &#39; retrieve now the metaclass target item
                  Dim strnName
                  strnName = metaclss.Name
                  set metaclss = metaclss.GetMetaclass()
                  if not metaclss is nothing then
                     &#39; retrieve hte metaclass associated to the target item
                     set metaclss = metaclss.TargetMetaclass
                     if not metaclss is nothing then
                        &#39; check if this one is a sub-object metaclass
                        if not (metaclss.Flags and SCLSS_SUBOBJECT) = SCLSS_SUBOBJECT then
                           tablMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedClassName&quot;, strnName
                           classId = CLng(metaclss.Kind)
                        end if
                     end if
                  end if
               end if
            end if
         end if
         &#39; Search using the list of predefined values
         if metaclss is nothing then
            Dim lstValues
            lstValues = tablMap.EvaluateTemplateFor(&quot;allClassNames&quot;, &quot;%CurrentTargetCode%&quot;) &#39; NO-NLS
            if not lstValues = &quot;&quot; then
               Dim pos
               pos = InStr(lstValues, tablMap.Name)
               if pos &gt; 1 then
                  Dim nxtChar
                  nxtChar = asc(Mid(lstValues, pos + Len(tablMap.Name)))
                  On Error Resume Next
                  if nxtChar = asc(vbTab) then
                     &#39; We found a code
                     tablMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedClassName&quot;, tablMap.Name                     
                     classId = CLng(tablMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
                  elseif nxtChar = asc(&quot;;&quot;) then 
                     &#39; We found a label
                     Dim pos2
                     pos2 = InStrRev(Mid(lstValues, 1, pos-1), &quot;;&quot;)
                     if pos2 &gt; 1 then
                        Dim code, pos3
                        code = Mid(lstValues, pos2+1)
                        pos3 = InStr(code, vbTab &amp; tablMap.Name + &quot;;&quot;)
                        if pos3 &gt; 1 then
                           code = Mid(code, 1, pos3-1)
                        else
                           code = tablMap.Name &#39; Label = code
                        end if
                        tablMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedClassName&quot;, code
                        classId = CLng(tablMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
                     end if
                  end if
                  HandleErrorCase -1, &quot;&quot; &#39; Silent
               end if
            end if
         end if
         set metaclss = nothing
      end if
   end if
   GuessDefaultTableMapping = classId
End Function


&#39;******************************************************************************
&#39;*                         CommitRowData
&#39;******************************************************************************
Sub CommitRowData(dictValues, classId, strn, subObj, lnkClss, colnCol, fldr, countCreate, countUpdate, totalWarning, globalDict)
   if not colnCol is nothing and not fldr is nothing then
      &#39; create new object or retrieve it           
      Dim newObj, created
      created = false
      if subObj then
         set newObj = FindOrCreateSubObjectFromRow(dictValues, classId, strn, lnkClss, colnCol, fldr, created, countCreate, countUpdate, totalWarning, globalDict)
      elseif not lnkClss = 0 then
         set newObj = FindOrCreateLinkFromRow(dictValues, classId, strn, false, false, colnCol, fldr, created, countCreate, countUpdate, totalWarning, globalDict)
      else
         set newObj = FindOrCreateObjectFromRow(dictValues, classId, strn, false, colnCol, fldr, created, countCreate, countUpdate, totalWarning, globalDict)
      end if
      if not newObj is nothing and not globalUserAbort then
         Dim nameSet, codeSet
         nameSet = &quot;&quot;
         codeSet = &quot;&quot;
         &#39; Commit all row values
         Dim key, vale, colnMap, keyDict, attrName, localNmspc
         if subObj then
            localNmspc = true
         elseif Version &gt; &quot;15.1.0.9999&quot; then &#39; NO-NLS The HasLocalNamespace method is not available in 15.1
            localNmspc = newObj.Model.HasLocalNamespace(classId)
         else
            localNmspc = false
         end if
         For each colnMap in colnCol
            key = colnMap.Name          
            if dictValues.Exists(key) and not GetMappingValue(colnMap, &quot;Skip&quot;) then &#39; NO-NLS
               Dim oldVale
               oldVale = dictValues.Item(key)
               vale = oldVale
               &#39; Commit the current value
               CommitCellData newobj, colnMap, vale, subObj, globalDict, countCreate, totalWarning
               if not globalUserAbort then
                  &#39; If Column is a key, add new value in dictionary
                  if GetMappingValue(colnMap, &quot;IsKey&quot;) then &#39; NO-NLS
                     attrName = GetMappingValue(colnMap, &quot;Attribute&quot;) &#39; NO-NLS
                     if not localNmspc then
                        &#39; Update dictionary
                        set keyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, attrName, newObj.Folder, false)
                        if not keyDict is nothing then
                           if not keyDict.Exists(vale) then
                              keyDict.Add vale, newObj
                           end if
                           set keyDict = nothing
                        end if
                     end if
                     &#39; Remember if name or code has been set
                     if created then
                        if LCase(attrName) = &quot;name&quot; then &#39; NO-NLS
                           nameSet = oldVale
                        elseif LCase(attrName) = &quot;code&quot; then &#39; NO-NLS
                           codeSet = oldVale
                        end if
                     end if
                  end if
               else
                  Exit for &#39; user abort in dialog
               end if
            else
               Debug &quot;    Column mapping not found for &quot; + key
            end if
            &#39; Synchronize name and code if only one has been set
            if created then
               if (nameSet = &quot;&quot; and not codeSet = &quot;&quot;) or (codeSet = &quot;&quot; and not nameSet = &quot;&quot;) then
                  if IsNamedObject(newObj) then
                     Dim nameOrCode
                     if nameSet = &quot;&quot; then
                        nameOrCode = codeSet
                     else
                        nameOrCode = nameSet
                     end if
                     newObj.SetNameAndCode nameOrCode, nameOrCode, ValidationMode
                     if not localNmspc then
                        &#39; Update associated dictionary
                        if nameSet = &quot;&quot; then
                           set keyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, &quot;Name&quot;, newObj.Folder, false) &#39; NO-NLS
                           if not keyDict is nothing then
                              if not keyDict.Exists(nameOrCode) then
                                 keyDict.Add nameOrCode, newObj
                              end if
                              set keyDict = nothing
                           end if              
                        end if    
                        if codeSet = &quot;&quot; then
                           set keyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, &quot;Code&quot;, newObj.Folder, false) &#39; NO-NLS
                           if not keyDict is nothing then
                              if not keyDict.Exists(nameOrCode) then
                                 keyDict.Add nameOrCode, newObj
                              end if
                              set keyDict = nothing
                           end if          
                        end if
                     end if
                  end if
               end if
            end if
         Next
         if debugMode then
            Debug &quot;    Imported object: &quot; + newObj.ShortDescription
         end if
         &#39; Create default symbol when possible
         if created and not subObj then
            CreateDefaultSymbol newObj, ActiveDiagram, colnCol.Source.Parent
         end if
         &#39; Verify imported object       
         CheckImportedObject newObj, colnCol.Source.Parent, created, countCreate, totalWarning, globalDict
         set colnMap = nothing
         set newObj = nothing
         set keyDict = nothing
      elseif not globalUserAbort then
         if debugMode then
            Debug &quot;    Could not find or create a row object with class &quot; + GetClassname(classId, strn) + &quot; under &quot; + cstr(fldr)
         end if
      end if
   End If
End Sub


&#39;******************************************************************************
&#39;*                         CheckImportedObject
&#39;******************************************************************************
Sub CheckImportedObject(newObj, tablMap, created, countCreate, totalWarning, globalDict)
   if created then
      if IsLinkObject(newObj) then
         &#39; Check that link object has both extremities defined
         Dim obj1, obj2, del, msg
         del = false
         set obj1 = newObj.Object1
         set obj2 = newObj.Object2
         if obj1 is nothing and not newObj.CanSetAttribute(&quot;Object1&quot;, nothing, msg) then &#39; NO-NLS
            Debug &quot;Missing source extremity for &quot; &amp; newObj.ShortDescription
            del = true
         end if
         if not del and obj2 is nothing and not newObj.CanSetAttribute(&quot;Object2&quot;, nothing, msg) then
            Debug &quot;Missing destination extremity for &quot; &amp; newObj.ShortDescription
            del = true
         end if
         set obj1 = nothing
         set obj2 = nothing
         if del then
            LogText &quot;Error: &quot; &amp; newObj.Shortdescription &amp; &quot; will not be imported due to missing link extremity&quot;
            totalWarning = totalWarning + 1
            if countCreate &gt; 0 then
               countCreate = countCreate - 1
            end if
            newObj.Delete
         end if
      end if
   end if
End Sub


&#39;******************************************************************************
&#39;*                         FindMainObjectParent
&#39;******************************************************************************
Function FindMainObjectParent(dictValues, colnCol, fldr, totalWarning)
   Dim newFldr, colnMap
   set newFldr = fldr
   for each colnMap in colnCol
      if GetMappingValue(colnMap, &quot;Attribute&quot;) = const_parentAttrValue then &#39; NO-NLS
         if dictValues.Exists(colnMap.Name) then
            Dim prntVale
            prntVale = dictValues.Item(colnMap.Name)
            if not prntVale = &quot;&quot; then
               Dim qualifierFound
               qualifierFound = false
               set newFldr = FindQualifiedFolder(fldr, &quot;&quot;, prntVale, colnMap.ParentObject.ParentObject, false, qualifierFound)
               if newFldr is nothing then
                  LogText &quot;Error: Could not find parent object &#39;&quot; + prntVale + &quot;&#39;&quot;
                  totalWarning = totalWarning + 1
               end if
            end if
         end if
         exit for
      end if
   next
   set colnMap = nothing
   set FindMainObjectParent = newFldr
   set newFldr = nothing
End Function


&#39;******************************************************************************
&#39;*                         FindLinkExtremityColumnsMapping
&#39;******************************************************************************
Function FindLinkExtremityColumnsMapping(colnCol, colnObj1, colnObj2, hasKey, compLink)
   set colnObj1 = nothing
   set colnObj2 = nothing
   hasKey = false
   Dim colnMap, attrDefn, id
   for each colnMap in colnCol
      set attrDefn = GetMappingObjectValue(colnMap, &quot;AttributeDefinition&quot;) &#39; NO-NLS
      if not attrDefn is nothing then
         if attrDefn.IsKindOf(Cls_MetaAttribute) then
            if attrDefn.Alias then
               set attrDefn = attrDefn.AliasBase
            end if
            if not attrDefn is nothing then
               if attrDefn.PublicName = &quot;Object1&quot; then &#39; NO-NLS
                  set colnObj1 = colnMap
               elseif attrDefn.PublicName = &quot;DependentObject&quot; then &#39; NO-NLS
                  set colnObj1 = colnMap
               elseif attrDefn.PublicName = &quot;Object2&quot; then &#39; NO-NLS
                  set colnObj2 = colnMap
               elseif attrDefn.PublicName = &quot;InfluentObject&quot; then &#39; NO-NLS
                  set colnObj2 = colnMap
               elseif compLink and attrDefn.PublicName = &quot;LinkedObject&quot; then &#39; NO-NLS
                  set colnObj2 = colnMap
               elseif GetMappingValue(colnMap, &quot;IsKey&quot;) then &#39; NO-NLS
                  hasKey = true
               end if
               if not colnObj1 is nothing and not colnObj2 is nothing and hasKey then
                  exit for
               end if
            end if
         end if
      elseif GetMappingValue(colnMap, &quot;Attribute&quot;) = const_parentAttrValue then &#39; NO-NLS
         set colnObj1 = colnMap
      end if
   next
   set colnMap = nothing
   if colnObj1 is nothing or colnObj2 is nothing then
      FindLinkExtremityColumnsMapping = false
   else
      FindLinkExtremityColumnsMapping = true
   end if
End Function


&#39;******************************************************************************
&#39;*                         FindOrCreateObjectFromRow
&#39;******************************************************************************
Function FindOrCreateObjectFromRow(dictValues, classId, strn, subObj, colnCol, fldr, created, countCreate, countUpdate, totalWarning, globalDict)
   Dim newObj, compCol
   set newObj = nothing
   set compCol = nothing
   created = false
   if not colnCol is nothing and not fldr is nothing and not classId = 0 then
      &#39; Try to find an existing object
      Dim key, vale, colnMap, keyDict, attrName, strn2
      strn2 = strn
      if subObj then
      
         Dim pos
         pos = InStrRev(strn, &quot;.&quot;)
         if pos &gt; 0 then
            strn2 = Mid(strn, pos+1)
         end if
      end if
      &#39; Search for the parent column first (if any) for main objects
      Dim newFldr
      set newFldr = fldr
      if not subObj then
         set newFldr = FindMainObjectParent(dictValues, colnCol, fldr, totalWarning)
      end if
      If not newFldr is nothing then
         Dim localNmspc
         if subObj then
            localNmspc = true
         elseif Version &gt; &quot;15.1.0.9999&quot; then &#39; NO-NLS The HasLocalNamespace method is not available in 15.1
            localNmspc = newFldr.Model.HasLocalNamespace(classId)
         else
            localNmspc = false
         end if      
         &#39; Loop on key columns and try to match existing object
         For each colnMap in colnCol
            key = colnMap.Name
            if dictValues.Exists(key) then
               if not globalUserAbort then
                  attrName = GetMappingValue(colnMap, &quot;Attribute&quot;) &#39; NO-NLS
                  if GetMappingValue(colnMap, &quot;IsKey&quot;) then &#39; NO-NLS
                     &#39; Column is a key, search existing object                     
                     if not globalUserAbort then
                        if not localNmspc then
                           &#39; Main object case, use key dictionary
                           if (classId = PdGlm.cls_Term) and (attrName = txtQAttrCode) then
                              set keyDict = nothing
                           else
                              set keyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, attrName, newFldr, true)
                           end if
                           if not keyDict is nothing then
                              vale = dictValues.Item(key)
                              if keyDict.Exists(vale) then
                                 if debugMode then
                                    Debug &quot;    Retrieving object with key=&quot; + attrName + &quot; value=&quot; + vale
                                 end if
                                 set newObj = keyDict.Item(vale)
                                 &#39;Return nothing if newObj is in another model
                                 if not newObj is nothing then
                                    if not newObj.Model = fldr.Model then
                                       set newObj = nothing
                                    end if
                                 end if
                                 countUpdate = countUpdate + 1
                              else
                                 set newObj = FindQualifiedObject(classId, strn, attrName, vale, newFldr, colnMap.ParentObject.ParentObject)
                                 if not newObj is nothing then
                                    countUpdate = countUpdate + 1
                                 end if
                              end if
                           end if
                        else
                           &#39; Sub-object case, search under parent collection
                           &#39; The folder is supposed to be the direct parent in this case
                           set compCol = GetCompositionByKind(newFldr, classId, strn2)
                           &#39; Search for the sub-object under the composition collection                           
                           if not compCol is nothing then
                              vale = dictValues.Item(key)
                              Dim tmpObj, objVale
                              For each tmpObj in compCol
                                 if tmpObj.IsKindOf(classId) then
                                    Dim skipBadStrn
                                    skipBadStrn = false
                                    if not strn2 = &quot;&quot; then
                                       if not strn2 = tmpObj.Stereotype then
                                          skipBadStrn = true
                                       end if
                                    end if
                                    if not skipBadStrn then
                                       objVale = GetObjectValue(tmpObj, attrName)
                                       if objVale = vale then
                                          countUpdate = countUpdate + 1
                                          set newObj = tmpObj
                                          Exit For
                                       end if
                                    end if
                                 end if
                              Next                           
                              set tmpObj = nothing
                           else
                              LogText &quot;Error: Bad parent &#39;&quot; + cstr(newFldr) + &quot;&#39; for sub-object import. Child collection could not be found&quot;
                              totalWarning = totalWarning + 1
                           end if
                        end if
                     else
                        set newObj = nothing
                        Exit for &#39; user abort in dialog
                     end if
                  end if
               else
                  set newObj = nothing
                  Exit for &#39; user abort in dialog
               end if
            end if
            if not newObj is nothing then
               &#39; Object has been found
               Exit for
            end if
         Next
         set colnMap = nothing
         set keyDict = nothing
   
         If newObj is nothing and not globalUserAbort then
            if not subObj then
               &#39; Create a new main object
               set newObj = CreateNewObject(classId, strn, newFldr, countCreate, totalWarning)
               if not newObj is nothing then
                  created = true
               end if
            else
               &#39; Create a sub-object
               if compCol is nothing then
                  &#39; No key column...
                  set compCol = GetCompositionByKind(newFldr, classId, strn2)
               end if
               set newObj = CreateNewSubObject(compCol, classId, strn2, created, countCreate, totalWarning)
            end if
         End If
         set newFldr = nothing 
      End If
   End If
   set FindOrCreateObjectFromRow = newObj
End Function


&#39;******************************************************************************
&#39;*                         FindOrCreateLinkFromRow
&#39;******************************************************************************
Function FindOrCreateLinkFromRow(dictValues, classId, strn, subObj, compLink, colnCol, fldr, created, countCreate, countUpdate, totalWarning, globalDict)
   Dim newObj, compCol
   set newObj = nothing
   set compCol = nothing
   created = false
   if not colnCol is nothing and not fldr is nothing and not classId = 0 then
      Dim newFldr
      if not subObj then
         set newFldr = FindMainObjectParent(dictValues, colnCol, fldr, totalWarning)
      else
         set newFldr = fldr
      end if
      if not newFldr is nothing then
         Dim coln1, coln2, hasKey
         hasKey = true
         if FindLinkExtremityColumnsMapping(colnCol, coln1, coln2, hasKey, compLink) then
            &#39; Link extremity mapping has been found, use specific link mapping
            Dim obj1, obj2, classIdExt, strnExt, attrNameExt, vale, create
            set obj1 = nothing
            set obj2 = nothing
            &#39; Retrieve obj1
            If compLink then
               set Obj1 = newFldr
            else
               classIdExt = GuessReferenceKind(coln1, nothing)
               if not classIdExt = 0 then
                  strnExt = GetMappingValue(coln1, &quot;RefStereotype&quot;) &#39; NO-NLS
                  attrNameExt = GetMappingValue(coln1, &quot;RefAttribute&quot;) &#39; NO-NLS
                  vale = &quot;&quot;
                  if dictValues.Exists(coln1.Name) then
                     vale = dictValues.Item(coln1.Name)
                  end if
                  create = GetMappingValue(coln1, &quot;CreateIfNotExist&quot;) &#39; NO-NLS
                  set obj1 = FindOrCreateObjectFromValue(coln1.ParentObject, classIdExt, strnExt, attrNameExt, vale, newObj, newFldr, subObj, create, false, true, countCreate, totalWarning, globalDict)
               end if 
            end if
            &#39; Retrieve obj2
            classIdExt = GuessReferenceKind(coln2, nothing)
            if not classIdExt = 0 then
               strnExt = GetMappingValue(coln2, &quot;RefStereotype&quot;) &#39; NO-NLS
               attrNameExt = GetMappingValue(coln2, &quot;RefAttribute&quot;) &#39; NO-NLS
               vale = &quot;&quot;
               if dictValues.Exists(coln2.Name) then
                  vale = dictValues.Item(coln2.Name)
               end if
               Dim obj2Fldr, obj2subObj
               If compLink then
                  set obj2Fldr = newFldr.Package
                  obj2subObj = false
               else
                  set obj2Fldr = newFldr
                  obj2subObj = subObj
               end if
               create = GetMappingValue(coln2, &quot;CreateIfNotExist&quot;) &#39; NO-NLS
               set obj2 = FindOrCreateObjectFromValue(coln2.ParentObject, classIdExt, strnExt, attrNameExt, vale, newObj, obj2Fldr, obj2subObj, create, false, true, countCreate, totalWarning, globalDict)
               set obj2Fldr = nothing
            end if 
            if not obj1 is nothing and not obj2 is nothing then
               if compLink then
                  &#39; Search an existing composition link
                  set compCol = GetCompositionByKind(newFldr, classId, strn)
                  if not compCol is nothing then   
                     Dim tmpObj
                     For each tmpObj in compCol
                        if tmpObj.IsKindOf(classId) then
                           Dim skipBadStrn
                           skipBadStrn = false
                           if not strn = &quot;&quot; then
                              if not strn = tmpObj.Stereotype then
                                 skipBadStrn = true
                              end if
                           end if
                           if not skipBadStrn then
                              if obj2 is tmpObj.LinkedObject then
                                 set newObj = tmpObj
                                 Exit For
                              end if
                           end if
                        end if
                     Next                           
                     set tmpObj = nothing
                  end if
               else    
                  &#39; Search for an existing link with same extremities
                  Dim lnk
                  for each lnk in obj1.OutputLinks
                     if lnk.IsKindOf(classId) then
                        if strn = &quot;&quot; or lnk.HasStereotype(strn) then
                           if lnk.HasAttribute(&quot;Object2&quot;) then &#39; NO-NLS
                              if AreSameObjects(obj2, lnk.Object2) then
                                 &#39; A link with same extremities have been found
                                 if hasKey then
                                    &#39; Loop on key columns to check if the key values match
                                    Dim colnMap, sameKeyValues
                                    sameKeyValues = true
                                    for each colnMap in colnCol
                                       if GetMappingValue(colnMap, &quot;IsKey&quot;) then &#39; NO-NLS
                                          &#39; Column is a key, compare values
                                          if dictValues.Exists(colnMap.Name) then
                                             Dim keyVale
                                             keyVale = dictValues.Item(colnMap.Name)
                                             if not keyVale = lnk.GetAttributeText(GetMappingValue(colnMap, &quot;Attribute&quot;)) then &#39; NO-NLS
                                                sameKeyValues = false
                                                exit for
                                             end if
                                          end if
                                       end if
                                    next
                                    set colnMap = nothing
                                    if sameKeyValues then
                                       if debugMode then
                                          Debug &quot;    Link found by source, destination and key values: &quot; &amp; lnk.ShortDescription
                                       end if            
                                       set newObj = lnk
                                       exit for
                                    end if
                                 else
                                    &#39; No key, take the first link with same extremity
                                    if debugMode then
                                       Debug &quot;    Link found by source and destination: &quot; &amp; lnk.ShortDescription
                                    end if            
                                    set newObj = lnk
                                    exit for
                                 end if
                              end if
                           end if
                        end if
                     end if
                  next
                  set lnk = nothing
               end if
               &#39; Create the link if it could not be found
               if newObj is nothing then
                  if not subObj then
                     &#39; Create a new main link object
                     set newObj = CreateNewObject(classId, strn, newFldr, countCreate, totalWarning)
                     if not newObj is nothing then
                        created = true
                     end if
                  elseif compLink then
                     set newObj = FindOrCreateObjectFromValue(coln2.ParentObject, classId, strn, &quot;LinkedObject&quot;, obj2, newFldr, newFldr, true, true, true, false, countCreate, totalWarning, globalDict) &#39; NO-NLS
                  else
                     &#39; Create a link sub-object
                     Dim compColLnk, strnLnk, posLnk
                     posLnk = InStrRev(strn, &quot;.&quot;)
                     if posLnk &gt; 0 then
                        strnLnk = Mid(strn, posLnk+1)
                     else
                        strnLnk = strn
                     end if
                     set compColLnk = GetCompositionByKind(newFldr, classId, strnLnk)
                     if not compColLnk is nothing then
                        set newObj = CreateNewSubObject(compColLnk, classId, strnLnk, created, countCreate, totalWarning)
                        set compColLnk = nothing
                     end if
                   end if               
               end if
            end if
            set obj1 = nothing
            set obj2 = nothing
            set coln1 = nothing
            set coln2 = nothing
         else
            &#39; Link extremity mapping by extremity not found, use standard match by name or code
            if debugMode then
               Debug &quot;    Creating link object using standard name/code matching for &quot; + GetClassname(classId, strn)
            end if     
            set newObj = FindOrCreateObjectFromRow(dictValues, classId, strn, subObj, colnCol, newFldr, created, countCreate, countUpdate, totalWarning, globalDict)
         end if
      end if
   end if
   set FindOrCreateLinkFromRow = newObj
End Function


&#39;******************************************************************************
&#39;*                         FindOrCreateSubObjectFromRow
&#39;******************************************************************************
Function FindOrCreateSubObjectFromRow(dictValues, classId, strn, lnkClss, colnCol, fldr, created, countCreate, countUpdate, totalWarning, globalDict)
   Dim newObj
   set newObj = nothing
   &#39; Retrieve parent column mapping
   Dim prntColnMap, colnMap
   set prntColnMap = nothing
   for each colnMap in colnCol
      if GetMappingValue(colnMap, &quot;Attribute&quot;) = const_parentAttrValue then &#39; NO-NLS
         if not GetMappingValue(colnMap, &quot;Skip&quot;) then &#39; NO-NLS
            set prntColnMap = colnMap
            exit for
         end if
      end if
   next
   set colnMap = nothing  
   if not prntColnMap is nothing then
      &#39; Retrieve parent value and object
      if dictValues.Exists(prntColnMap.Name) then      
         Dim prntVale, prnt, create, importedType, attrName
         prntVale = dictValues.Item(prntColnMap.Name)
         create = GetMappingValue(prntColnMap.ParentObject.ParentObject, &quot;CreateIfNotExist&quot;) &#39; NO-NLS
         importedType = GetMappingValue(prntColnMap.ParentObject, &quot;ImportedClassName&quot;) &#39; NO-NLS
         attrName = GetMappingValue(prntColnMap.ParentObject.ParentObject, &quot;RefAttribute&quot;) &#39; NO-NLS
         set prnt = FindOrCreateParentFromValue(prntColnMap.ParentObject, importedType, prntVale, attrName, create, fldr, countCreate, totalWarning, globalDict)
         if not prnt is nothing then
            &#39; Find or create the sub-object under the parent
            if lnkClss = 1 then
               &#39; Link sub-object: for instance PDM Reference join
               set newObj = FindOrCreateLinkFromRow(dictValues, classId, strn, true, false, colnCol, prnt, created, countCreate, countUpdate, totalWarning, globalDict)
            elseif lnkClss = 2 then
               &#39; Composition Link: for instance EAM Role Association
               set newObj = FindOrCreateLinkFromRow(dictValues, classId, strn, true, true, colnCol, prnt, created, countCreate, countUpdate, totalWarning, globalDict)
            else
               &#39; Normal sub-object
               set newObj = FindOrCreateObjectFromRow(dictValues, classId, strn, true, colnCol, prnt, created, countCreate, countUpdate, totalWarning, globalDict)
            end if
            if newObj is nothing then
               LogText &quot;Error: Could not find or create sub-object &quot; + GetClassname(classId, strn) &amp; &quot; under &quot; &amp; cstr(prnt)            
            end if
            set prnt = nothing
         else
            &#39; Trying to retrieve a sub-object but parent not found
            LogText &quot;Error: Could not find parent object &#39;&quot; + prntVale + &quot;&#39;. Import of one sub-object will be skipped.&quot;
            totalWarning = totalWarning + 1
         end if
      end if
      set prntColnMap = nothing
   end if
   set FindOrCreateSubObjectFromRow = newObj
   set newObj = nothing
End Function


&#39;******************************************************************************
&#39;*                         FindOrCreateParentFromValue
&#39;******************************************************************************
Function FindOrCreateParentFromValue(tablMap, childImportedType, prntVale, attrName, create, fldr, countCreate, totalWarning, globalDict)
   Dim newObj
   set newObj = nothing
   if debugMode then
      Debug &quot;    Retrieving parent of &quot; + childImportedType + &quot; value=&quot; + prntVale
   end if
   &#39; Retrieve parent type
   Dim pos
   pos = InStrRev(childImportedType, &quot;.&quot;)
   if pos &gt; 0 then
      Dim parentImportedType
      parentImportedType = Mid(childImportedType, 1, pos-1)
      if not parentImportedType = &quot;&quot; then
         &#39; Retrieve parent metaclass
         Dim prntClss
         set prntClss = RetrieveMetaclassFromImportedType(tablMap, parentImportedType)
         if not prntClss is nothing then
            &#39; Retrieve grand parent if required
            Dim gdPrnt, prntSimpleVale, subObj, prntStrn
            set gdPrnt = fldr
            prntSimpleVale = prntVale
            subObj = false
            prntStrn = &quot;&quot;
            if InStrRev(parentImportedType, &quot;.&quot;) &gt; 0 then
               &#39; Search for grand-parent (recursive call)
               Dim gdPrntVale, sepr
               sepr = GetMappingValue(tablMap.ParentObject, &quot;QualifiedSeparator&quot;) &#39; NO-NLS
               pos = InStrRev(prntVale, sepr)
               gdPrntVale = Mid(prntVale, 1, pos - 1)
               prntSimpleVale = Mid(prntVale, pos + Len(sepr))
               set gdPrnt = FindOrCreateParentFromValue(tablMap, parentImportedType, gdPrntVale, attrName, create, fldr, countCreate, totalWarning, globalDict)
               subObj = true
            end if
            &#39; search or create parent under grand-parent
            if not gdPrnt is nothing then
               prntStrn = parentImportedType
               pos = InStrRev(parentImportedType, &quot;.&quot;)
               if pos &gt; 0 then
                  prntStrn = Mid(prntStrn, pos+1)
               end if
               if prntClss.PublicName = prntStrn then
                  prntStrn = &quot;&quot;
               end if            
               set newObj = FindOrCreateObjectFromValue(tablMap, prntClss.Kind, prntStrn, attrName, prntSimpleVale, gdPrnt, fldr, subObj, create, true, false, countCreate, totalWarning, globalDict)
               set gdPrnt = nothing
            end if
            set prntClss = nothing
         end if
      end if
   end if
   set FindOrCreateParentFromValue = newObj
   set newObj = nothing
End Function


&#39;******************************************************************************
&#39;*                         FindOrCreateObjectFromCell
&#39;******************************************************************************
Function FindOrCreateObjectFromCell(colnMap, vale, newObj, countCreate, totalWarning, globalDict)
   &#39; For reference specific case, we need to convert the attribute text value into object   
   Dim classId, valeObj
   set valeObj = nothing
   classId = GuessReferenceKind(colnMap, newObj)
   if vale = &quot;&quot; then
      &#39; Simple empty case, object is nothing
   elseif not classId = 0 then
      Dim strn, attrName, keyDict, mappingKind
      strn = GetMappingValue(colnMap, &quot;RefStereotype&quot;) &#39; NO-NLS
      attrName = GetMappingValue(colnMap, &quot;RefAttribute&quot;) &#39; NO-NLS
      &#39; Check if relationship is a composition and change folder in this case
      Dim fldr, res, create, comp, subObj
      set fldr = colnMap.Folder
      create = GetMappingValue(colnMap, &quot;CreateIfNotExist&quot;) &#39; NO-NLS
      comp = false
      subObj = false
      mappingKind = GetMappingValue(colnMap, &quot;ColumnKind&quot;) &#39; NO-NLS
      If mappingKind = const_colnType_Reference or mappingKind = const_colnType_Relationship then
         if GetMappingValue(colnMap, &quot;IsSubObjectRelationship&quot;) then &#39; NO-NLS
            set fldr = newObj
            comp = true
            subObj = true
         else
            Dim cnttType
            cnttType = GetMappingValue(colnMap, &quot;RefKind&quot;) &#39; NO-NLS
            if IsSubObjectMetaclass(cnttType) then
               subObj = true
            end if
            Debug &quot;SubObject &quot; &amp; cstr(subObj) &amp; GetClassname(cnttType, &quot;&quot;)
      end if
      end if
      &#39; Check if we reference a sub-object
      if not comp then
         subObj = IsSubObjectMetaclass(classId)
      end if
      &#39; Search or create object from string
      set valeObj = FindOrCreateObjectFromValue(colnMap.ParentObject, classId, strn, attrName, vale, newObj, fldr, subObj, create, comp, false, countCreate, totalWarning, globalDict)
      &#39; Create shortcut if required
      if not valeObj is nothing then
         if not valeObj.Folder is newObj.Folder then
            set valeObj = valeObj.CreateShortcut(newObj.Folder)
         end if
      end if
      set fldr = nothing
   else
      &#39; Trying to retrieve an object without knowing its class
      LogText &quot;Error: Could not associate &#39;&quot; + vale + &quot;&#39; to &quot; + newObj.ShortDescription + &quot; for &quot; + colnMap.Name + &quot; because the reference object type is not defined&quot;
      totalWarning = totalWarning + 1
   end if
   set FindOrCreateObjectFromCell = valeObj
   set valeObj = nothing
End Function


&#39;******************************************************************************
&#39;*                         FindOrCreateObjectFromValue
&#39;******************************************************************************
Function FindOrCreateObjectFromValue(tablMap, classId, strn, attrName, vale, newObj, fldr, subObj, create, comp, createShct, countCreate, totalWarning, globalDict)
   &#39; For reference specific case, we need to convert the attribute text value into object
   Dim valeObj, compCol, qVale
   set valeObj = nothing
   set compCol = nothing
   vale = TrimWhitespace(vale)
   qVale = vale
   if vale = &quot;&quot; then
      &#39; Simple empty case, object is nothing
   elseif not classId = 0 then
      Dim keyDict, res
      &#39; Search for qualified folder
      Dim newFolder, qualifierFound, qualifierFolderFound
      set newFolder = FindQualifiedFolder(fldr, attrName, vale, tablMap.ParentObject, true, qualifierFound)
      if newFolder is nothing then
         set newFolder = fldr
         qualifierFolderFound = false
      else
         qualifierFolderFound = true
      end if
      &#39; Search for an existing object or create it if required
      res = false
      Dim localNmspc
      if subObj then
         localNmspc = true
      elseif Version &gt; &quot;15.1.0.9999&quot; then &#39; NO-NLS the HasLocalNamespace method is not available in 15.1
         &#39; Diagram case: not a local namespace
         dim metaClss
         set metaClss = Metamodel.GetMetaClassByKind(classId)
         if metaClss.InheritsFrom(PdCommon.Cls_PackageDiagram) then
            localNmspc = false
         else
            localNmspc = fldr.Model.HasLocalNamespace(classId)
         end if
      else
         localNmspc = false
      end if            
      if not localNmspc then
         &#39; Main object case, use a dictionary
         set keyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, attrName, newFolder, true)
         if not keyDict is nothing then
            &#39; Main object case
            if keyDict.Exists(vale) then
               if debugMode then
                  Debug &quot;    Retrieving reference object with key=&quot; + attrName + &quot; value=&quot; + vale
               end if
               set valeObj = keyDict.Item(vale)
               res = true
               &#39; For composition relationship check if we can reuse current object
               if not valeObj is nothing and comp and createShct then
                  if not valeObj.Folder is fldr then
                     Dim shct
                     set shct = valeObj.CreateShortcut(newObj)                     
                     if shct is valeObj then
                        &#39; Avoid two parents for an object
                        Debug &quot;     Cannot reuse (distinct parents)&quot;
                        res = false
                     elseif not shct is nothing then
                        if not shct.Parent is newObj then
                           Debug &quot;     Cannot reuse (distinct packages)&quot;
                           if not scht.Used then
                              shct.Delete
                           end if
                           res = false
                        else
                           if debugMode then
                              Debug &quot;     Reused as shortcut&quot;
                           end if
                           set valeObj = shct
                        end if
                     else
                        &#39; Could not create shortcut                   
                        res = false
                     end if
                     set shct = nothing
                  end if
               end if
            elseif not comp then
               &#39; Try using qualified name/code
               if debugMode then
                  Debug &quot;    Retrieving reference object with reference=&quot; + attrName + &quot; qualified value=&quot; + vale
               end if           
               set valeObj = FindQualifiedObject(classId, strn, attrName, vale, fldr, tablMap.ParentObject)                   
               if valeObj is nothing then
                  &#39; Not found: search in the other open models
                  dim model
                  For each model in Models
                     if valeObj is nothing and not model.Name = fldr.Name then 
                        set valeObj = FindQualifiedObject(classId, strn, attrName, vale, model, tablMap.ParentObject)
                     end if
                  next
                  
                  if not valeObj is nothing then
                     res = true
                  end if
               end if
            end if
         end if
      else
         &#39; Local namespace, search under object first
         set compCol = GetCompositionByKind(newObj, classId, strn)
         Dim tmpObj, objVale, skipBadStrn
         if not compCol is nothing then   
            &#39; The object is the direct parent
            if debugMode then
               Debug &quot;    Retrieving local reference object with reference=&quot; + attrName + &quot; value=&quot; + vale + &quot; under &quot; + cstr(newObj)
            end if                           
            For each tmpObj in compCol
               if tmpObj.IsKindOf(classId) then
                  skipBadStrn = false
                  if not strn = &quot;&quot; then
                     if not strn = tmpObj.Stereotype then
                        skipBadStrn = true
                     end if
                  end if
                  if not skipBadStrn then
                     objVale = GetObjectValue(tmpObj, attrName)
                     if objVale = vale then
                        res = true
                        set valeObj = tmpObj
                        Exit For
                     end if
                  end if
               end if
            Next
         End if
         &#39; Try with composition on folder if not a sub-object  
         if not subObj and valeObj is nothing then
            set compCol = GetCompositionByKind(newFolder, classId, strn)
            if not compCol is nothing then   
               For each tmpObj in compCol
                  if tmpObj.IsKindOf(classId) then
                     skipBadStrn = false
                     if not strn = &quot;&quot; then
                        if not strn = tmpObj.Stereotype then
                           skipBadStrn = true
                        end if
                     end if
                     if not skipBadStrn then
                        objVale = GetObjectValue(tmpObj, attrName)
                        if objVale = vale then
                           res = true
                           set valeObj = tmpObj
                           Exit For
                        end if
                     end if
                  end if
               Next
            end if                     
         end if                        
         set tmpObj = nothing
         if valeObj is nothing then
            &#39; Search by path
            if debugMode then
               Debug &quot;    Retrieving local reference object with reference=&quot; + attrName + &quot; qualified value=&quot; + vale + &quot; under &quot; + cstr(fldr)
            end if                                       
            set valeObj = FindQualifiedObject(classId, strn, attrName, vale, fldr, tablMap.ParentObject)   
            if valeObj is nothing and not qVale = vale then
               if debugMode then
                  Debug &quot;    Retrieving local reference object with reference=&quot; + attrName + &quot; qualified value=&quot; + qVale + &quot; under &quot; + cstr(fldr)
               end if                                       
               set valeObj = FindQualifiedObject(classId, strn, attrName, qVale, fldr, tablMap.ParentObject)   
            end if
            if not valeObj is nothing then
               res = true
            end if
         end if
      end if
      &#39; If object could not be found check if we need to create if not exist
      if not res and create and not IsAbstractMetaclass(classId) then
         if qualifierFolderFound or not qualifierFound then
            if not subObj then
               &#39; Create a main object
               if debugMode then
                  Debug &quot;    Creating reference object with key=&quot; + attrName + &quot; value=&quot; + vale
               end if
               set valeObj = CreateNewObject(classId, strn, newFolder, countCreate, totalWarning)
               set newFolder = nothing
            elseif not compCol is nothing then
               &#39; Create a sub-object
               On Error Resume next
               set valeObj = compCol.CreateNew()
               HandleErrorCase totalWarning, &quot;Error: Could not create sub-object&quot;
               if not valeObj is nothing then
                  countCreate = countCreate + 1
                  if not strn = &quot;&quot; then
                     On Error Resume next
                     valeObj.Stereotype = strn
                     HandleErrorCase totalWarning, &quot;Error: Could not set stereotype value &quot; + strn + &quot; to &quot; + valeObj.ShortDescription
                  end if
               end if
            end if
         else
            &#39; Folder not found, cannot create the object
            LogText &quot;Error: Could not find object location with &quot; &amp; attrName &amp; &quot; = &quot; &amp; vale &amp; &quot; under &quot; &amp; cstr(newFolder)
            totalWarning = totalWarning + 1
         end if         
         if not valeObj is nothing then
            if IsNamedObject(valeObj) and (LCase(attrName) = &quot;name&quot; or LCase(attrName) = &quot;code&quot;) then &#39; NO-NLS
               &#39; Assign name and code
               valeObj.SetNameAndCode vale, vale, ValidationMode
               &#39; Check if naming convention has adjusted the value
               if not vale = valeObj.GetAttributeText(attrName) then
                  LogText &quot;Error: the naming convention has adjusted a value for &quot; &amp; valeObj.Shortdescription &amp; &quot;: &quot; &amp; attrName &amp; &quot; changed from &quot; &amp; vale &amp; &quot; to &quot; &amp; valeObj.GetAttributeText(attrName)
                  totalWarning = totalWarning + 1
               end if
               if not localNmspc then
                  &#39; Add new object name and code in dictionaries in order to be able to retrieve them later
                  dim newKeyDict
                  set newKeyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, &quot;Name&quot;, valeObj.Folder, false) &#39; NO-NLS
                  if not newKeyDict is nothing then
                     if not newKeyDict.Exists(vale) then
                        newKeyDict.Add vale, valeObj
                     end if
                  end if                  
                  set newKeyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, &quot;Code&quot;, valeObj.Folder, false) &#39; NO-NLS
                  if not newKeyDict is nothing then
                     if not newKeyDict.Exists(vale) then
                        newKeyDict.Add vale, valeObj
                     end if
                  end if                                    
                  set newKeyDict = nothing
               end if
            else
               On Error Resume Next
               valeObj.SetAttribute attrName, vale 
               if ErrorOccurs() then
                  HandleErrorCase totalWarning, &quot;Error: Could not set attribute &quot; + attrName + &quot; for &quot; + valeObj.ShortDescription + &quot; with value &#39;&quot; + CStr(vale) + &quot;&#39;&quot;
               else
                  HandleErrorCase -1, &quot;&quot; &#39; Silent
                  keyDict.Add vale, valeObj
               end if
            end if
            res = true
            if not subObj then
               &#39; Create default symbol when possible
               CreateDefaultSymbol valeObj, ActiveDiagram, tablMap              
            end if
         end if
      elseif valeObj is nothing then
         LogText &quot;Error: Could not find object with &quot; &amp; attrName &amp; &quot; = &quot; &amp; vale
         totalWarning = totalWarning + 1
      end if
      set keyDict = nothing
   end if
   
   set FindOrCreateObjectFromValue = valeObj
   set valeObj = nothing   
End Function 


&#39;******************************************************************************
&#39;*                         FindQualifiedObject
&#39;******************************************************************************
Function FindQualifiedObject(classId, strn, attrName, vale, fldr, import)          
   Dim sepr, found
   set found = nothing
   sepr = GetMappingValue(import, &quot;QualifiedSeparator&quot;) &#39; NO-NLS
   if not sepr = &quot;&quot; and InStr(vale, sepr) &gt; 0 then
      Dim useCode, refAttr
      useCode = true
      if attrName = txtQAttrName or attrName = txtQAttrQName then
         useCode = false
      end if
      &#39; Search using relative path
      set found = fldr.FindChildByPath(vale, classId, strn, nothing, false, false, useCode, sepr)
      if found is nothing and not fldr.Model is fldr then
         &#39; Search using absolute path
         set found = fldr.Model.FindChildByPath(vale, classId, strn, nothing, false, false, useCode, sepr)
      end if
   end if
   set FindQualifiedObject = found
   set found = nothing
End Function


&#39;******************************************************************************
&#39;*                         FindQualifiedFolder
&#39;******************************************************************************
Function FindQualifiedFolder(fldr, attrName, vale, import, includeChildName, qualifierFound)          
   Dim sepr, found, pos
   set found = nothing
   qualifierFound = false
   sepr = GetMappingValue(import, &quot;QualifiedSeparator&quot;) &#39; NO-NLS
   if not sepr = &quot;&quot; then
      pos = InStrRev(vale, sepr)
      if pos &gt; 0 then
         qualifierFound = true
      end if      
   else
      pos = -1
   end if
   if not includeChildName or qualifierFound then
      Dim fldrPath
      if includeChildName then
         fldrPath = Mid(vale, 1, pos-1)
      else
         fldrPath = vale
      end if
      Dim useCode
      useCode = true
      if attrName = &quot;&quot; then
         attrName = GetMappingValue(import, &quot;RefAttribute&quot;) &#39; NO-NLS
      end if
      if attrName = txtQAttrName or attrName = txtQAttrQName then
         useCode = false
      end if
      &#39; Search using relative path
      set found = fldr.FindChildByPath(fldrPath, Cls_BaseFolder, &quot;&quot;, nothing, false, false, useCode, sepr)
      if found is nothing and not fldr.Model is fldr then
         &#39; Search using absolute path
         set found = fldr.Model.FindChildByPath(fldrPath, Cls_BaseFolder, &quot;&quot;, nothing, false, false, useCode, sepr)
      end if
      if not found is nothing and includeChildName then
         vale = Mid(vale, pos+Len(sepr))
      end if
   end if
   set FindQualifiedFolder = found
   set found = nothing
End Function


&#39;******************************************************************************
&#39;*                         CreateNewObject
&#39;******************************************************************************
Function CreateNewObject(classId, strn, fldr, countCreate, totalWarning)
   &#39; Create the object
   Dim  newObj
   if debugMode then
      Debug &quot;    Creating new object &quot; &amp; GetClassname(classId, strn) &amp; &quot; under &quot; &amp; cstr(fldr)
   end if
   On Error Resume next
   set newObj = nothing
   if IsGlobalMetaclass(classId) then
      &#39; Create global object on the model
      set newObj = fldr.Model.CreateObject(classId)
   elseif (classId = Cls_ExtendedSubObject) and not fldr.IsKindOf(Cls_ExtendedComposition) then
      &#39; Create extended sub-object
      Dim compCol
      set compCol = GetCompositionByKind(fldr, classId, strn)
      if not compCol is nothing then
         set newObj = compCol.CreateNew()
         set compCol = nothing
      end if
   else
      &#39; Create object under folder or parent
      &#39; Only if source and destination libraries are the same.
      dim metaClss
      set metaClss = Metamodel.GetMetaClassByKind(classId)
      if not metaClss is nothing then
        if (metaClss.Library.PublicName = &quot;PdCommon&quot;) or (metaClss.Library.PublicName = fldr.Model.MetaClass.Library.PublicName) then
            set newObj = fldr.CreateObject(classId)
         end if
      end if
   end if
   if ErrorOccurs() or newObj is nothing then
      Dim className, errMsg
      className = GetClassname(classId, &quot;&quot;)
      errMsg = &quot;Error: Could not create object &quot; + className + &quot; under &quot; + fldr.ShortDescription
      if ErrorOccurs() then
         HandleErrorCase totalWarning, errMsg
      else
         LogText errMsg
         totalWarning = totalWarning + 1
      end if
   end if
   
   &#39; Set its stereotype value   
   if not newObj is nothing then
      if not strn = &quot;&quot; then
         On Error Resume next
         newObj.Stereotype = strn
         HandleErrorCase totalWarning, &quot;Error: Could not set stereotype value &quot; + strn + &quot; to &quot; + newObj.ShortDescription
      end if
      countCreate = countCreate + 1
   end if
   set CreateNewObject = newObj
   set newObj = nothing
End Function


&#39;******************************************************************************
&#39;*                         CreateNewSubObject
&#39;******************************************************************************
Function CreateNewSubObject(compCol, classId, strn2, created, countCreate, totalWarning)
   Dim newObj
   set newObj = nothing
   if not compCol is nothing then
      if debugMode then
         Debug &quot;    Creating new sub-object &quot; &amp; GetClassname(classId, strn2)
      end if
      On Error Resume next
      set newObj = compCol.CreateNew()
      HandleErrorCase totalWarning, &quot;Error: Could not create sub-object&quot;
      if not newObj is nothing then
         created = true
         countCreate = countCreate + 1
         if not strn2 = &quot;&quot; then
            On Error Resume next
            newObj.Stereotype = strn2
            HandleErrorCase totalWarning, &quot;Error: Could not set stereotype value &quot; + strn2 + &quot; to &quot; + newObj.ShortDescription
         end if
      else
         LogText  &quot;Error: Could not create sub-object &quot; + GetClassname(classId, strn2) + &quot; under &quot; + cstr(compCol.Source)
      end if
   end if
   set CreateNewSubObject = newObj
   set newObj = nothing
End Function

&#39;******************************************************************************
&#39;*                         CreateDefaultSymbol
&#39;******************************************************************************
Sub CreateDefaultSymbol(obj, diag, tablMap)
   if not obj is nothing and not diag is nothing and not tablMap is nothing then
      On Error Resume next
      if diag.CanAttachObject(obj) then
         if GetMappingValue(tablMap.ParentObject, &quot;CreateSymbols&quot;) then &#39; NO-NLS
            if IsLinkObject(obj) then
               &#39; Link symbol case
               Dim obj1, obj2
               set obj1 = obj.Object1
               set obj2 = obj.Object2
               if not obj1 is nothing and not obj2 is nothing then
                  set obj1 = diag.FindSymbol(obj1, true)
                  set obj2 = diag.FindSymbol(obj2, true)
                  if not obj1 is nothing and not obj2 is nothing then
                     diag.AttachLinkObject obj, obj1, obj2
                  end if
               end if
               set obj1 = nothing
               set obj2 = nothing
            else
               &#39; Node symbol case
               diag.AttachObject obj
            end if
         end if
         set imprt = nothing
      end if
      HandleErrorCase -1, &quot;&quot; &#39; Silent
   end if
End Sub


&#39;******************************************************************************
&#39;*                         RetrieveClassKeyDictionary
&#39;******************************************************************************
Function RetrieveClassKeyDictionary(globalDict, classId, strn, attrName, fldr, create)
   set RetrieveClassKeyDictionary = nothing
   if not globalDict is nothing and not classId = 0 and not fldr is nothing then
      &#39; Retrieve namespace root
      Dim newFldr, prnt
      set prnt = fldr
      set newFldr = fldr
      while not prnt is nothing
         if prnt.HasAttribute(&quot;UseParentNamespace&quot;) then
            if prnt.UseParentNamespace then
               set newFldr = prnt
               set prnt = prnt.Parent
            else
               set prnt = nothing
            end if
         else
            set prnt = prnt.Parent
         end if
      wend
      set prnt = nothing
      &#39; Create or retrieve the dictionary associated to the class
      dim clssDict, clssKey
      clssKey = cstr(newFldr.ObjectID) + &quot;.&quot; + Cstr(classId)
      if not strn = &quot;&quot; then
         clssKey = clssKey + &quot;.&quot; + strn
      end if
      if globalDict.Exists(clssKey) then
         set clssDict = globalDict.Item(clssKey)
      else
         set clssDict = nothing
      end if
      if clssDict is nothing and create then
         set clssDict = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
         globalDict.Add clssKey, clssDict
      end if
      if not clssDict is nothing then     
         &#39; Create or retrieve the dictionary associated to the class/key
         Dim keyDict
         if clssDict.Exists(attrName) then
            set keyDict = clssDict.Item(attrName)
         else
            set keyDict = nothing
         end if
         if keyDict is nothing and create then
            set keyDict = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
            clssDict.Add attrName, keyDict
            &#39; Fill the new dictionary with all existing values in the model
            FillClassKeyDictionary keyDict, classId, strn, attrName, newFldr
            Debug &quot;     &quot; + CStr(keyDict.Count) + &quot; object(s) found&quot;
         elseif not keyDict is nothing then
            &#39;Debug &quot;   Class key dictionary &quot; + attrName + &quot; already exist with &quot; + CStr(keyDict.Count) + &quot; objects&quot;
         end if
         set RetrieveClassKeyDictionary = keyDict
         set keyDict = nothing
      end if
      set clssDict = nothing
   end if
End Function

&#39;******************************************************************************
&#39;*                         FillClassKeyDictionary
&#39;******************************************************************************
Sub FillClassKeyDictionary(keyDict, classId, strn, attrName, fldr)
   if not classId = 0 and not fldr is nothing then
      Dim global, objcol
      set objCol = nothing
      global = IsGlobalMetaclass(classId)

      &#39; Create a dictionary of models
      Dim modelDict
      Set modelDict = CreateObject(&quot;Scripting.Dictionary&quot;)
      if not modelDict is nothing then
         &#39; Retrieve the collection by kind
         set objcol = RetrieveObjectCollectionByKind(fldr, classId, strn, global, modelDict)
         &#39; Fill the ClassKey dictionary from the local model 
         FillClassKeyDictionaryForCollection fldr, keyDict, classId, strn, attrName, objcol, global, modelDict

         &#39; Loop on opened external sessions
         if globalSearchExternalModels then
            dim targetModel, targetModelObject
            For each targetModel in fldr.Model.TargetModels
               if targetModel.IsKindOf(PdCommon.Cls_BaseModel) then
                  set targetModelObject = targetModel.TargetModelObject
                  set objcol = RetrieveObjectCollectionByKind(targetModelObject, classId, strn, global, modelDict)
                  FillClassKeyDictionaryForCollection targetModelObject, keyDict, classId, strn, attrName, objcol, global, modelDict
               end if
            Next
     
            &#39; Loop also on other opened external models  
            dim model  
            For each model in Models
               &#39; Retrieve the collection by kind
               set objcol = RetrieveObjectCollectionByKind(model, classId, strn, global, modelDict)
               FillClassKeyDictionaryForCollection model, keyDict, classId, strn, attrName, objcol, global, modelDict
            Next
         End If
         set modelDict = nothing
      End If
   End If
End Sub

&#39;******************************************************************************
&#39;*                         Retrieve collection by kind
&#39;******************************************************************************
Function RetrieveObjectCollectionByKind(fldr, classId, strn, global, modelDict)
   dim objCol
   set objCol = nothing
   
   &#39; Retrieve the collection by kind
   On Error Resume next
   if not fldr = nothing then
      if not modelDict.Exists(fldr.Name) then
         modelDict.Add fldr.Name, fldr
         if global then
            set objcol = GetCompositionByKind(fldr.Model, classId, strn)
         else
            set objcol = GetCompositionByKind(fldr, classId, strn)
         end if
      end if
   end if
   HandleErrorCase -1, &quot;&quot; &#39; Silent 
   
   set RetrieveObjectCollectionByKind = objCol
End Function


&#39;******************************************************************************
&#39;*                         FillClassKeyDictionaryForCollection
&#39;******************************************************************************
Sub FillClassKeyDictionaryForCollection(fldr, keyDict, classId, strn, attrName, objcol, global, modelDict)
   if not classId = 0 and not fldr is nothing then
      If not objCol is nothing then
         If objCol.Count &gt; 0 or (not global and fldr.CompositeObjects.Count &gt; 0) then
            if debugMode then
               Debug &quot;    Filling class key dictionary for class &quot; + GetClassname(classId, strn) + &quot; attribute &quot; + attrName + &quot; &quot; + fldr.ShortDescription
            end if
            Dim tmpObj, objVale
            For each tmpObj in objCol
               if tmpObj.IsKindOf(classId) then
                  Dim skipBadStrn
                  skipBadStrn = false
                  if not strn = &quot;&quot; then
                     if not strn = tmpObj.Stereotype then
                        skipBadStrn = true
                     end if
                  end if
                  if not skipBadStrn then
                     objVale = GetObjectValue(tmpObj, attrName)
                     if not keyDict.Exists(objVale) then
                        keyDict.Add objVale, tmpObj
                     else
                        Debug &quot;    Warning: An other object also exist with &quot; + attrName + &quot;=&quot; + objVale
                        dim parentModel, targetModel
                        set parentModel = tmpObj.Model
                        &#39; If the object already exists in the active model: do not add it
                        dim existingObj, existingModel
                        set existingObj = keyDict(objVale)
                        set existingModel = existingObj.Model
                        if (not existingModel.Code = Activemodel.Code) Then
                           For each targetModel in Activemodel.TargetModels
                              if targetModel.Code = parentModel.Code then
                                 keyDict.Remove objVale
                                 keyDict.Add objVale, tmpObj
                              end if
                           Next
                        end if
                     end if
                  end if
               end if
            Next
            set tmpObj = nothing
            Set objCol = nothing
            &#39; Recursive loop on sub-folders in same namespace
            if not global then
               Dim subFldr
               For each subFldr in fldr.CompositeObjects
                  if not subFldr.IsShortcut() then
                     if subFldr.UseParentNamespace then
                        set objcol = RetrieveObjectCollectionByKind(subFldr, classId, strn, global, modelDict)
                        FillClassKeyDictionaryForCollection subFldr, keyDict, classId, strn, attrName, objcol, false, modelDict
                     end if
                  end if
               Next
               set subFldr = nothing
            end if
         End If
      End If
   End If
End Sub


&#39;******************************************************************************
&#39;*                         GetOrDefineColumnMapping
&#39;******************************************************************************
Function GetOrDefineColumnMapping(colnMap, showDialog)
   Dim skip, attrname
   attrname = &quot;&quot;
   skip = GetMappingValue(colnMap, &quot;Skip&quot;) &#39; NO-NLS
   if not skip or showDialog then
      &#39; Retrieve or guess a default column mapping
      attrname = GuessDefaultColumnMapping(colnMap, false)
      If showDialog or attrname = &quot;&quot; then
         &#39; attribute not defined, propose to define it now
         attrname = GuessDefaultColumnMapping(colnMap, true)
         Dim dlg
         set dlg = colnMap.CreateCustomDialog(&quot;%CurrentTargetCode%.ImportColumn&quot;)
         If not dlg is nothing then
            dlg.EnforceCancelButton = true
            dlg.CloseButtonLabel = txtNextBtn
            globalUserAbort = not dlg.ShowDialog()
            ResetMappingDictionary
            if not globalUserAbort then
               set dlg = nothing
               skip = GetMappingValue(colnMap, &quot;Skip&quot;) &#39; NO-NLS
               If skip then
                  attrname = &quot;&quot;
               Else
                  attrname = GetMappingValue(colnMap, &quot;AttributeOrCollection&quot;) &#39; NO-NLS
               End If
            Else
               attrname = &quot;&quot; &#39; user abort in dialog
            End If
         End If
      End If
   End If
   GetOrDefineColumnMapping = attrname
End Function


&#39;******************************************************************************
&#39;*                         GuessDefaultColumnMapping
&#39;******************************************************************************
Function GuessDefaultColumnMapping(colnMap, enforceGuess)
   Dim attrName, collName
   collName = &quot;&quot;
   attrName = GetMappingValue(colnMap, &quot;AttributeOrCollection&quot;) &#39; NO-NLS
   If attrName = &quot;&quot; then
      Dim shouldGuess
      if enforceGuess then
         shouldGuess = true
      else
         shouldGuess = GetMappingValue(colnMap.ParentObject.ParentObject, &quot;DefaultColumnMapping&quot;) &#39; NO-NLS
      end if
      if shouldGuess then
         Dim metaclss
         Dim attr, newName, newCode
         newName =  TrimWhitespace(UCase(colnMap.Name))
         newCode = replace(newName, &quot; &quot;, &quot;&quot;)
         set metaclss = Metamodel.GetMetaclassByKind(CLng(GetMappingValue(colnMap.ParentObject, &quot;ImportedKind&quot;))) &#39; NO-NLS
         if not metaclss is nothing then            
            &#39; Search on standard attributes available on the metaclass
            For each attr in metaclss.Attributes
               if (UCase(attr.publicName) = newCode) or (UCase(attr.LocalizedName) = newName) then
                  if not attr.ReadOnly then
                     attrName = attr.publicName
                     Debug &quot;Column mapping automatically defined with standard attribute &quot; + attrName
                     Exit For
                  elseif attr.Type = SRepIOBJECT then
                     if attr.PublicName = &quot;Parent&quot; then &#39; NO-NLS
                        attrName =  const_parentAttrValue
                        Debug &quot;Column mapping automatically defined with parent attribute&quot;
                     elseif not attr.AliasBase is nothing then
                        if attr.AliasBase.PublicName = &quot;Parent&quot; then &#39; NO-NLS
                           attrName =  const_parentAttrValue
                           Debug &quot;Column mapping automatically defined with parent attribute&quot;
                        end if
                     end if                    
                  end if
               end if
            Next
            &#39; Search on extended attributes available on the stereotype
            dim exaCol
            if attrName = &quot;&quot; then
               Dim strn, posStrn
               strn = GetMappingValue(colnMap.ParentObject, &quot;ImportedStereotype&quot;) &#39; NO-NLS
               posStrn = InStrRev(strn, &quot;.&quot;)
               if posStrn &gt; 0 then
                  strn = Mid(strn, posStrn+1)
               end if
               if not strn = &quot;&quot; then
                  set exaCol = colnMap.Model.GetMetaExtensionsForStereotype(metaclss.Kind, strn, PdCommon.Cls_ExtendedAttributeTargetItem)
                  if not exaCol is nothing then
                     for each attr in exaCol
                        if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
                           If UCase(attr.Name) = UCase(colnMap.Name) or UCase(attr.Label) = UCase(colnMap.Name) then
                              attrName =  attr.Target.Code + &quot;.&quot; + attr.Name 
                              Debug &quot;Column mapping automatically defined with standard attribute &quot; + attrName
                           end if
                        end if                      
                        if not attrName = &quot;&quot; then
                           exit for
                        end if
                     next      
                     set exaCol = nothing
                  end if
               end if                  
            end if
            &#39; Search on extended attributes available on the metaclass
            if attrName = &quot;&quot; then
               set exaCol = colnMap.Model.GetMetaExtensionsForClass(metaclss.Kind, PdCommon.Cls_ExtendedAttributeTargetItem)
               if not exaCol is nothing then
                  for each attr in exaCol
                     if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
                        If (UCase(attr.Name) = newName) or (UCase(attr.Name) = newCode) or (UCase(attr.Label) = newName) then
                           attrName =  attr.Target.Code + &quot;.&quot; + attr.Name 
                           Debug &quot;Column mapping automatically defined with extended attribute &quot; + attrName
                           Exit For
                        End If
                     end if
                  next      
                  set exaCol = nothing
               end if
            end if
            &#39; Search for parent specific attribute
            if attrName = &quot;&quot; then
               if UCase(const_parentAttrValue) = newCode or UCase(Mid(const_parentAttrValue, 2, Len(const_parentAttrValue) - 2)) = newCode then
                  attrName = const_parentAttrValue
               else
                  Dim qualifiedType, pos
                  qualifiedType = GetMappingValue(colnMap.ParentObject, &quot;ImportedType&quot;) &#39; NO-NLS
                  pos = InStrRev(qualifiedType, &quot;.&quot;)
                  if pos &gt; 0 then
                     qualifiedType = UCase(Mid(qualifiedType, 1, pos - 1))
                  end if
                  if qualifiedType = newCode or qualifiedType = newCode then
                     attrName = const_parentAttrValue
                  else
                     qualifiedType = colnMap.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetcode%.ImportedStereotype&quot;)
                     pos = InStrRev(qualifiedType, &quot;.&quot;)
                     if pos &gt; 0 then
                        qualifiedType = UCase(Mid(qualifiedType, 1, pos - 1))
                     end if
                     if qualifiedType = newCode or qualifiedType = newCode then
                        attrName = const_parentAttrValue
                     end if
                  end if
               end if
            end if
            &#39; Search on standard collections
            if attrName = &quot;&quot; then
               if not metaclss is nothing then            
                  collName = &quot;&quot;
                  Dim coll
                  &#39; Search on standard attributes available on the metaclass
                  For each coll in metaclss.Collections
                     if (UCase(coll.publicName) = newCode) or (UCase(coll.LocalizedName) = newName) then
                        if (coll.Flags and (SCOLL_CALCCUSTIMPL or SCOLL_MAXONE or SCOLL_SHCTCONTENT or SCOLL_COLLSET)) = 0 then
                           collName = coll.publicName
                           Debug &quot;Column mapping automatically defined with standard collection &quot; + collName
                           Exit For
                        end if
                     end if
                  Next            
                  &#39; Search on extended collections
                  if collName = &quot;&quot; then
                     set exaCol = colnMap.Model.GetMetaExtensionsForClass(metaclss.Kind, PdCommon.Cls_ExtendedCollectionTargetItem)
                     if not exaCol is nothing then
                        for each coll in exaCol
                           if not coll.DestinationClassKind = 0 and coll.ExtendedAttribute is nothing then
                              If UCase(coll.Name) = newName or UCase(coll.Label) = newName or UCase(coll.Name) = newCode then
                                 collName =  coll.Target.Code + &quot;.&quot; + coll.Name 
                                 Debug &quot;Column mapping automatically defined with extended collection &quot; + attrName
                                 Exit For
                              End If
                           end if
                        next      
                        set exaCol = nothing
                     end if
                  end if
                  &#39; Search on extended compositions
                  if collName = &quot;&quot; then
                     set exaCol = colnMap.Model.GetMetaExtensionsForClass(metaclss.Kind, PdCommon.Cls_ExtendedCompositionTargetItem)
                     if not exaCol is nothing then
                        for each coll in exaCol
                           if not coll.DestinationClassKind = 0 then
                              If UCase(coll.Name) = newName or UCase(coll.Label) = newName or UCase(coll.Name) = newCode then
                                 collName =  coll.Target.Code + &quot;.&quot; + coll.Name 
                                 Debug &quot;Column mapping automatically defined with extended composition &quot; + attrName
                                 Exit For
                              End If
                           end if
                        next      
                        set exaCol = nothing
                     end if
                  end if
                  &#39; Search composition by kind
                  &#39; ...                  
               end if
            end if
            &#39; Assign mapping if default one found
            if not attrName = &quot;&quot; then
               ResetMappingDictionary
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Standard
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.StandardOrReferenceAttribute&quot;, attrname
               if colnMap.GetExtendedAttribute (&quot;%CurrentTargetCode%.ColumnKind&quot;) = const_colnType_Reference then
                  colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.RefAttribute&quot;, colnMap.ParentObject.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.DeftRefAttribute&quot;)
               end if
            elseif not collName = &quot;&quot; then
               ResetMappingDictionary
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Relationship
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.EditableRelationshipCollection&quot;, collName            
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.RefAttribute&quot;, colnMap.ParentObject.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.DeftRefAttribute&quot;) 
               attrName = collName
            end if
            set attr = nothing
            set metaclss = nothing
         end if
      end if
   end if
   GuessDefaultColumnMapping = attrName
End Function


&#39;******************************************************************************
&#39;*                         CommitCellData
&#39;******************************************************************************
Sub CommitCellData(newobj, colnMap, vale, subObj, globalDict, countCreate, totalWarning)
   Dim attrName, colnKind
   attrName = GetMappingValue(colnMap, &quot;AttributeOrCollection&quot;) &#39; NO-NLS
   if not attrName = &quot;&quot; and not attrName = const_parentAttrValue then &#39; Parent has already been handled
      if not globalUserAbort then
         colnKind = GetMappingValue(colnMap, &quot;ColumnKind&quot;) &#39; NO-NLS
         &#39;Debug &quot;    Committing cell data attribute=&quot; + attrName + &quot; value=&quot; + vale
         If colnKind = const_colnType_Relationship then
            &#39; Commit Relationship cell data
            CommitRelationshipCellData newObj, colnMap, attrName, vale, globalDict, countCreate, totalWarning
         ElseIf not attrName = &quot;&quot; and not newobj is nothing then
            &#39; Commit Attribute cell data
            If IsNewAttributeRequest(attrName) or InStrRev(attrName, &quot;.&quot;) &gt; 0 then
               &#39; Extended attribute case        
               CommitExtendedAttributeCellData attrName, newObj, colnMap, vale, globalDict, countCreate, totalWarning
            Else
               &#39; Standard attribute case              
               CommitStandardAttributeCellData attrName, newObj, colnMap, vale, globalDict, countCreate, totalWarning
            End If
         End If
         set vale = nothing
      End If
   end if   
End Sub


&#39;******************************************************************************
&#39;*                         CommitRelationshipCellData
&#39;******************************************************************************
Sub CommitRelationshipCellData(newobj, colnMap, collname, vale, globalDict, countCreate, totalWarning)
   &#39; Empty value specific case
   if IsEmpty(vale) then
      vale = &quot;&quot;      
   elseif IsNull(vale) then
      vale = &quot;&quot;
   end if
   vale = TrimWhitespace(vale)
   if not vale = &quot;&quot; then
      if not collName = &quot;&quot; then
         Dim usedSepr
         usedSepr = &quot;&quot;
         if InStr(vale, chr(10)) then
            usedSepr = chr(10)
         else
            Dim sepr
            sepr = GetMappingValue(colnMap.ParentObject.ParentObject, &quot;ListSeparator&quot;) &#39; NO-NLS
            if not sepr = &quot;&quot; then
               if InStr(vale, sepr) then
                  usedSepr = sepr
               end if
            end if
         end if
         if usedSepr = &quot;&quot; then
            &#39; Convert text value into object and add it in collection
            CommitRelationshipCellOneData newobj, colnMap, collName, vale, globalDict, countCreate, totalWarning
         else
            &#39; Convert text value into an object list
            Dim strList, countVale
            strList = Split(vale, usedSepr, -1, vbBinaryCompare)
            countVale = UBound(strList)
            if countVale &gt; 0 then
               Dim idx, oneVale
               for idx = 0 to countVale
                  oneVale = TrimWhitespace(strList(idx))
                  if not oneVale = &quot;&quot; then
                     CommitRelationshipCellOneData newobj, colnMap, collName, oneVale, globalDict, countCreate, totalWarning         
                  end if
               next
            end if
         end if
      end if
   end if
End Sub


&#39;******************************************************************************
&#39;*                         CommitRelationshipCellOneData
&#39;******************************************************************************
Sub CommitRelationshipCellOneData(newobj, colnMap, collName, vale, globalDict, countCreate, totalWarning)
   &#39; Convert text value into object
   if debugMode then
      Debug &quot;     Committing cell data (lst) &quot; &amp; colnMap.Name &amp; &quot; = &quot; &amp; cstr(vale)
   end if 
   if AdjustValueType(colnMap, newObj, vale, globalDict, countCreate, totalWarning) then
      if not vale is nothing then
         &#39; Retrieve the collection
         Dim rlshcoll
         set rlshcoll = newObj.GetCollectionByName(collName)
         if rlshcoll is nothing then
            set rlshcoll = newObj.GetExtendedCollection(collName)
         end if
         if not rlshcoll is nothing then
            AddObjectInCollection rlshcoll, vale, totalWarning
            set rlshcoll = nothing
         elseif debugMode then
            Debug &quot;     Could not find collection &quot; &amp; collName &amp; &quot; on &quot; &amp; cstr(newObj)
         end if
      end if
   end if
End Sub


&#39;******************************************************************************
&#39;*                         CommitExtendedAttributeCellData
&#39;******************************************************************************
Sub CommitExtendedAttributeCellData(attrName, newobj, colnMap, vale, globalDict, countCreate, totalWarning)
   if IsNewAttributeRequest(attrName) then
      &#39; New extended attribute specific case
      dim exa
      set exa = GetOrCreateExtendedAttribute(newObj, colnMap)
      if not exa is nothing then
         attrName = exa.QualifiedName
         set exa = nothing
      end if
   end if
   if not IsNewAttributeRequest(attrName) then
      &#39; Commit extended attribute value
      if AdjustValueType(colnMap, newObj, vale, globalDict, countCreate, totalWarning) then
         On Error Resume next       
         if debugMode then
            if IsObject(vale) then
               if vale is nothing then
                  Debug &quot;     Commit cell data (obj) &quot; &amp; colnMap.Name &amp; &quot; = &lt;nothing&gt;&quot;
               else
                  Debug &quot;     Commit cell data (obj) &quot; &amp; colnMap.Name &amp; &quot; = &quot; &amp; cstr(vale)    
               end if
            else
               Debug &quot;     Commit cell data (exa) &quot; &amp; colnMap.Name &amp; &quot; = &quot; &amp; cstr(vale)    
            end if
         end if
         newObj.SetExtendedAttribute attrName, vale
         Dim errMsgSetExtAttr
         errMsgSetExtAttr = &quot;&quot;
         if ErrorOccurs() then
            if not vale = &quot;&quot; then &#39; Do not display error for empty value
               errMsgSetExtAttr = &quot;Error: Could not set attribute &quot; + attrName + &quot; for &quot; + newObj.ShortDescription + &quot; with value &#39;&quot; + CStr(vale) + &quot;&#39;&quot;
               HandleErrorCase totalWarning, errMsgSetExtAttr
            else
               HandleErrorCase -1, &quot;&quot;
            end if       
         end if
      end if
   end if
   set vale = nothing
End Sub


&#39;******************************************************************************
&#39;*                         CommitStandardAttributeCellData
&#39;******************************************************************************
Sub CommitStandardAttributeCellData(attrName, newobj, colnMap, vale, globalDict, countCreate, totalWarning)
   &#39; Standard attribute case
   
   if AdjustValueType(colnMap, newObj, vale, globalDict, countCreate, totalWarning) then
      On Error Resume Next
      if IsObject(vale) then
         &#39; commit as object   
         if not vale is newObj.GetAttribute(attrName) then
            if debugMode then
               if vale is nothing then
                  Debug &quot;     Commit cell data (obj) &quot; &amp; colnMap.Name &amp; &quot; = &lt;nothing&gt;&quot;
               else
                  Debug &quot;     Commit cell data (obj) &quot; &amp; colnMap.Name &amp; &quot; = &quot; &amp; cstr(vale)    
               end if
            end if         
            newObj.SetAttribute attrName, vale 
         end if
      else
         &#39; commit as textual value
         if debugMode then
            Debug &quot;     Commit cell data (str) &quot; &amp; colnMap.Name &amp; &quot; = &quot; &amp; cstr(vale)
         end if
         newObj.SetAttributeText attrName, vale 
      end if
      Dim errMsgSetAttr, hasError
      errMsgSetAttr = &quot;&quot;
      hasError = ErrorOccurs()
      if hasError then    
         if not vale = &quot;&quot; then &#39; Do not display error for empty value
            if Version &gt; &quot;15.1.0.9999&quot; then &#39; NO-NLS the ConvertTextToVariant method is not available in 15.1
               if not IsObject(var) then
                  &#39; Try to set a variant instead of text (this could work for list of values if value is code and not label)
                  Dim metaattr, metaclss
                  set metaattr = newobj.Metaclass.GetMetaMemberByPublicName(attrName)
                  if not metaattr is nothing then
                     HandleErrorCase -1, &quot;&quot;
                     hasError = false
                     Dim var
                     var = metaattr.ConvertTextToVariant(vale)
                     hasError = ErrorOccurs()
                     if cstr(var) = TrimWhitespace(vale) then
                        &#39; The conversion into variant succeeded
                        newObj.SetAttribute attrName, var
                        hasError = ErrorOccurs()
                     else
                        &#39; Could not convert into variant, try again to set by text
                        newObj.SetAttributeText attrName, vale 
                        hasError = ErrorOccurs()
                     end if
                     set metaattr = nothing
                  end if
               end if
            end if
            if hasError then   
               &#39; Convert value into string
               Dim vale2
               if IsObject(vale) then
                  if vale is nothing then
                     vale2 = &quot;&quot;
                  else
                     vale2 = cstr(vale)
                  end if
               else
                  vale2 = vale
               end if
               &#39; Display error
               errMsgSetAttr = &quot;Error: Could not set attribute &quot; + attrName + &quot; for &quot; + newObj.ShortDescription + &quot; with value &#39;&quot; + CStr(vale2) + &quot;&#39;&quot;
               HandleErrorCase totalWarning, errMsgSetAttr
            end if
         end if            
      end if
      HandleErrorCase -1, &quot;&quot;
      if not hasError then
         if attrName = &quot;Name&quot; or attrName = &quot;Code&quot; then &#39; NO-NLS
            &#39; Check if naming convention has adjusted the value
            if not vale = newObj.GetAttributeText(attrName) then
               LogText &quot;Error: the naming convention has adjusted the imported value for &quot; &amp; newObj.Shortdescription &amp; &quot;: &quot; &amp; attrName &amp; &quot; changed from &quot; &amp; vale &amp; &quot; to &quot; &amp; newObj.GetAttributeText(attrName)
               totalWarning = totalWarning + 1
            end if
            Dim localNmspc
            if IsSubObject(newObj) then
               localNmspc = true
            elseif Version &gt; &quot;15.1.0.9999&quot; then &#39; NO-NLS the HasLocalNamespace method is not available in 15.1
               localNmspc = newObj.Model.HasLocalNamespace(newobj.ClassKind)
            else
               localNmspc = false
            end if                  
            if not localNmspc then
              &#39; Adjust uniqueness dictionaries
               Dim classId, strn, keyDict
               classId = CLng(newObj.ClassKind)
               strn = &quot;&quot;
               if newObj.HasAttribute(&quot;Stereotype&quot;) then &#39; NO-NLS
                  strn = newObj.Stereotype
               end if
               set keyDict = RetrieveClassKeyDictionary(globalDict, classId, strn, attrName, newObj.Folder, false)
               if not keyDict is nothing then
                  Dim valeObj
                  set valeObj = nothing
                  vale = newObj.GetAttributeText(attrName)
                  if not keyDict.Exists(vale) then
                     if debugMode then
                        Debug &quot;    Updating unique index with key=&quot; + attrName + &quot;, value =&quot; + vale
                     end if               
                     keyDict.Add vale, newObj
                   end if
                  set keyDict = nothing
               end if
            end if
         end if
      end if
   end if
   set vale = nothing
End Sub


&#39;******************************************************************************
&#39;*                         AdjustValueType
&#39;******************************************************************************
Function AdjustValueType(colnMap, newObj, vale, globalDict, countCreate, totalWarning)
   Dim res, mappingKind
   res = true  
   mappingKind = GetMappingValue(colnMap, &quot;ColumnKind&quot;) &#39; NO-NLS
   If mappingKind = const_colnType_Reference or mappingKind = const_colnType_Relationship then
      &#39; Convert string into object
      if not TrimWhitespace(vale) = &quot;&quot; then
         set vale = FindOrCreateObjectFromCell(colnMap, vale, newObj, countCreate, totalWarning, globalDict)
         if vale is nothing then
            res = false            
         end if
      else
         set vale = nothing
         res = true
      end if
   elseif GetMappingValue(colnMap, &quot;PersistBooleanMapping&quot;) then &#39; NO-NLS
      &#39; Boolean specific case, we need to convert the value
      Dim valeUcase
      valeUcase = TrimWhitespace(UCase(vale))
      vale = &quot;False&quot; &#39; NO-NLS
      if not valeUcase = &quot;&quot; then
         &#39; Boolean attribute specific case
         if valeUcase = &quot;1&quot; or valeUcase = &quot;YES&quot; or valeUcase = &quot;TRUE&quot; or valeUcase = &quot;X&quot; or valeUcase = &quot;T&quot; or valeUcase = &quot;Y&quot; or valeUcase = &quot;OK&quot; then &#39; NO-NLS
            vale = &quot;True&quot; &#39; NO-NLS
         else
            Dim userDefnTrue
            userDefnTrue = Ucase(GetMappingValue(colnMap.ParentObject.ParentObject, &quot;StringForTrue&quot;)) &#39; NO-NLS
            if not userDefnTrue = &quot;&quot; then
               if strcomp(userDefnTrue, valeUcase) = 0 then
                  vale = &quot;True&quot;   &#39; NO-NLS               
               else
                  vale = &quot;False&quot;  &#39; NO-NLS
               end if
            end if
         end if
      end if
   elseif vale = &quot;&quot; and GetMappingValue(colnMap, &quot;Attribute&quot;) = &quot;Stereotype&quot; then &#39; NO-NLS &#39; NO-NLS
      &#39; Empty Stereotype specific case, we need to preserve the stereotype type
      vale = GetMappingValue(colnMap.ParentObject, &quot;ImportedStereotype&quot;) &#39; NO-NLS
   else
      &#39; Make sure any end-of-line is coded as chr(13)+chr(10), not just chr(10)
      vale = Replace(vale, Chr(13)+Chr(10), Chr(10))
      vale = Replace(vale, Chr(10), Chr(13)+Chr(10))
   end if
   AdjustValueType = res
End Function


&#39;******************************************************************************
&#39;*                         AddObjectInCollection
&#39;******************************************************************************
Sub AddObjectInCollection(rlshcoll, newObj, totalWarning)
   if not rlshcoll is nothing and not newObj is nothing then
      &#39; Search if already in collection
      Dim tmp, found
      found = false
      For each tmp in rlshcoll
         If tmp is newObj then
            found = true
            Exit For
         end if
      Next
      set tmp = nothing
      &#39; Add it to the collection
      if not found then
         On Error Resume Next
         rlshcoll.Add newObj
         HandleErrorCase totalWarning, &quot;Error: Could not add &quot; + vale.ShortDescription + &quot; into collection &quot; + collName + &quot; of &quot; + newObj.ShortDescription
      end if
   end if
End Sub


&#39;******************************************************************************
&#39;*                         IsSubObject
&#39;******************************************************************************
Function IsSubObject(obj)
   Dim res
   res = false
   if not obj is nothing then
      if (obj.metaclass.Flags and SCLSS_SUBOBJECT) = SCLSS_SUBOBJECT then
         res = true
      end if
   end if
   IsSubObject = res
End Function


&#39;******************************************************************************
&#39;*                         IsLinkObject
&#39;******************************************************************************
Function IsLinkObject(obj)
   Dim res
   res = false
   if not obj is nothing then
      if obj.IsKindOf(Cls_NamedLinkObject) or obj.IsKindOf(Cls_BaseLinkObject) then
         res = true
      end if
   end if
   IsLinkObject = res
End Function


&#39;******************************************************************************
&#39;*                         GuessReferenceKind
&#39;******************************************************************************
Function GuessReferenceKind(colnMap, obj)
   Dim kind
   kind = CLng(GetMappingValue(colnMap, &quot;RefKind&quot;)) &#39; NO-NLS
   if kind = 0 then
      &#39; Try to guess the kind from object instance
      Dim collName, mapKind
      mapKind = GetMappingValue(colnMap, &quot;ColumnKind&quot;) &#39; NO-NLS
      if mapKind = const_colnType_Reference then
         &#39; Retrieve the attribute definition
         kind = CLng(GetMappingValue(colnMap, &quot;MinimalRefKind&quot;)) &#39; NO-NLS
      elseif mapKind = const_colnType_Relationship and not obj is nothing then
         &#39; Retrieve the content type of the collection
         collName = GetMappingValue(colnMap, &quot;RelationshipCollection&quot;) &#39; NO-NLS
         if not collName = &quot;&quot; then
            Dim coll, collDefn
            set coll = obj.GetCollectionByName(collName)
            if not coll is nothing then   
               set collDefn = coll.MetaCollection
               if not collDefn is nothing then
                  kind = collDefn.ContentKind
                  set collDefn = nothing
               end if      
               set coll = nothing
            end if
         end if
      end if
   end if
   GuessReferenceKind = kind
End Function

&#39;******************************************************************************
&#39;*                         GetOrCreateExtendedAttribute
&#39;******************************************************************************
Function GetOrCreateExtendedAttribute(obj, colnMap)
   Dim exa, attrName
   set exa = nothing
   &#39; loop on all extended attributes of this metaclass
   dim exaCol
   set exaCol = obj.Model.GetMetaExtensionsForInstance(obj, PdCommon.Cls_ExtendedAttributeTargetItem)
   if not exaCol is nothing then
      Dim attr
      for each attr in exaCol
         if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
            If attr.Name = colnMap.Name then
               ResetMappingDictionary
               set exa = attr
               SafeAssignNameAndCode colnMap, exa.Name
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.Attribute&quot;, exa.Target.Code + &quot;.&quot; + exa.Name               
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsBooleanAttribute&quot;)
               Exit For
            End If
         end if
      next      
      set attr = nothing
      set exaCol = nothing
   end if
   &#39; Create new extended attribute
   if exa is nothing then
      Dim trgt, import
      set import = colnMap.ParentObject.ParentObject
      if not import is nothing then
         &#39; retrieve extension
         set trgt = import.GetExtendedAttribute(&quot;%CurrentTargetCode%.Extension&quot;)
         &#39; create a new one if required
         if trgt is nothing then
            &#39; Search existing import extension
            Dim tmpTrgt
            for each tmpTrgt in import.Model.ExtendedModelDefinitions
               if tmpTrgt.Name = txtExtensionXEM or tmpTrgt.Code = &quot;IMPORT_EXTENSIONS&quot; then &#39; NO-NLS
                  set trgt = tmpTrgt
                  if tmpTrgt.IsShortcut then
                     set trgt = tmpTrgt.TargetObject
                  end if
                  Exit For
               end if
            next
            set tmpTrgt = nothing
            if trgt is nothing then
               set trgt = import.Model.ExtendedModelDefinitions.CreateNew()
               if not trgt is nothing then
                  trgt.Name = txtExtensionXEM
                  trgt.Code = &quot;IMPORT_EXTENSIONS&quot; &#39; NO-NLS
                  LogText txtCreatingXEM + trgt.Name
                  import.SetExtendedAttribute &quot;%CurrentTargetCode%.Extension&quot;, trgt
               end if
            end if
         elseif trgt.IsShortcut then
            &#39; Extension shortcut specific case, get the target object
            set trg = trg.TargetObject
         end if
         &#39; Add extended attribute
         if not trgt is nothing then
            Dim strnDefn
            set strnDefn = nothing
            if obj.IsKindOf(PdCommon.Cls_ExtensibleObject) then
               set strnDefn = obj.StereotypeObject 
            end if
            if not strnDefn is nothing then
               set exa = strnDefn.AddMetaExtension(PdCommon.Cls_ExtendedAttributeTargetItem)
               set strnDefn = nothing
            else
               Dim objStrn
               objStrn = GetMappingValue(colnMap.ParentObject, &quot;ImportedStereotype&quot;) &#39; NO-NLS
               set exa = trgt.AddStereotypeMetaExtension(obj.Metaclass.Kind, objStrn, PdCommon.Cls_ExtendedAttributeTargetItem) 
            end if
            if not exa is nothing then
               InitNewAttribute exa, colnMap.Name, colnMap
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.Attribute&quot;, exa.Target.Code + &quot;.&quot; + exa.Name
               &#39; Invalide the cache in order to &#39;see&#39; the new extended attribute
               InvalidateTargetCache exa
               &#39; Log message for exa creation
               LogText txtCreatingExa + exa.QualifiedName + txtOnMetaclass + obj.Metaclass.LocalizedName
            end if
            set trgt = nothing
         end if
         set import = nothing
      end if
   end if
   set GetOrCreateExtendedAttribute = exa
   set exa = nothing
End Function


&#39;******************************************************************************
&#39;*                         InvalidateTargetCache
&#39;******************************************************************************
Sub InvalidateTargetCache(exa)
   Dim target
   set target = exa.Target
   ResetMappingDictionary
   if not target is nothing then
      &#39; This notification allows to refresh all caches associated to target definition
      On Error Resume Next
      target.NotifyChange
      HandleErrorCase -1, &quot;&quot;
   end if
End Sub


&#39;******************************************************************************
&#39;*                         RetrieveMetaclassFromImportedType
&#39;******************************************************************************
Function RetrieveMetaclassFromImportedType(tablMap, importedType)
   Set RetrieveMetaclassFromImportedType = nothing
   Dim clssname
   clssname = importedType
   if not clssname = &quot;&quot; then
      if not tablMap.model is nothing then
         &#39; compute sub-object class name (last part)
         Dim pos
         pos = InStrRev(clssname, &quot;.&quot;)
         if pos &gt; 0 then
            clssname = Mid(clssname, pos+1)
         end if
         &#39; add library
         Dim lib, metaclss, qualifiedClssname
         set metaclss = tablMap.model.metaclass
         set lib = metaclss.library
         qualifiedClssname = clssname
         if not lib is nothing then
            qualifiedClssname = lib.PublicName+&quot;.&quot;+clssname
            set lib = nothing
         end if
         &#39; Seach for a standard metaclass
         set metaclss = Metamodel.GetMetaclassByPublicName(qualifiedClssname)
         &#39; Search for an extended metaclass
         if metaclss is nothing then
            Dim strnCol
            if pos &gt; 0 then
               set strnCol = tablMap.Model.GetMetaExtensionsForClass(cls_ExtendedSubObject, PdCommon.Cls_StereotypeTargetItem)
            else
               set strnCol = tablMap.GetCalculatedCollection(&quot;%CurrentTargetCode%.AllStereotypesAsMetaclass&quot;)
            end if
            if not strnCol is nothing then
               Dim strn
               for each strn in strnCol
                  if strn.Name = clssname then
                     if not strn.Abstract and strn.UseAsMetaclass and not strn.Target.Code = &quot;%CurrentTargetCode%&quot; then
                        set metaclss = strn.GetMetaclass().TargetMetaClass
                        exit for
                     end if
                  end if
               next
               set strnCol = nothing
            end if
         end if
         Set RetrieveMetaclassFromImportedType = metaclss
         set metaclss = nothing
      end if
   end if
End Function


&#39;******************************************************************************
&#39;*                         CreateNewMetaclass
&#39;******************************************************************************
Function CreateNewMetaclass(tablMapp, kind)
   &#39; Enter class name using a custom form
   Dim dlg, clssName, clssCode, clssPlural, newClss
   set newClss = nothing
   set dlg = tablMapp.CreateCustomDialog(&quot;%CurrentTargetCode%.NewObjectType&quot;)
   If not dlg is nothing then
      dlg.EnforceCancelButton = true
      dlg.CloseButtonLabel = txtOkBtn
      dlg.ShowDialog
      &#39; Retrieve parameters
      clssName = dlg.GetValue(&quot;Name&quot;) &#39; NO-NLS
      clssCode = dlg.GetValue(&quot;Code&quot;) &#39; NO-NLS
      clssPlural = dlg.GetValue(&quot;Plural&quot;) &#39; NO-NLS
      &#39; Initialize code with name if not specified
      if clssCode = &quot;&quot; then
         clssCode = clssName
      end if
      if kind = 0 then
         kind = PdCommon.Cls_ExtendedObject
      end if
      set dlg = nothing
      
      if not clssCode = &quot;&quot; then
      
         &#39; Search for an already existing stereotype
         dim strnCol
         set strnCol = tablMapp.Model.GetMetaExtensionsForClass(kind, PdCommon.Cls_StereotypeTargetItem)
         if not strnCol is nothing then
            dim sttp1
            for each sttp1 in strnCol
               if sttp1.Name = clssCode then
                  set newClss = sttp1
                  Exit For
               elseif sttp1.Label = clssName and not clssName = &quot;&quot; then
                  set newClss = sttp1
                  Exit For         
               end if
            next
            set sttp1 = nothing
            set strnCol = nothing
         end if
      
         if newClss is nothing then
            &#39; Create a new stereotype...
            
            &#39; Retrieve of create a XEM
            Dim trgt
            set trgt = GetOrCreateExtension(tablMapp.ParentObject)
   
            if not trgt is nothing then
               &#39; Create new stereotype
               set newClss = trgt.AddMetaExtension(kind, PdCommon.Cls_StereotypeTargetItem) 
               if not newClss is nothing then
                  newClss.Name = clssCode
                  newClss.UseAsMetaclass = true
                  if not clssName = &quot;&quot; and not clssName = clssCode then
                     newClss.Label = clssName
                  end if
                  if not clssPlural = &quot;&quot; then
                     newClss.PluralLabel = clssPlural
                  end if                     
                  &#39; Refresh sttp cache
                  InvalidateTargetCache(newClss)
               end if
               set trgt = nothing
            end if      
         end if
      end if
      
   End If
   set CreateNewMetaclass = newClss
   set newClss = nothing
End Function


&#39;******************************************************************************
&#39;*                         CreateNewAttribute
&#39;******************************************************************************
Function CreateNewAttribute(colnMapp, kind)
   &#39; Enter attribute name using a custom form
   Dim dlg, attrName, attrCode, attrKind, newAttr
   set newAttr = nothing
   set dlg = colnMapp.CreateCustomDialog(&quot;%CurrentTargetCode%.NewAttribute&quot;)
   If not dlg is nothing then
      dlg.EnforceCancelButton = true
      dlg.CloseButtonLabel = txtOkBtn
      dlg.SetValue &quot;Name&quot;, colnMapp.Name &#39; NO-NLS
      if dlg.ShowDialog() then
         &#39; Retrieve parameters
         attrName = dlg.GetValue(&quot;Name&quot;) &#39; NO-NLS
         attrCode = replace(attrName,&quot;.&quot;,&quot;_&quot;)
         attrCode = replace(attrCode,&quot; &quot;,&quot;_&quot;)
         set dlg = nothing
      
         if not attrCode = &quot;&quot; then
      
            &#39; Search for an already existing attribute
            set newAttr = nothing
            dim attrCol
            set attrCol = colnMapp.Model.GetMetaExtensionsForClass(kind, PdCommon.Cls_ExtendedAttributeTargetItem)
            if not attrCol is nothing then
               dim attr
               for each attr in attrCol
                  if attr.Name = attrCode then
                     set newAttr = attr
                     Exit For
                  elseif attr.Label = attrName and not attrName = &quot;&quot; then
                     set newAttr = attr
                     Exit For         
                  end if
               next
               set attr = nothing
               set attrCol = nothing
            end if
      
            if newAttr is nothing then
               &#39; Create a new attribute...
            
               &#39; Retrieve or create a XEM
               Dim trgt
               set trgt = GetOrCreateExtension(colnMapp.ParentObject.ParentObject)
            
               if not trgt is nothing then
                  &#39; Create new attribute
                  set newAttr = trgt.AddMetaExtension(kind, PdCommon.Cls_ExtendedAttributeTargetItem) 
                  if not newAttr is nothing then
                     &#39; Initialize name and data type
                     InitNewAttribute newAttr, attrName, colnMapp
                     &#39; Refresh exa cache
                     InvalidateTargetCache(newAttr)
                  end if
                  set trgt = nothing
               end if      
            end if
         end if
      end if
      
   end if
   set CreateNewAttribute = newAttr
   set newAttr = nothing
End Function


&#39;******************************************************************************
&#39;*                         InitNewAttribute
&#39;******************************************************************************
Sub InitNewAttribute(exa, attrName, colnMap)
   &#39; Initialize name and label
   Dim attrCode
   attrCode = replace(attrName,&quot;.&quot;,&quot;_&quot;)
   attrCode = replace(attrCode,&quot; &quot;,&quot;_&quot;)
   exa.Name = attrCode
   if not attrName = &quot;&quot; and not attrName = attrCode then
      exa.Label = attrName
   end if
   &#39; Initialize data type
   if colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnKind&quot;) = const_colnType_Reference then
      &#39; Reference attribute case
      exa.DataType = 15 &#39; Object
      exa.DestinationClassKind = CLng(colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefKind&quot;))
      Dim strn
      strn = colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefStereotype&quot;)
      if not strn = &quot;&quot; then 
         exa.DestinationStereotype = strn
      end if
   elseif IsNewBoolAttributeRequest(colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)) then
      &#39; Boolean attribute case
      exa.DataType = 0 &#39; Boolean
      colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, true
   else
      &#39; Standard attribute case
      exa.DataType = 12 &#39; String          
      colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, false
   end if    
End Sub


&#39;******************************************************************************
&#39;*                         CreateNewCollection
&#39;******************************************************************************
Function CreateNewCollection(colnMapp)
   &#39; Enter collection name using a custom form
   Dim dlg, collName, collKind, collStrn, newColl
   set newColl = nothing
   set dlg = colnMapp.CreateCustomDialog(&quot;%CurrentTargetCode%.NewObjectList&quot;)
   If not dlg is nothing then
      dlg.EnforceCancelButton = true
      dlg.CloseButtonLabel = txtOkBtn
      dlg.SetValue &quot;Name&quot;, colnMapp.Name &#39; NO-NLS
      if dlg.ShowDialog() then
         &#39; Retrieve parameters
         collName = dlg.GetValue(&quot;Name&quot;) &#39; NO-NLS
         collKind = CLng(colnMapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefKind&quot;))
         collStrn = colnMapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefStereotype&quot;)
      
         if not collKind = 0 and not collName = &quot;&quot; then      
            &#39; Search for an already existing collection
            dim colCol, kind
            kind = CLng(colnMapp.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
            set colCol = colnMapp.Model.GetMetaExtensionsForClass(kind, PdCommon.Cls_ExtendedCollectionTargetItem)
            if not colCol is nothing then
               dim curCol
               for each curCol in colCol
                  if curCol.Name = collName then
                     set newColl = curCol
                     Exit For
                  end if
               next
               set curCol = nothing
               set colCol = nothing
            end if
      
            if newColl is nothing then
               &#39; Create a new collection...
            
               &#39; Retrieve of create a XEM
               Dim trgt
               set trgt = GetOrCreateExtension(colnMapp.ParentObject.ParentObject)
   
               if not trgt is nothing then
                  &#39; Create new collection
                  Dim strn
                  strn = colnMapp.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedStereotype&quot;)
                  set newColl = trgt.AddStereotypeMetaExtension(kind, strn, PdCommon.Cls_ExtendedCollectionTargetItem) 
                  if not newColl is nothing then
                     Dim msg
                     msg = &quot;&quot;
                     if newColl.CanSetAttribute(&quot;Name&quot;, collName, msg) then &#39; NO-NLS
                        newColl.Name = collName
                        newColl.DestinationClassKind = collKind
                        newColl.DestinationStereotype = collStrn
                        LogText txtCreatingCol + newColl.QualifiedName + txtOnMetaclass + newColl.Metaclass.LocalizedName
                        colnMapp.SetExtendedAttribute &quot;%CurrentTargetCode%.EditableRelationshipCollection&quot;, trgt.Code + &quot;.&quot; + collName
                        &#39; Refresh extension cache
                        InvalidateTargetCache(newColl)
                     else
                        newColl.Delete
                        set newColl = nothing
                        if not msg = &quot;&quot; then
                           DisplayError(msg)
                        end if
                     end if
                  end if
                  set trgt = nothing
               end if      
            end if
         end if
      end if
   end if
   set CreateNewCollection = newColl
   set newColl = nothing
End Function


&#39;******************************************************************************
&#39;*                         GetOrCreateExtension
&#39;******************************************************************************
Function GetOrCreateExtension(import)
   Dim trgt
   set trgt = nothing
   if not import is nothing then
      &#39; retrieve extension
      set trgt = import.GetExtendedAttribute(&quot;%CurrentTargetCode%.Extension&quot;)
      &#39; create a new one if required
      if trgt is nothing then
         &#39; Search existing import extension
         Dim tmpTrgt
         for each tmpTrgt in import.Model.ExtendedModelDefinitions
            if tmpTrgt.Name = txtExtensionXEM or tmpTrgt.Code = &quot;IMPORT_EXTENSIONS&quot; then &#39; NO-NLS
               set trgt = tmpTrgt
               if tmpTrgt.IsShortcut then
                  set trgt = tmpTrgt.TargetObject
               end if
               Exit For
            end if
         next
         set tmpTrgt = nothing
         &#39; Create a new one if not already found
         if trgt is nothing then
            set trgt = import.Model.ExtendedModelDefinitions.CreateNew()
            if not trgt is nothing then
               trgt.Name = txtExtensionXEM
               trgt.Code = &quot;IMPORT_EXTENSIONS&quot; &#39; NO-NLS
               import.SetExtendedAttribute &quot;%CurrentTargetCode%.Extension&quot;, trgt
            end if
         end if
      end if
      set import = nothing
   end if
   set GetOrCreateExtension = trgt
   set trgt = nothing
End Function

&#39;******************************************************************************
&#39;*                         ListAllAttributes
&#39;******************************************************************************
Function ListAllAttributes(model, kind, strn)
   Dim list
   list = &quot;&quot;
   Dim tablclss
   set tablclss = Metamodel.GetMetaclassByKind(kind)
   if not tablclss is nothing then
      &#39; loop on all editable attributes of this metaclass
      dim attr
      for each attr in tablclss.Attributes
         if not attr.ReadOnly and not attr.MemberFlags &amp; SMEMB_HIDDEN then
            &#39; Add this editable meta attribute to the list
            list = list + attr.PublicName + &quot;;&quot;                               
         end if            
      next
      &#39; loop on all extended attributes of this metaclass
      dim exaCol
      set exaCol = model.GetMetaExtensionsForClass(tablclss.Kind, PdCommon.Cls_ExtendedAttributeTargetItem)
      if not exaCol is nothing then
         for each attr in exaCol
            if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
               list = list + attr.Target.Code + &quot;.&quot; + attr.Name + &quot;;&quot;
            end if
         next      
         set exaCol = nothing
      end if
      set attr = nothing   
      set tablclss = nothing
   end if
   ListAllAttributes = list
End Function


&#39;******************************************************************************
&#39;*                         ListOfSubObjectClasses
&#39;******************************************************************************
Function ListOfSubObjectClasses(clss, prefix1, prefix2, level)
   Dim res
   res = &quot;&quot;
   if not clss is nothing and level &gt; 0 then
      Dim comp
      For each comp in clss.Collections
         If comp.Composition then
            Dim subClss, clssName
            set subClss = comp.ContentClass
            if not subClss is nothing then
               if not subClss.Abstract then
                  if (subClss.Flags and SCLSS_SUBOBJECT) = SCLSS_SUBOBJECT then
                     clssName = subClss.PublicName
                     if not clssName = &quot;ExtendedCollection&quot; and not clssName = &quot;ExtendedComposition&quot; and not clssName = &quot;ExtendedSubObject&quot; then &#39; NO-NLS
                        res = res &amp; prefix1 &amp; clssName &amp; vbTab &amp; prefix2 &amp; subClss.LocalizedName &amp; &quot;;&quot;
                        res = res &amp; ListOfSubObjectClasses(subClss, prefix1 &amp; clssName &amp; &quot;.&quot;, prefix2 &amp; subClss.LocalizedName &amp; &quot;.&quot;,  level - 1)
                     end if
                  end if
               end if
               set subClss = nothing
            end if
         End if
      Next
   end if
   ListOfSubObjectClasses = res
End Function


&#39;******************************************************************************
&#39;*                         AddExtendedSubObjectParentsInSelection
&#39;******************************************************************************
Sub AddExtendedSubObjectParentsInSelection(subObjStrn, sel)

   &#39; Disable validation mode because metaclass are not supposed to be added in selections
   Dim oldValidation
   oldValidation = validationMode
   validationMode = false
   
   Dim coll
   For each coll in subObjStrn.AssociatedCollections
      If coll.IsKindOf(Cls_ExtendedCompositionTargetItem) then
         &#39; Extended composition found
         Dim clss, cont
         set clss = coll.GetMetaClass()  
         If not clss is nothing then
            set clss = clss.TargetMetaclass
         End If                
         If not clss is nothing then
            &#39; Search for a stereotype as metaclass where it can be defined
            Dim tmp
            set cont = nothing
            set tmp = coll.GetContainer()
            While not tmp is nothing
               if tmp is clss then
                  set tmp = nothing
               elseif tmp.IsKindOf(cls_StereotypeTargetItem) then
                  if tmp.UseAsMetaclass then
                     set cont = tmp
                     set tmp = nothing
                  else
                     set tmp = tmp.GetContainer()
                  end if
               elseif tmp.IsKindOf(cls_metaextensiontargetitem) then
                  set tmp = tmp.GetContainer()
               else
                  set tmp = nothing
               end if
            Wend
            set tmp = nothing
            &#39; Add parent in selection
            if not cont is nothing then
               sel.Objects.Add cont
            else
               sel.Objects.Add clss
            end if
         End If
      End If
   Next
   
   ValidationMode = oldvalidation
End Sub


&#39;******************************************************************************
&#39;*                         BuildListOfExtendedSubObjectForOneParent
&#39;******************************************************************************
Function BuildListOfExtendedSubObjectForOneParent(model, prnt, suffix1, suffix2)
   Dim coll, list, cont, clss
   list = &quot;&quot;
   &#39; Retrieve stereotype and metaclass   
   if prnt.IsKindOf(Cls_StereotypeTargetItem) then
      set cont = prnt
      set clss = cont.GetMetaClass()
      if not clss is nothing then
         set clss = clss.TargetMetaclass
      end if                
   else
      set clss = prnt
      set cont = nothing
   end if
   if not clss is nothing then  
      Dim newSuffix1, newSuffix2
      if not cont is nothing then
         newSuffix1 = cont.Name + &quot;.&quot; + suffix1
         newSuffix2 = cont.LabelOrName + &quot;.&quot; + suffix2
      else
         newSuffix1 = clss.PublicName + &quot;.&quot; + suffix1
         newSuffix2 = clss.LocalizedName + &quot;.&quot; + suffix2
      end if
      if (clss.Flags and SCLSS_SUBOBJECT) = 0 then
         &#39; main object case
         list = list + newSuffix1 + vbTab + newSuffix2 + &quot;;&quot;
      elseif clss.Kind = Cls_ExtendedSubObject then
         &#39; Extended sub-object case
         if not cont is nothing then
            Dim sel2
            set sel2 = model.CreateSelection()
            if not sel2 is nothing then
               sel2.Objects.Add prnt &#39; In order to avoid infinite loop with extended sub-objects
               AddExtendedSubObjectParentsInSelection cont, sel2
               Dim gdPrnt
               for each gdPrnt in sel2.Objects
                  if not gdPrnt is prnt then
                     list = list + BuildListOfExtendedSubObjectForOneParent(model, gdPrnt, newSuffix1, newSuffix2)
                  end if
               next
               sel2.Delete
               set sel2 = nothing
            end if
         end if
      else
         &#39; Extended composition on a standard sub-object class
         &#39; We need to find all possible parents for this standard sub-object...
      end if
      &#39; Add also this sub-object for all child stereotypes as metaclass
      Dim chldStrnCol
      if not cont is nothing then
         set chldStrnCol = model.GetMetaExtensionsForStereotype(clss.Kind, cont.Name, PdCommon.Cls_StereotypeTargetItem)
      else
         set chldStrnCol = model.GetMetaExtensionsForClass(clss.Kind, PdCommon.Cls_StereotypeTargetItem)                     
      end if
      if not chldStrnCol is nothing then
         Dim chldStrn
         for each chldStrn in chldStrnCol
            if chldStrn.UseAsMetaClass and not chldStrn.Target.Code = &quot;%CurrentTargetCode%&quot; then
               list = list + chldStrn.Name + &quot;.&quot; + suffix1 + vbTab + chldStrn.LabelOrName + &quot;.&quot; + suffix2 + &quot;;&quot;
            end if
         next
      end if   
   end if
   BuildListOfExtendedSubObjectForOneParent = list
   set clss = nothing
   set cont = nothing
End Function


&#39;******************************************************************************
&#39;*                         IsGlobalMetaclass
&#39;******************************************************************************
Function IsGlobalMetaclass(kind)
   IsGlobalMetaclass = false
   if not kind = 0 then
      Dim metaclss
      set metaclss = nothing
      On Error Resume Next
      set metaclss = metamodel.GetMetaclassByKind(kind)
      HandleErrorCase -1, &quot;&quot;
      if not metaclss is nothing then
         if metaclss.Flags and SCLSS_GLOBAL then
            IsGlobalMetaclass = true
         end if
         set metaclss = nothing
      end if
   end if
End Function


&#39;******************************************************************************
&#39;*                         IsAbstractMetaclass
&#39;******************************************************************************
Function IsAbstractMetaclass(kind)
   IsAbstractMetaclass = false
   if not kind = 0 then
      Dim metaclss
      set metaclss = nothing
      On Error Resume Next
      set metaclss = metamodel.GetMetaclassByKind(kind)
      HandleErrorCase -1, &quot;&quot;
      if not metaclss is nothing then
         if metaclss.Flags and SCLSS_ABSTRACT then
            IsAbstractMetaclass = true
         end if
         set metaclss = nothing
      end if
   end if
End Function


&#39;******************************************************************************
&#39;*                         IsSubObjectMetaclass
&#39;******************************************************************************
Function IsSubObjectMetaclass(kind)
   IsSubObjectMetaclass = false
   if not kind = 0 then
      Dim metaclss
      set metaclss = nothing
      On Error Resume Next
      set metaclss = metamodel.GetMetaclassByKind(kind)
      HandleErrorCase -1, &quot;&quot;
      if not metaclss is nothing then
         if metaclss.Flags and SCLSS_SUBOBJECT then
            IsSubObjectMetaclass = true
         end if
         set metaclss = nothing
      end if
   end if
End Function


&#39;******************************************************************************
&#39;*                         IsNewAttributeRequest
&#39;******************************************************************************
Function IsNewAttributeRequest(str)
   if str = const_newAttrValue or str = const_newAttrValue_old then
      IsNewAttributeRequest = true
   elseif IsNewBoolAttributeRequest(str) then
      IsNewAttributeRequest = true
   elseif IsNewObjAttributeRequest(str) then
      IsNewAttributeRequest = true
   else
      IsNewAttributeRequest = false
   end if
End Function


&#39;******************************************************************************
&#39;*                         IsNewBoolAttributeRequest
&#39;******************************************************************************
Function IsNewBoolAttributeRequest(str)
   if str = const_newBoolAttrValue or str = const_newBoolAttrValue_old then
      IsNewBoolAttributeRequest = true
   else
      IsNewBoolAttributeRequest = false
   end if
End Function


&#39;******************************************************************************
&#39;*                         IsNewObjAttributeRequest
&#39;******************************************************************************
Function IsNewObjAttributeRequest(str)
   if str = const_newObjAttrValue then
      IsNewObjAttributeRequest = true
   else
      IsNewObjAttributeRequest = false
   end if
End Function


&#39;******************************************************************************
&#39;*                         GetCompositionByKind
&#39;******************************************************************************
Function GetCompositionByKind(obj, classId, strn)
   Dim compCol
   set compCol = nothing
   if not obj is nothing then
      if classId = cls_ExtendedSubObject and not strn = &quot;&quot; then
         Dim extCompCol, extComp
         set extCompCol = obj.GetMetaExtensions(Cls_ExtendedCompositionTargetItem)
         if not extCompCol is nothing then
            for each extComp in extcompCol
               if extComp.DestinationStereotype = strn then
                  set compCol = obj.GetExtendedCollection(extComp.Target.Code + &quot;.&quot; + extComp.Name)
                  exit for
               end if
            next
            set extCompCol = nothing
            set extComp = nothing
         end if
      else
         On Error Resume Next
         obj.GetCollectionByKind classId, compCol, true
         if not compCol is nothing then
            &#39; Handle specific case of PDM Table.Key.Columns collection
            &#39; where GetCollectionByKind returns a non-composition collection!
            if obj.ObjectType = &quot;Key&quot; then &#39; NO-NLS
               if classId = PdPDM.Cls_Column then
                  set compCol = nothing
               end if
            end if
         end if      
         HandleErrorCase -1, &quot;&quot; &#39; Silent
      end if
   end if
   set GetCompositionByKind = compCol
   set compCol = nothing
End Function

&#39;******************************************************************************
&#39;*                         GetCommonOptionValue
&#39;******************************************************************************
Function GetCommonOptionValue(import, exaName, deftVale)
   Dim tablMap, colnMap, cmnVale
   cmnVale = &quot;&lt;first&gt;X.Y;Z&quot; &#39; NO-NLS special value for non-initialized
   for each tablMap in import.GetExtendedCollection(&quot;%CurrentTargetCode%.TableMappings&quot;)
      for each colnMap in tablMap.GetExtendedCollection(&quot;%CurrentTargetCode%.ColumnMappings&quot;)
         if colnMap.HasExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName) then
            dim locVale
            locVale = colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName)
            if cmnVale = &quot;&lt;first&gt;X.Y;Z&quot; then &#39; NO-NLS
               &#39; First initialization
               cmnVale = locVale
            elseif not cmnVale = locVale then
               &#39; Distinct values
               cmnVale = &quot;&lt;distinct&gt;X.Y;Z&quot; &#39; NO-NLS special value for non-coherent case
               exit for
            end if
         end if
      next
      if cmnVale = &quot;&lt;distinct&gt;X.Y;Z&quot; then &#39; NO-NLS
         exit for
      end if
   next
   if cmnVale = &quot;&lt;first&gt;X.Y;Z&quot; then &#39; NO-NLS
      &#39; Non-initialized, take default stored one
      cmnVale = import.GetExtendedAttribute(&quot;%CurrentTargetCode%.Deft&quot; &amp; exaName)
      Debug &quot;  Common option &quot; &amp; exaName &amp; &quot; is stored one: &quot; &amp; cmnVale 
   elseif cmnVale = &quot;&lt;distinct&gt;X.Y;Z&quot; then &#39; NO-NLS
      &#39; Non-coherent, take hard-coded default
      cmnVale = deftVale
      Debug &quot;  Common option &quot; &amp; exaName &amp; &quot; is hard-coded one: &quot; &amp; cmnVale 
   else
      Debug &quot;  Common option &quot; &amp; exaName &amp; &quot; is common one: &quot; &amp; cmnVale
   end if
   &#39; Cleanup
   set tablMap = nothing
   set colnMap = nothing
   &#39; Return value
   GetCommonOptionValue = cmnVale
End Function


&#39;******************************************************************************
&#39;*                         SetCommonOptionValue
&#39;******************************************************************************
Sub SetCommonOptionValue(import, exaName, vale)
   Dim oldVale
   &#39; Retrieve old value to detect a real change
   oldVale = import.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName)
   &#39; Update default stored value (for new column mappings)
   import.SetExtendedAttribute &quot;%CurrentTargetCode%.Deft&quot; &amp; exaName, vale
   &#39; Update all column mappings if value changed
   if not vale = oldVale then
      Debug &quot;  Updating common option &quot; &amp; exaName &amp; &quot; with value &quot; &amp; vale
      Dim tablMap, colnMap
      for each tablMap in import.GetExtendedCollection(&quot;%CurrentTargetCode%.TableMappings&quot;)
         for each colnMap in tablMap.GetExtendedCollection(&quot;%CurrentTargetCode%.ColumnMappings&quot;)
            Dim oldMode
            oldMode = ValidationMode
            ValidationMode = false
            On Error Resume next
            if colnMap.HasExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName) then
               colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.&quot; &amp; exaName, vale
               Debug &quot;Option &quot; &amp; exaName &amp; &quot; changed on &quot; &amp; colnMap.ShortDescription &amp; &quot; (default)&quot;
            else
               Dim oldColnKind, changed
               oldColnKind = colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnKind&quot;)
               changed = false
               &#39; Try to use reference kind in order to set more options
               if oldColnKind = const_colnType_Standard then
                  colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot; , const_colnType_Reference
                  if colnMap.HasExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName) then
                     colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.&quot; &amp; exaName, vale
                     Debug &quot;Option &quot; &amp; exaName &amp; &quot; changed on &quot; &amp; colnMap.ShortDescription &amp; &quot; (reference case) :&quot; &amp; Cstr(colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName))
                     changed = true
                  end if
                  colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot; , oldColnKind
               end if
               &#39; Try to change to Boolean type in order to set more options
               if not changed then
                  if not colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.PersistBooleanMapping&quot;) then
                     colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot; , true
                     if colnMap.HasExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName) then
                        colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.&quot; &amp; exaName, vale
                        Debug &quot;option &quot; &amp; exaName &amp; &quot; changed on &quot; &amp; colnMap.ShortDescription &amp; &quot; (boolean case) :&quot; &amp; Cstr(colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.&quot; &amp; exaName))
                        changed = true
                     end if
                     colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot; , false
                  end if
               end if
               &#39; Not changed?
               if not changed then
                  Debug &quot;option &quot; &amp; exaName &amp; &quot; not supported on &quot; &amp; colnMap.ShortDescription
               end if   
            end if
            ValidationMode = oldMode
            HandleErrorCase -1, &quot;&quot; &#39; Silent
         next
      next
      set tablMap = nothing
      set colnMap = nothing
   end if
End Sub


&#39;******************************************************************************
&#39;*                         InitializeColumnMappingOptions
&#39;******************************************************************************
Sub InitializeColumnMappingOptions(colnMap)
   Dim oldMode, import, oldBoolVale
   set import = colnMap.ParentObject.ParentObject
   Debug &quot;  Initializing options for &quot; &amp; colnMap.Name
   &#39; Switch to Boolean mode in order to initialize String for True
   oldBoolVale = colnMap.GetExtendedAttribute(&quot;%CurrentTargetCode%.PersistBooleanMapping&quot;)
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, true
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.StringForTrue&quot;, import.GetExtendedAttribute(&quot;%CurrentTargetCode%.DeftStringForTrue&quot;)
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, oldBoolVale
   &#39; Switch to Reference mode in order to initialize Ref attribute and Create If Not exist
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Reference
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.CreateIfNotExist&quot;, import.GetExtendedAttribute(&quot;%CurrentTargetCode%.DeftCreateIfNotExist&quot;)
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.RefAttribute&quot;, import.GetExtendedAttribute(&quot;%CurrentTargetCode%.DeftRefAttribute&quot;)
   &#39; Back to Standard default mode
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Standard
   colnMap.SetExtendedAttribute &quot;%CurrentTargetCode%.Attribute&quot;, &quot;&quot;
End Sub


&#39;******************************************************************************
&#39;*                         TrimWhitespace
&#39;******************************************************************************
Function TrimWhitespace(str)
   Dim newStr
   newStr = trim(str)
   if not newStr = &quot;&quot; then
      Dim firstChar, oldNewStr
      &#39; Trim special whitespace character at the beginning
      oldNewStr = newStr
      firstChar = ascw(newStr)
      if (firstChar &gt; 8 and firstChar &lt; 14) or (firstchar = 160) then
         Dim oldChr
         oldChr = Left(newStr, 1)
         newStr = replace(newStr, oldChr, &quot;&quot;, 1, 1)  &#39; TAB, LF, VT, FF, CR, NBSP            
         newStr = trim(newStr)
      end if
      if not newStr = &quot;&quot; then
         &#39; Trim special whitespace character at the end  
         Dim lastChar, length, lstChr
         lstChr = Right(newStr, 1)
         lastChar = ascw(lstChr)
         length = Len(newStr)
         if (lastChar &gt; 8 and lastChar &lt; 14) or (lastChar = 160) then
            newStr = replace(newStr, lstChr, &quot;&quot;, 1, 1)  &#39; TAB, LF, VT, FF, CR, NBSP            
            newStr = trim(newStr)
         end if
      end if
      &#39; Recursive call
      if not newStr = oldNewStr then
         newStr = TrimWhitespace(newStr)
      end if
   end if
   TrimWhitespace = newStr
End Function


&#39;******************************************************************************
&#39;*                         GetClassname
&#39;******************************************************************************
Function GetClassname(classId, strn)
   if not strn = &quot;&quot; then
      GetClassname = strn
   else
      Dim metaclss
      set metaclss = Metamodel.GetMetaclassByKind(classId)
      if not metaclss is nothing then            
         GetClassname = metaclss.LocalizedName
         set metaclss = nothing
      else
         GetClassname = &quot;?&quot;
      end if
   end if
End Function


&#39;******************************************************************************
&#39;*                         AreSameObjects
&#39;******************************************************************************
Function AreSameObjects(obj1, obj2)
   Dim same
   same = false
   if obj1 is obj2 then
      same = true
   elseif obj1 is nothing or obj2 is nothing then
      same = false
   elseif not obj1.IsShortcut() and not obj2.IsShortcut() then
      same = false
   else
      Dim oid1, oid2
      if obj1.IsShortcut() then
         oid1 = obj1.TargetID
      else
         oid1 = obj1.ObjectID
      end if
      if obj2.IsShortcut() then
         oid2 = obj2.TargetID
      else
         oid2 = obj2.ObjectID
      end if
      if oid1 = obj2 then
         same = true
      end if
   end if
   AreSameObjects = same
End Function


&#39;******************************************************************************
&#39;*                         IsNamedObject
&#39;******************************************************************************
Function IsNamedObject(obj)
   Dim res
   res = false
   if not obj is nothing then
      if obj.IsKindOf(PdCommon.cls_NamedObject) then
         res = true
      elseif obj.IsKindOf(PdCommon.cls_BaseDiagram) then
         res = true
      end if
   end if
   IsNamedObject = res
End Function</a:CheckGlobalScript>
<c:PictureFiles>
<o:PictureFile Id="o2">
<a:ObjectID>70746E32-A0E5-4FEE-8BEA-B5980CC4378C</a:ObjectID>
<a:Name>shell32:167</a:Name>
<a:CreationDate>1222776707</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1222776709</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:PictureID>BEDE6B65-4A5B-405E-8A6F-55697789D6ED</a:PictureID>
<a:PictureType>4</a:PictureType>
<a:Path>dll://shell32.dll#Icon:167</a:Path>
<a:Content>0000010008002020100001000400E80200008600000010101000010004002801
00006E0300003030000001000800A80E0000960400002020000001000800A808
00003E130000101000000100080068050000E61B00003030000001002000A825
00004E2100002020000001002000A8100000F646000010100000010020006804
00009E5700002800000020000000400000000100040000000000000000000000
0000000000000000000000000000000000000000800000800000008080008000
00008000800080800000C0C0C000808080000000FF0000FF000000FFFF00FF00
0000FF00FF00FFFF0000FFFFFF00000000101010100010101010101010101010
1010101000910010101010101010101010101000999111001010101010101010
10100099999111050010101010101010100099999966110D5510101010101010
0099999966EE660D5510101010101000999999446EEE660D5510101010100099
999944CC6EEE660D55101010101019999944CCCC6EEE660D5510101010101999
994CCCCC6EE6660D5510101010101999994CCCCC666EEE0D5510060000101999
994CCCCC46EE66DD551006EEEEE01999994CCCCA2206DDDD5510066666681999
994CCAAA220DDDD55510106666661999994AAAAA220DD55DDD10101010101999
992AAAAA22055DDD5500701010101999992AAAAA220DDD551007071010101999
992AAAA22203551000A2727010101999992AA22FAA0310100A2F271010101999
99222FAA22331000A2F2701010101999992FAA22BB33100A2F27101010101999
9992220BBB331022F2701010101019999999110BBB3310022710101070101999
9991110BBB3310101010100707101999911D910BBB3310101010107070701991
1D9911BBB33310101010070D5750111D9911BBB33FB31010101070D5F5101D99
118BB33FBB88101010070D5F5010011110833FBB881010101070D5F510101010
108FBB8810101010100D5F501010101010088810101010101055F51010101010
1010101010101010100550101010FFFCFFFFFFF03FFFFFC00FFFFF0003FFFC00
01FFF00001FFC00001FF000001FF000001FF000001FF00000181000001800000
0180000001C0000001FF0000027F00000C3F0000381F0000703F0000607F0000
40FF000041FF000063F700007FE300007FC100007F8100007F030000FE078C03
FC0FFC0FFC1FFE3FFC3FFFFFFE7F280000001000000020000000010004000000
0000000000000000000000000000000000000000000000000000000080000080
000000808000000000008000800080800000C0C0C000808080000000FF0000FF
000000FFFF00FF000000FF00FF00FFFF0000FFFFFF0044444400044444444444
009110044444440099961550444400999CE66D504444199CCCE66D504444199C
CC6F6D506668199CAA266550EEE6199AAA205DD54444199A22A0D55478441992
A2230447A24419922BB3047A244419910BB304A24784111D1B3304447D541D11
33F33447D5441143F334447D54444443344444454444FC7F9944F01F6EEEC00F
5510000F1010000F994C00006EE600005510000F10100013994C0063666E0047
5510004900100071994C006346EE21C75510E7EFEEE028000000300000006000
0000010008000000000000000000000000000000000000000000000000001D19
CE002722FF005552FF009D99F3001E10DA002721A0007B74F300C2BFFC001A00
EE00220CDE00230DD100513FF9006354E0006C5CEC001D00DA002408E100230A
CB002F1BB900614BEB002604E2004C2FE6004A31D900563EE6002B00EF002900
E3002A00E3002A00E1002900E0002900DF002800DC002600D3002A01DF002601
DA002E07E1002E08DF002F0DD5003410E1003C19E3003919D7004D28F4004425
E200372685002F00F0002C00E4002B00E4002B02D3003607F1003408E5003E12
F200461DF400746E8B00433965004903BA0041246E007024BA00000000000000
00008206E3008308E3008710E4008001E2008002E2008103E1008104E2008205
E3008106E000840AE100840CDE00860DE3008610DF008915E2008818DA008C1B
E3009027DF009A38E5008D24D7008E2BCF009437D0004222580058347000620E
96009031CA009442BE009349AB00B015DC009B60AB00B461C700FBEFFE009136
A40083009A00A014B8009700AB00D587DF00A900BB00C20DD400B711C900AD11
BE00BB2BCC00FAD1FE00B900C600C904D9009F19AB00CC2FD800D766E0007E43
8300C301CE00D605E300D931E100A844AD00F202F800E307EB00EA09F200D30A
DB00E516EB00E73BEC00EE58F200FF00FF00FD01FD00FA01FB00F701FA00FF02
FF00F003F300C314C300F97EFA00FDABFD00FA05EF00F109E900892B8200904F
8C00C822B400720E62006C115D00910B7400AF4A9B00B963A800A6769900884F
730079426200682B4800AC8A9900D7C6CD00946B7B00BB17410057323200FE12
0100D9745F00F83103007F392600F74E0000D64300008D573E0086411E00D552
0000F56F0000F68A0000B96C0500AB7A2900BE790200F0A00000C0840B00D192
0E00CD900100CC9C0100D5A60000EEB80100CFA40500D9B00000D4AE0300A78E
1200DEBA0000C9AC1100E0C50000EDCC0100F4DC0000F8F200006D7100006872
4B0037830900359E000030710F00247F00002A8F030074B75E002F8C1600328D
1A0039942000C3EDB8002C9711001A9D01002CB50F004AB135005AC4460017B2
030016C3050035AD27000DC600000FBA000024CE17000AD6000016D50B002BDA
21007FEE780099F2940005EA00006EEE690001FC00002BF5280056FC5500C3FF
C3007EAB84003A8A4E0033F9FE0063F9FE0002F2FC0091F8FE0000DDF3000BC8
DC0000C3E50000C9F50003B2D30052C8DF0025ADCD000B95B90000B8F20000A9
F0000094D2005BA7C9000084C8000077B300036CA200009EF6000099EB001173
C1004984B2002E4B6E002C69BC00A3C1E9001551BE00143C91004E70D1001138
AC005A648300113AD7004C5585004351BA003947B7004751CE005965E900333A
B800696EC800151FF6001A1EBE001F23B6002A30B7003335FA00FFFFFF003737
3737373737373737373737373737373737373737373737373737373737373737
3737373737373737373737373737373737373737373737373737373737373737
3737373529353737373737373737373737373737373737373737373737373737
3737373737373737373737373737373737350500F0EE4E373737373737373737
3737373737373737373737373737373737373737373737373737373737373735
0500131DF0F0F04E373737373737373737373737373737373737373737373737
3737373737373737373737373735050013191A20F0FCFCF04E37373737373737
3737373737373737373737373737373737373737373737373737373529000F19
1B1C1B20F0FBFBFB353737373737373737373737373737373737373737373737
3737373737373737373529000F191B1C1C1B1C20FB100A004E848484848A3737
37373737373737373737373737373737373737373737373529000F191A1C1C1B
1C200E11961108043582636D6E60833737373737373737373737373737373737
37373737373529FB09191A1C1C1B1C200E104FA89DAA88FB367674746A6A5E83
373737373737373737373737373737373737373535FB09181A1C1C1B1C200E10
29969CA79DABA9A8547474756464648237373737373737373737373737373737
373535FB09181A1C1C1B1C200E10508E959FA5A69DA3A7A07D74757969696982
3737373737373737373737373737373535FC04181A1C1C1B1C200E10508E9090
95A2A7A79BA3A3A07D776D6D6969638237373737373737373737373737373505
04181A1C1C1B1C200E2D508E9090909095A3A6A39BA2A29F7E77747663636382
3737373737373737373737373737FB201A1B1C1B1C200E2D508E929290909090
95A3A6A39BA2A29D7D747476635D5D823737373737373737373737373737FC1C
1E201C201E0E348E929292929292929295A9A9A69BA2A29B7D7474765D5D5D82
3737373737373737373737373737FC2C1C1E1E1E1D0884929494949494929292
95ACACA99BA2A29B7D7476795D5B5D833737373737373737373737373737FC2C
1C1D1E1A1C088494949494949494949498AEAEA99BA1A19B7E6D6F6A5B5B5B83
3737969797979797979793893737FC2C1C1D1E1B1C0884999994949999999994
98AEABA19D9D9F9B6E6E6A5E5B5B5B833737A1A4A4A4A4A4A4A49D978937FC2C
1C1D1E1B1C088499999999999999999998A7A6A9ABA9A29B70705E5F59595B83
3737A2ADACACACACACAC9D9D9337FC2C1C1D1E1B1C08849A9A9A999A9A9A9A94
9BABAEAEAEAC9181645E5F5A595959833737A5AEADAEAEAEAEADA1A19337FC2C
1C1D1E1B1C08849A9E9E9A9E9E9998AFB4B1A8A49181645E5F605A6559595983
37379FA9A3A6A6A6A6A3A19E9337FC2C1C1D1E1B1C08849EA4A49A9A98AFB5BC
B4B4B37A645E5F605A5A616B6159598337378BA1A4A4ACACADADA6A39737FC2C
1C1D1E1B1C0884A4A49A98AFBCC4C0BCB4B4B35F5F605A5A6172737B7B735A83
3737378B9FA5A5A5A5A7A79F9637FC2C1C1D1E1B1C08849A9BAFB2C3C4C0C0C0
B4B5B15A5A5A61737B7B7C7C7C7C7B7F8937373737373737373737373737FC2C
1C1D1E1B1C0884AFC4C3BDC3C4C4C3C3B5B2B16566677C62626262627C8689B3
B38A373737373737373737373737FC2C1C1D1E1B1C17EAC6C6C3BDC3C6C6C6C6
B5B2B17C5762575757576286878DB3BCBCB48F3737373737373737373737FC2B
1F1D1E1F1F17EAC6CBCBC6CBCBCBCBC6B5B2B503575757577C86373789B3BCBC
B5BDB98837373737373737373737FC2122222D21222AEACBCDCDCBCDCDCBC3C1
BCB2BBE5F97B7B8537373789B3C3C3BCBDCFBE8837373737373737373737FC2F
24242324242EEACBCDCDCBCDC7BDC8CECEBDBBE4E5EB4F37373789B7CBCBC0C5
CFCCB03737373737373737373737FD25252526252530EACBCDCDC1C2BFCFCFCF
CCCFC2E4E5E433373789B7CDCDC0C5CFC9B0373737373737373737373737FD28
282826282831EACBC7BEBFC9CACACAC9BFD2DEE3E4E4338989B7CDCDC0C5CFC9
B037373737373737373737373737F814142828141427EABDCABACAD0D0CAB6D2
DEE6E6E3E4E33389B8CDCBC0C8CFC9B03737373737373737373737373737F816
161415161616F6F3D1BABABAB6D2DEE6E6E6E6E3E4E333B0C1CBBDC8CFC9B037
3737373737373737373737373737F812161615161616160BF6F1D2EA05FCE6E0
E0E0E0E3E3E3334BB0BDCECFCCB037373737373737373737373737373737F512
12161612121212121212F5FC20FBE0E0E0E0E0E3E3E13337378DB0B0B0373737
3737373737373784373737373737F50D0D12160D0D0D0D0D0DF6EDF01EFBE0DF
DFDFDFE1E3E13337373737373737373737373737373784608A3737373737F40D
0D0C0C0D0D0D0DEFEDF2FAF2EDF0DFDADFDFDAE1E1E733373737373737373737
3737373737846F6D658A37373737F406060D0C060DEFEBEDFEFE0101FAEDDBDA
DADADAE1E1E73337373737373737373737373737846F74705E848D373737F406
060D0CEFEBEBF70202020BFEF2E8D9D7DAD7D7E1E7E633373737373737373737
373737846F786E60716689373737F40606F6EBEF06060606060DF6E8DBD7D7D7
D7D9E1DEE1E7333737373737373737373737846F746E5F7173618D373737F4F7
EBE9060703030303EFE8DBD7D5D5D5D7DBDDD8D5D7D9F3373737373737373737
37846F746E5F727B678837373737EBE2EC070307070703EBDBD7D5D5D5D7DBDD
DCD3D3D5DB3737373737373737373737846F746E5F727B67883737373737E257
57620757ECE9E5D7D5D5D5D7DBDDDCD4D4D3DDF3373737373737373737373784
6F786E5F737C6788373737373737F3F3E2ECECE9F337F1D5D5D7DBDDDCD6D6D4
DCF1373737373737373737373737846F786E5F737C5C88373737373737373737
F3F3F3373737F1D5D8DDDCD6D6D6E2F137373737373737373737373737846E74
6E5F7B625C883737373737373737373737373737373732DEDCD6D6D6E2F13737
37373737373737373737373737586E64607B575C883737373737373737373737
37373737373737F3F3F3F3F13737373737373737373737373737373737376561
5C625C8837373737373737373737373737373737373737373737373737373737
3737373737373737373737373737376C5656803737373737373737373737FFFF
FFFFFFFF0000FFFFF8FFFFFF0000FFFFE07FFFFF0000FFFF803FFFFF0000FFFE
001FFFFF0000FFF8001FFFFF0000FFE00000FFFF0000FF8000007FFF0000FE00
00003FFF0000F80000003FFF0000E00000003FFF0000800000003FFF00000000
00003FFF0000000000003FFF0000000000003FFF0000000000003FFF00000000
0000300300000000000030010000000000003001000000000000300100000000
00003001000000000000300100000000000038010000000000001FFF00000000
00000FFF00000000000007FF00000000000C03FF00000000003803FF00000000
007007FF0000000000600FFF0000000000001FFF0000000000003FFF00000000
00007FFF000000000000FFFF000000000061FFBF00000000007FFF1F00000000
007FFE0F00000000007FFC0700000000007FF80700000000007FF00700000000
007FE00F0000000001FFC01F0000000003FF803F000001000FFF007F0000C700
3FFE00FF0000FF00FFFE01FF0000FF83FFFF03FF0000FFFFFFFF87FF00002800
0000200000004000000001000800000000000000000000000000000000000000
0000000000001D15C5004841FB005A53FD002314C6002518B3005C51DB006C60
E900230BDF00220BD4002000E5001E00E4002506E4002407E3002309E1004E36
E1005D49E9006250E5006B58EC006F5AF0006D5BE7007968F1002603E6002306
D200432AD900563AEB005E43F2002C2075005942E2006349EE00826FF5002800
E7002900E4002600E4002A00E2002800E1002700E1002A00E1002900DF002900
DD002800DA002800D9002501DB002A02DD002902DA002803DF00310CDD002C0B
D1003F19E8003B19E1003C1BD9004929E7002D00E4002B00E4002800D500340A
E6003003D10030138B0044299C003700D2003600D1003A01D1005508A900540D
9E006F0397009D3AB100D271E500BD03DE008C03A3009204A8009E03B200A706
BE00B510CB00A614BA00AE29C200B400C600C233D100C541D400B002BE00DD03
ED00CA04DA00C004CE00C612D500AC20B600E486EB00D201DB00EA03F700D20A
DE00E21CEE00B31CBB00E700ED00F402FA00E935EF008B298D00ED4DF200E94E
EF00EB59EF00EC71F100F8D1F900FB00FF00FC00FF00FF00FF00FC01FD00FF03
FF00FF04FF00F354F500F892F900F7B1F800FFEEFF009C1B8F007B2B73007E04
7100AA73A100DC568E00B0164D009D3C3800FF120000FA270300F0340C00FE37
0000FA490000EA4C0D00DA4E0000F75E0000DE600E00F667000090450D00E572
0E00F778000092714E00E8830E009A652700F38B0000DE7C000077440000F895
0000A2670E00D4983000BF7D0000F8A80000D6980000976B0000C28A0100C790
0300D1A30000CC9D0000DCAC0100C89D0600CEA30900D3A90C00E8BA0000DDB2
0100D0AD0000EAC80000D3B30000DFBF0200DFBB020098850000DCC60000F1DD
0000F9ED0000E4D9000040950000348D0E00298902002577040026970000549C
3C003E9C26001B8C00006CB45B001CA200002CAE130073D75F0069B758001DC1
0000A7ED9D0018B606004AC73B000CA4000020CD130029D51C0063F558000ABB
00000ECD020012DA070072D06D0005EC000005D800000AD5030000FF000003F2
000000F100000CC50D0056FB54006CFF6A0040CC430091AEA10032A072004476
730000FBFE000475780032FBFF0000EAF90014E1EE0083F1F80001D6E70002C7
DD0032D4E60006B8D30064D7E80000D5F70001C9EA0020BFDA0000CAF70002B7
E70000BBF5000395CB0001ADF1000378AB000085CA0000A0F6000094E500008D
D8003496D1001C88D00000000000000000006EA1C500087DD100496AC8002F54
C700455892001232B2001F41CD003D57C300748AEC00233FE3008091E8004859
D2004353C5001225C3003949C3005968EE006875DA002E3AC000262EBF00646B
E2007179EC00757BF2001C25F5001B21BF001C21BD002027BE001E22A7001B1D
B300FFFFFF00E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2
E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E238031A1AE2E2E2E2E2E2E2E2E2
E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E23803152C1AE81AE2E2E2E2E2E2E2E2
E2E2E2E2E2E2E2E2E2E2E2E2E2E2E238030B1F21291A00FDE2E2E2E2E2E2E2E2
E2E2E2E2E2E2E2E2E2E2E2E2E238030B1F242209031A2EFE6E6E6E6EE2E2E2E2
E2E2E2E2E2E2E2E2E2E2E238040C1F24220A0839828E80394E64594F6EE2E2E2
E2E2E2E2E2E2E2E2E238040D1F24230A163F72908F8D94796265544F6EE2E2E2
E2E2E2E2E2E2E23804071E24230A293E717385978F8D9379635A54506EE2E2E2
E2E2E2E2E2E2FE081E212529353D7174737485998F8D937964644F4A6EE2E2E2
E2E2E2E2E2E2FA2528272828717576767777859D8F899279646450466EE2E2E2
E2E2E2E2E2E2FB342735203A7577777C7A7A85A09089927963554D456EE2E279
79797979E2E2FB342628203B787C7C7F7F7F8597908D8D79555645446EE29B95
9595958B7D87FB342628203B7B838383837F85909F9E88794F4743436EE29B9F
9E9E9E918987FB342628203B7E8A8686848C85A1887051474848443F6EE29B98
959898968B87FB342628203B818A848CA5B2A8A45C4246484B5D68496EE2E29B
91969B9A8E87FB342628203C7B9CA1B6B6B0A5A35C474C60696A6A696DE2E2E2
E2E2E2E2E2E2FB3426281F37A2BBAEB7B7BCAAA16F6A616B6B61E2E2A3A4A7E2
E2E2E2E2E2E2FB332A2B342EC0BEBCBABFBBAAA5C461616AE2E2E2A8AAABA7E2
E2E2E2E2E2E2FC362D2D362EC0BDBFBAB8B3B4ABC8E540E2E2E2B0B7B0C1A6E2
E2E2E2E2E2E2F52F30312F31BCBFB3B1B5C2B5C3DADA85E2E2B7BEB3C1ADE2E2
E2E2E2E2E2E2F43232173217ABACAFAFAFB9C5D8DBDA85A6B7BAB3C1A9E2E2E2
E2E2E2E2E2E2F4180E0E180EE7C4AFC4C6D8DCDCDBDB85A6B8B4C1A9E2E2E2E2
E2E2E2E2E2E2F11C1B1B0F0F191BE7FD1ADCD9D9DBDB85E2A9A9A9E2E2E2E2E2
E2E2E2E2E2E2F1121010111105EEE9F01AD9D7D7D8DE85E2E2E2E2E2E2E2E2E2
E2486DE2E2E2EF14061306EFE6ECF9F91AD6D5D5D8DD85E2E2E2E2E2E2E2E2E2
585A506DE2E2EF1D06EEEAEEF20201ECE4D3D2D2D8DD85E2E2E2E2E2E2E2E258
674F576CE2E2EAF6E5E5F7F8F8F2E0CECACAD3D0CED385E2E2E2E2E2E2E25266
565B5F5FE2E2E5F3F6F7F8EBDFCECACACDD4CFC9CBCBE2E2E2E2E2E2E2526656
5E605FE2E2E2E2EDEBEDEBEBCDC7CDD4D1CCD1CBCBE2E2E2E2E2E2E252645660
695FE2E2E2E2E2E2E2E2E2E2D0CFD1CCCCCBCBE2E2E2E2E2E2E2E2405A56536A
5FE2E2E2E2E2E2E2E2E2E2E2D0D0D1CBCBE2E2E2E2E2E2E2E2E2E25F5153615F
E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E25F415CE2
E2E2E2E2E2E2FFFFFFFFFFF87FFFFFE03FFFFF803FFFFE0003FFF80001FFE000
01FF800001FF000001FF000001FF000001830000010000000100000001000000
0180000001FF00000C7F0000387F0000707F000060FF000001FF000003FF0000
47FF00007FE700007FC300007F8300007F030000FE078001FC0FFC07F81FFC1F
F83FFFFFFC7F2800000010000000200000000100080000000000000000000000
00000000000000000000000000000200FF00514FD9000B00FF001D14DF001403
FA001B11D1003F35D4004A3FEE001600FF001605F400210FF4002112D0002213
D1002C1CD1006D62E700210FCF0023159B002000F3001F00EF002000EF002408
DF002300EB002500E6002200E3002A14B0004428E1005B40E8002800EF002800
E300310BDF006A4CF0002C00E1005026F0006B4BF3003400E4003801F100502E
B600390E9300000000003C167A0040176C00D19BE600AF00E300600774003B25
4000E243FC00D88CE30079048500EA00FF0095019F009806A400D36EDA00A901
AE00DC52DF00C2A2C300FF00FF00FF0EFF00FF22FF00FF3CFF00FE82FF009429
9300BF35B900B516A50087077600AC189700EFC6E800C0409300B890A9007842
6300DAB5CB007E2E5A00C65B7B00D0466B00E45B6100FE040100F56C6100F02F
10009A746E00672F230068302400000000006A3328006B3429006A3429006E38
2D006F3A3000703C31006F3B31007A493F00A5857E00B29690007D4E4300FF46
0000FF4B0000FF700000FF730000FF8A0000C39E7300F88E0000E3840000D78D
0000C6A76A00EB9F0000CAAD7000D69A0000C5A80000BDB10000FFF60000E1D8
0000D2CA0000FFFD000087A80000C2E9930068A350002CA1000029880D001D85
00005CA547002F7E1B0020800E003AD61A0052FF2E00274F21000E98000019FF
070021FF0F0006C9000000FC000000F3000000E8000013FF130068AC6C006CBC
9E0000EBE8004BFFFF0004F5FC001DFAFF0000E7FF0000D5EE0009C8E20073D6
E40072D5E20000C6FF000DA9DD0000AAF4000095E2001475B000008BE5003F9F
F000006EDB000048E1005472DB007788F9000821DF006E7CF5005460D5006060
DE00FFFFFF000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000050505050505052584F4D5050505050505050
5050572425992C55535050505050505056242704020510323251505050505024
2809001644694737345450505050241408153F4A626D4B373156535151510311
174C5D5C666A49302F686868684E0C121F5E605F646C482A2B686E6B68590B13
22636F7274422D3B3C68676561500F1B1C7E80817B29414573775B5050500D23
1D7F7C79789236768275505050500620198370848F957A7D715050504650011E
211A18968E93957D5050504646469C0E9B070A918990955050503E384351979A
98948A87888B9550504039352E5050989885868D885050503D3A2E2E50505050
508C8C5050505050332E2E505050FC3F1E21F01F353DC00F7374800F8F8D0000
646400006EE20000E2E20001E2E200072827000F7175001D777700388F890070
646400616EE281C3E2E2E7C7E2E2280000003000000060000000010020000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000054061F185107264A5305233051072605000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000055051D124F072C52351969B5203180EE480F36B655041F4D5107260A0000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000055051D0E5007
2A4B391561AB221EA9F31D17D2FF0C3FA8FF143C91FF3F1745D155041F675206
2516000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000054051E0B510727423C1459A0231F
A3EF1E15D4FF2703E3FF2801DDFF1338A4FF103AAAFF113AA4FF34215CE55108
257B520725140000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000054051E085206243A3E135296241F9BE91D17D0FF2604
E1FF2A00E2FF2900E1FF2704DAFF1433AAFF182BB3FF1629B6FF112DB2FF3817
5DCE55051F2C0000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000054061F06540520334211498B261E95E31D19CEFF2506E1FF2A00E3FF2900
E0FF2900DFFF2900E0FF2705DBFF152DADFF1C1BB9FF1E15BCFF181EC5FF331C
68D355041D2B00000000510825274D0721464F07221F51072601000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000053061F055405
1F2F43104585291D8DDD1D19CAFF2407E1FF2A00E3FF2900E0FF2900DFFF2900
DFFF2900E0FF2900DFFF2401D7FF0E17BDFF1F08CFFF230DD1FF1B1DCDFF321E
60D34F05144C54062F5F90058BCD8E0C86E454082B9F4B071D435107260A0000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000005306200354051F29450E427E2A1D
89D81D1BC7FF2309E0FF2A00E3FF2A00E0FF2900DFFF2900DFFF2900E0FF2900
DEFF2600DAFF1C00DCFF2E18B3FF856045FF301DBFFF1C00E8FF1B0EDAFF351B
6CED7F0267D4C201C7FBF100F7FFDD05E9FFB00CB7FF700954CE4D071F615107
260D000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000005306210354051E25470D40762C1C84D31D1CC3FF230B
DFFF2A00E3FF2A00E0FF2900DFFF2900DFFF2900E0FF2900DEFF2500DAFF1D00
DBFF220EC8FF593A7AFFB5891FFFBD7C00FFC9AC11FF745870FF1F1DBEFF7417
C2FFFA00FAFFFF00FFFFFF00FFFFDA00DFFFD702E3FFC10AD1FF6B0854C64D07
1F2A000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00005306210155041E20480C3B6F2E1B7DCD1D1DBFFF220CDEFF2900E3FF2A00
E1FF2900DFFF2900DFFF2900E0FF2900DFFF2500DBFF1B02DAFF2509CAFF4D2B
8CFF935C38FFAB7A29FFD6B005FFBD7C00FFE3C200FFE1B700FFA68816FFB015
DCFFFF00FFFFFF00FFFFFD00FDFFCE01D7FFCA03D4FFC502D7FF720469D84C07
1D31000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000005505
1D1A4B0A3565311A77C61E1FBAFF210EDCFF2900E3FF2A00E1FF2900DFFF2900
DFFF2900E0FF2900DFFF2600DBFF1C01DAFF240BCAFF6B1386FFD20A29FFD83F
00FFC2840CFFD0A307FFD8B102FFBA7600FFD5AA00FFD5AF00FFD3950BFFF906
EFFFFF00FFFFFD01FDFFF003F4FFC403CFFFC601D0FFC100D1FF6F0464D54C07
1D31000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000005206260F4E0A2C5F3419
6EBD1F1EB5FD2010DAFF2900E2FF2A00E1FF2900DFFF2900DFFF2900E0FF2900
DFFF2500DAFF1D00DBFF2309CBFF5D1390FFC01238FFFF0A00FFFF0000FFD53E
00FFD0A001FFD6AD02FFD4AB01FFB77200FFD2A600FFD0A700FFCE8E10FFFB07
EFFFF601FAFFF304F5FFF501F7FFC300CDFFBF00CBFFBA00CBFF6E0463D54C07
1D31000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000029168F9B221EAAFE2011
DAFF2801E3FF2A00E1FF2900DFFF2900DFFF2900E0FF2900DFFF2500DBFF1C00
DCFF2900D4FF5C0BA3FFAF2445FFF71308FFFF0E00FFFF0D00FFFF0700FFD541
00FFD4A200FFD9B300FFD1A501FFB77000FFCC9B00FFCA9B00FFC6810FFFEE09
E6FFF701FBFFFF00FFFFFB00FCFFBC00C8FFB800C4FFB400C6FF6E0463D54D07
1D31000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000181FBBF92602D9FF2A00
E0FF2900E0FF2900DFFF2900E0FF2900DFFF2800D8FF2100D7FF2C00D0FF6408
9EFFAF1B52FFEB2B11FFFF2700FFFF1D00FFFC1E00FFFB1F00FFFF1600FFD543
00FFD5A700FFD9B300FFD5A900FFB77000FFCD9A00FFCC9C00FFC1760FFFF804
EFFFFF00FFFFFF00FFFFFA00FBFFB500C2FFB000BEFFAE00C1FF6C0462D54D07
1D31000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000001C21BEF02A00DEFF2500
D1FF2800D9FF2900DFFF2800D9FF2600D2FF2100DAFF4903BAFFB5194BFFE32C
19FFFB3200FFFE3000FFFA2F00FFF93100FFF93100FFFA2F00FFFD2500FFD646
00FFDBB700FFDFBE00FFD7AE00FFB87100FFCD9D00FFCE9E00FFBF720EFFFA05
F0FFFF00FFFFFF00FFFFF900FAFFAE00BCFFA900B8FFA700BCFF6C0461D54D07
1D31000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000001C21BDF02B00E5FF2900
DEFF2600D3FF2500CEFF2600D5FF2800DCFF1B00EFFF8E0676FFFF3700FFFB42
00FFF94400FFF74400FFF74400FFF84100FFF83D00FFF83F00FFFB3600FFD649
00FFE5D000FFEAD300FFDCB800FFB66F00FFCC9900FFCD9D00FFBC6D0EFFFA05
F0FFFE00FFFFFA02FBFFEE03F1FFA601B5FFA100B1FFA000B6FF6B0461D54D07
1E3000000000490029114900292E490029314900293049002930490029304900
2930490029314B01282D5006261500000000000000001C21BDF02B00E4FF2900
DFFF2800DDFF2600D2FF2900E1FF2900DFFF1A00EFFF94066FFFFF4C00FFF74D
00FFF65200FFF64F00FFF74D00FFF74D00FFF65200FFF65600FFF84900FFD64B
00FFF1EE00FFF6EA00FFDFBD00FFB66E00FFC79000FFC89200FFBA680EFFF408
EBFFF202F9FFEB06F0FFDA08E3FF9C01ADFF9A00ABFF9900B0FF6A0460D54B05
1F2D5F16210F873E13A68A4213D3894113D6894013D6894013D6894013D68940
13D68A4113D67B3116D0510726864F052723000000001C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1A00EFFF930670FFFF6000FFF465
00FFF55700FFF65400FFF46300FFF46600FFF36600FFF36800FFF65800FFD94F
00FFF3F400FFE3C700FFCA9300FFBD7D00FFB97500FFC18700FFB6640DFFE50C
E0FFE106EDFFD90BE3FFC60DD3FF9301A7FF9200A6FF9300ABFF69045FD54B05
1F2B5B112218CE8F00FEEDB900FFEFBE00FFF0BF00FFEFBE00FFEFBE00FFF1C0
00FFEBB800FFBD7500FF8A400FF251072684500627141C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1A00EFFF930870FFFF7100FFF17B
00FFF27400FFF36A00FFF17900FFF17800FFF27800FFF17B00FFF66E00FFDE4D
00FFD3B000FFD8B400FFDDBB00FFE2C600FFDBBB00FFC9A100FFB96A0FFFD50D
D6FFD00BDFFFC90FD6FFB511C6FF8C01A1FF8B009FFF8D00A6FF68045ED54C06
1F2B53062415CF9C02F2F6DA00FFEECA00FFEECC00FFEECC00FFEECC00FFF0CE
00FFEAC300FFC17C00FFC27B00FF793017C84B0128271C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1A00EFFF930970FFFF8200FFEF8E
00FFEF8800FFF17B00FFF08B00FFEF8C00FFEF9100FFF98C00FFF45E00FFB067
00FFD8C500FFFFF600FFF6F000FFF9FC00FFE7CA09FFD47258FFC522ACFFC80B
DAFFBE10CFFFB613C9FFA413B8FF86019BFF85009AFF8700A2FF68045ED54C06
1F2B53062416D3AA02F6FFFE00FFF1DE00FFF6E900FFF9EF00FFF9EE00FFFAF1
00FFF2E100FFCE8F00FFD49200FF813816CC4A0028291C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1A00EFFF930A70FFFE9200FFED9F
00FFEE9900FFEF8900FFEDA300FFF69D00FFFC7400FFD05000FF666100FF207A
00FF3B7A00FF9A9801FFE5B714FFDE7565FFCB22BBFFC605E1FFC00CD9FFB513
C8FFAC15C1FFA114BBFF9A16B1FF7A0091FF7E0095FF83009EFF67045DD54C06
1F2E55092409C28903D4DFB500FFD6A700FFD8AB00FFD9AF00FFD9AF00FFDAB2
00FFD4A800FFCF8E00FFE7AB00FF833B16CC490028291C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1A00EFFF930B70FFFC9F00FFEBAF
00FFECAD00FFF69500FFFB8100FFCE5E00FF6D6D00FF209300FF0E9E00FF237B
00FF1E7B00FF2B700DFFC314C3FFCA03E5FFBC0BD4FFB513C8FFAC14C1FF9F12
B9FF9D16B6FFB62ACAFFD931E1FFBB24C7FF7E0194FF770095FF66045DD54E07
1E2F00000000762E1949D29201F5E6B000FFEEC000FFF0C900FFF2CE00FFF4D6
00FFF6DD00FFDAAF00FFDFA000FF863F15CD4900282A1C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1A00EFFF930B70FFFCAE00FFF4B5
00FFFB8400FFD35700FF697A00FF1BA300FF09B100FF13AD00FF18A100FF267D
00FF288600FF31790DFFB413C5FFB810CCFFAC14C2FFA011B9FF9E13B7FFB628
C9FFE24AE9FFFF5DFFFFFF68FFFFFF73FFFFDF51E5FF9F18B5FF64005CD54E05
1E350000000000000000732E1B41C58B03EAD3A602F2D4A902F2D4AC02F2D5AF
02F2D7B302F2D7B402F2C58A02F2813714A24A00290F1C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1900EFFF970D70FFFF7E00FFCA65
00FF6B7E00FF3A9B00FF05C100FF0EBD00FF14B400FF15AE00FF15AD00FF2784
00FF2D9100FF337F0CFFA218B5FFA20EBCFFA212BAFFBE2ECFFFE65DEDFFFF82
FFFFFF92FFFFFF99FFFFFF9FFFFFFFAAFFFFFFB7FFFFFF7CFFFE872874D64706
1A805203272D5107260200000000550B2412560B2419550B2419550A2419550A
2419550A2419560A2419580F2419540A250F000000001C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF1D00EFFF890A70FF7B7000FF11BC
00FF08CD00FF32B200FF0FC800FF11BD00FF12BC00FF0EC800FF0EC500FF298A
00FF319A00FF33840BFF9C19B0FFC63BD7FFE166E8FFFFA7FFFFFFC2FFFFFFC7
FFFFFFCBFFFFFFD7FFFFFFDDFFFFFFB8FFFFCE62C1C4783259A130760EEA2D6B
0BF84D1023AD5300274451072609000000000000000000000000000000000000
000000000000000000000000000000000000000000001C21BDF02B00E4FF2900
DFFF2800DCFF2600D3FF2900E0FF2900DFFF2A00EFFF2A3A70FF07CF00FF09D1
00FF13C600FF2BB800FF0EC900FF0CD300FF0ADC00FF09DD00FF0AD400FF2A90
00FF33A100FF3C8F0EFFF1A3ECFFFFE3FFFFF5CAF8FFFBE5FCFFFFF4FFFFFFFD
FFFFFFF7FFFFFFD1FFFFCA72BEC07D165C57460C1A54236C00DC1D9200FF1F96
02FF277406FF482821C553042741510726010000000000000000000000000000
000000000000000000000000000000000000000000001C21BDF02C00E4FF2A01
DFFF2901DCFF2701D3FF2A01E0FF2A01DFFF2B00EFFF243F70FF0ADF00FF04F0
00FF06E500FF0CD200FF07E700FF05EC00FF04ED00FF03F100FF09D800FF2C8E
00FF39AC00FF2E9109FFB193D7FFFFE5FFFFF7E4F6FFFEFCFFFFFFEFFFFFFDB5
FDFDC563B7B5781B574E4D002007440E183B2A7709E018A400FF19A001FF248D
06FF26B712FF399420FF510E2878510526050000000000000000000000000000
000000000000000000000000000000000000000000001E24BEF03103E4FF2F08
E0FF2D07DDFF2B06D4FF2E07E1FF2E08E0FF2F00F0FF284270FF08E800FF00FC
00FF02F800FF07E400FF02F700FF00FE00FF03F000FF0FCA02FF16BD06FF209F
02FF349600FF2B9A0CFF006BA3FF696EC8FFEC84F4FFF683F5FCBC42ACB37512
52444A001D03000000004D10224229810BE10FC300FF0FC100FF1AA001FF28BB
16FF50F34DFF4FAD39FF4D0C2276510426040000000000000000000000000000
000000000000000000000000000000000000000000002129BEF0370CE6FF3510
E1FF330FDEFF2F0DD5FF3511E2FF3410E1FF3607F1FF2C4671FF05ED00FF00FF
00FF00FF00FF03EE00FF04F501FF12D006FF25B913FF2ED423FF2CFB2BFF2BF9
2BFF2FBD17FF2C9416FF017BB1FF00669EFF2B65BBFF4D2A6CCE4D0017260000
0000000000004E102341248F0AE106E500FF06E100FF17AE02FF24C615FF56FF
58FF74E56BFF497329D94E062330000000000000000000000000000000000000
00000000000000000000000000000000000000000000252EBFF03F17E7FF3C1A
E3FF3917DFFF3515D6FF3C1BE3FF3C1AE2FF3E12F2FF2F4B71FF04ED00FF00FF
00FF01F800FF19C209FF37B423FF50CF43FF5CF859FF5DFF5EFF60FF61FF63FF
65FF5AF649FF32A62AFF0278B2FF006CAAFF0076AFFF29325AC755001D250000
0000500A243A21990BDE00FE00FF00FB00FF17B804FF23CE16FF55FF58FF7BEB
74FF547D37D95111283800000000000000000000000000000000000000000000
000000000000000000000000000000000000000000002933BFF04723E9FF4325
E4FF4020E0FF3C1DD8FF4425E4FF4324E3FF461DF4FF315170FF07EB03FF19D9
0FFF44B531FF62BC51FF85F382FF8EFF90FF91FF92FF94FF93FF83EF72FF5BC0
3DFF2C974FFF0D99B9FF0082C8FF0071AEFF007AB9FF2F345FC858001F254F0C
2435219A0BDA00FF00FF01F800FF1BB707FF25D51AFF54FF57FF7CEB76FF5680
39DA5112283B0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000002D38C0F04F2DEAFF4B30
E5FF462AE1FF4225D8FF4C2FE6FF4B2FE5FF4D28F4FF34566EFF3CAF13FF95D0
86FFBBF5B8FFA8EFA3FFC0FFC1FFC5FFC5FFA7EE99FF6BB955FF319251FF0F92
A8FF009BF1FF00A0FDFF0082C7FF0076B4FF007FC1FF303162C252111A51229A
0CD400FF00FF03F200FF1FB60CFF27DD1EFF54FF56FF7DED77FF567E3AD95111
2739000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000303CC0F05737EBFF5239
E7FF4C32E2FF472DD8FF5239E6FF5138E6FF5236EBFF4B43C4FF41577BFF7EAB
84FFC5EAB6FFCBECBFFFC2E7B4FF7DB466FF38764BFF088DB9FF009DF0FF009E
FBFF009DF0FF00A0F2FF0083C9FF007ABBFF0083C8FF332B62BC413E116F14C8
04FF0BE103FF29AD14FF2BDD22FF54FF56FF7EEE78FF577D3AD8510F27370000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000003341C1F05E42ECFF5942
E8FF533BE3FF4C35DAFF5943E8FF5841E7FF5842E6FF593FEDFF5A3DF3FF4C42
C3FF4E6388FF52884EFF396660FF2928A1FF172EB9FF009CF4FF00A6F2FF00A3
EFFF00A4EFFF00A7F3FF0086C8FF007EC2FF0088CEFF313462C6540A1D1D2C74
106B27B311FF29EB22FF49F845FF74E66AFF587C3BD3510C2635000000000000
00000000000000000000000000000000000000000000000000004F0722045107
260300000000000000000000000000000000000000003746C2F0654DEDFF614D
E9FF5944E5FF533EDBFF614DE9FF5F4CE8FF604CE8FF604CE8FF604CE8FF624A
EFFF6647F6FF3448B3FF1821B7FF2500DCFF182BBFFF01A5EBFF00AEF1FF00AC
F0FF00ACF0FF00B0F4FF008AC9FF0082C8FF008CD5FF303663C657001E230000
0000444E21683E521C884C552A894C4B27845111272500000000000000000000
00000000000000000000000000000000000000000000510727225908366D4E07
224051072605000000000000000000000000000000003B4CC2F06D58EFFF6857
EAFF604EE5FF5846DBFF6858EBFF6756EAFF6756EAFF6756EAFF6C56EDFF6759
E7FF435ECFFF1957B4FF0E3DB0FF2606D5FF1B27C1FF01AEEDFF00B8F2FF00B5
F1FF00B6F1FF00BAF5FF0090CAFF0086D0FF0092DDFF303866C656001D260000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000004C07201C8C0D87B5B10CBCFF5D09
3AB54D072033000000000000000000000000000000003E50C2F07561F0FF6F60
EBFF6556E6FF5D4EDCFF6F62ECFF6E60EBFF7360EEFF6E60EAFF4A63D0FF1D5D
BCFF0C3FD1FF0F1DF3FF0936D9FF0A46B6FF123FB5FF02B4EDFF00C2F3FF00BF
F2FF00BFF3FF00C5F7FF0096CDFF008AD6FF0097E4FF303865C656001D250000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000004C071F1B8A0F84B1E908F3FFF104F9FFA60F
A8FB4E0824954F07241D0000000000000000000000004155C3F07A6AF2FF7469
EDFF6B5CE7FF6354DEFF7A69F0FF7467EBFF4F66D3FF2564BDFF1F55CEFF2F3C
F3FF322DFFFF2A27FFFF231DFFFF1A21F8FF0B46C2FF00ADDAFF00CCF7FF00C8
F4FF00C7F3FF00CEF8FF009BCFFF008EDDFF009AEAFF303764C556001D250000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000004B071F18870F80AEEF09F6FFFE01FFFFD407DDFFC60F
D9FF920A85E94D08205D5107260300000000000000004256C4F07D6EF2FF786C
EDFF7260EAFF6656DEFF556AD7FF2B69BDFF326CCBFF5363F0FF5E59FFFF5452
FFFF4C4BFFFF4841FFFF3936FBFF1D3ADAFF066DC3FF00C3E6FF00D4F7FF00D1
F5FF00D4F7FF00DAFBFF009BCBFF0091E4FF009EF1FF303866C556001C250000
0000000000000000000000000000000000000000000000000000000000000000
0000000000004B071F17850F7DAAEC09F4FFFF02FFFFE007E8FFAA0ABCFFE010
E8FFD222D8FF54082F864F07230900000000000000004256C4F0816EF5FF786B
EFFF515AD7FF2A57B7FF427FC9FF7487EDFF8883FFFF7F7BFFFF7675FFFF736E
FFFF6460FCFF3A56DAFF1073BFFF00B0CFFF00D9F0FF00DDF8FF00DDF8FF00DE
F8FF00C8E8FF00A2CAFF0597BEFF0093D0FF009BEAFF2F3968CA56001C280000
0000000000000000000000000000000000000000000000000000000000000000
00004B071E15840F7BA6EB09F4FFFF01FFFFE508EDFFB80DC9FFEA1CEDFFFC51
FFFFC03ACCFD5D0A3D5F4E06220300000000000000004253C4F05E66E1FF326D
BFFF487DC4FF818CE0FFB4B1FFFFA8A4FFFF9D9CFFFF9C97FFFF8E89FCFF5B72
DCFF1C79C1FF00ADCEFF00E0EFFF00EBFBFF00E9FAFF00EAFBFF00D7EFFF00AF
D2FF21A7C9FF10C9DDFF01F4F8FF00E8F0FF00BDE0FF2E446BB156001C140000
0000000000000000000000000000000000000000000000000000000000004C07
1E15810E78A3EA09F2FFFF01FFFFE507ECFFB80EC9FFE92BEDFFFF70FFFFD55B
DFFC6C10557B4D0520090000000000000000000000002567B0F1609AC9FFB4CD
E9FFC9C3FCFFB0A8F0FFCAC9FFFFC7C3FFFFB9BAFFFF7B97E3FF2B83BFFF00B0
CCFF00DCEEFF00EAFBFF00F3FBFF00F2FCFF00DEF0FF02B4D4FF21ABCBFF3ED0
E2FF3AFAFEFF21FFFFFF14F2FCFF0FBBD4F92F5A7A9D51123229000000000000
00000000000000000000000000000000000000000000000000004B071E13800E
77A2E809F2FFFF01FFFFE506ECFFB90FCAFFE93DEDFFFF89FFFFD567DFFD6C10
557B4A031C05000000000000000000000000000000006AAECEF9EAF4FEFFFFFF
FFFFE2D9FDFFC7BEF1FFE7E6FFFF9BBFECFF3E7BB2F10577A3ED00E3EBFF00FC
FEFF00F0FCFF00EDFBFF00E3F0FF03B7D6FF1BA4C7FF51CFE2FF63FBFEFF58FF
FFFF3FF2FCFF2ABCD7FE2A688CB4441D40470000000000000000000000000000
000000000000000000000000000000000000000000004B071E127D0E739DE70A
F0FFFF02FFFFE505ECFFB912C9FFEA50EDFFFFA1FFFFD573DFFD6C10557B4A03
1B050000000000000000000000000000000000000000194E7F602C6896B967A9
CAF6A5C6EBFF97B3E4FF4F94BCF61E4371A33F09292D27627D8D00FFFFFF00FD
FEFF00E2F1FF06B6D7FF2DADCDFF62CEE2FF85F8FCFF8AFFFFFF6EF1FDFF45BA
D5FC36678CB0451F424754001E03000000000000000000000000000000000000
0000000000000000000000000000000000004B061E0F7E0E739BE70AF0FFFF02
FFFFE504ECFFB913CAFFEA62EDFFFFBAFFFFD57DE0FD6C10567C4A021B050000
000000000000000000000000000000000000000000000000000000000000281E
472D293563722B33647E34173C3C000000000000000028436A8900F0FAFF06C7
DBFF2AAED1FF64D2EAFF9CFBFFFFA8FFFFFF8AF1FCFF58B7D3FA3D648AAD461E
404353001F020000000000000000000000000000000000000000000000000000
000000000000000000000000000051072601850F8088E009EAFFFF01FFFFE404
EBFFBA15CAFFEA75EDFFFFD2FFFFD586E0FD6C0E567C4A021B05000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000002C3A626D0C9AC5FC4FB9
D7FF8AF2FEFF94F9FFFF8BF0FAFF55B4D1F73C6287A7451D3F3F52001E010000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000051072502960F999DE207EEFFCC00D7FFAF15
C1FFED8BF0FFFFE7FFFFD58CE0FD6D0E567C4A021B0500000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000500929034A355739406D
90964BABCDE948AACDF13D6185A1461B3D3B0000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000005809340AA90EB3B6BF21D1FFDA84
E1FFF7DFF9FFD492DCFF6F0F598049011A060000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000473658174645682200000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000700A5E10B62ACB95D276
DED1C45BD7EA871D7E6F49031909000000000000000000000000000000000000
00000000000000000000000000000000000000000000FFFFF87FFFFF0000FFFF
E03FFFFF0000FFFF801FFFFF0000FFFE000FFFFF0000FFF8000FFFFF0000FFE0
00087FFF0000FF8000003FFF0000FE0000001FFF0000F80000001FFF0000E000
00001FFF0000C00000001FFF0000000000001FFF0000000000001FFF00000000
00001FFF0000000000001FFF0000000000001003000000000000000100000000
0000000000000000000000000000000000000000000000000000000000000000
000010000000000000001800000000000000040100000000000003FF00000000
000001FF00000000000001FF00000000000801FF00000000003003FF00000000
002007FF0000000000000FFF0000000000001FFF0000000000003FFF00000000
00007F9F000000000020FF0F00000000003FFE0F00000000003FFC0700000000
003FF80300000000003FF00300000000003FE00300000000003FC00700000000
007F800F0000000001FF001F0000000003FE003F0000C3000FFC007F0000FF00
3FFC00FF0000FF01FFFE01FF0000FFE7FFFF03FF000028000000200000004000
0000010020000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000530622164311466C3F17479E5405
213D000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000054061F10460E3F6030138BCB2016CCFF103CA4FF3123
5ED9520823585206240700000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000054061D0B470E3B5733147FBF2213CAFF2603E6FF2803DFFF1431B0FF1232
B2FF2C2075EB5107263B00000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000055061B07490D
384F361473B32214C4FF2505E4FF2900E4FF2A00E2FF2502DDFF151CBDFF1D15
C5FF1C24ACFF480C254C5006231E5908355D4B071E2400000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000055061B044A0C354839136BAA2315
BFFD2506E4FF2900E4FF2A00E1FF2800E1FF2000E5FF2910C3FF463195FF2A0B
D0FF1A1BB4FB610B4BABAD02A5D6C507CDFF7C0A67C65207274A500725030000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000054051C024C0C3040391367A42417B9F92407E3FF2900
E5FF2A00E1FF2800E1FF1C00E5FF200AD1FF4A2791FF9A6527FFC58F04FF9271
4EFF3E2BA6FFDD03EDFFFF00FFFFE700EDFFCD06DEFF780864C84B071C170000
0000000000000000000000000000000000000000000000000000000000000000
0000000000004E0B2A373B12639C2418B4F42309E1FF2900E5FF2A00E1FF2700
E0FF1E00E4FF2306D2FF620696FF9D3C38FFCD9D00FFD3A301FFC48B00FFD3A9
0CFFC55378FFFB00FFFFFC01FDFFD402DCFFC901DAFF7E0471D54A071B1D0000
000000000000000000000000000000000000000000000000000000000000480A
3D2A3E125A952618ADEE230BDFFF2800E6FF2A00E1FF2700E1FF1F00E3FF2300
D9FF540D9EFFB71140FFFF0700FFE13E00FFD3AE00FFD0A200FFC48A01FFCFA5
08FFE5517BFFFC00FFFFF702F9FFD000D9FFBF00D0FF7A046CD24B071C1C0000
0000000000000000000000000000000000000000000000000000000000001C1F
B1E1230BD6FF2800E7FF2A00E2FF2900DFFF2600DCFF2800D5FF5508A9FFAE1A
52FFF62305FFFF1C00FFFD2A00FFDA4E00FFD3B300FFD1A400FFC18601FFCCA1
0AFFDD5074FFFE00FFFFFF00FFFFC900D2FFB400C6FF77046AD24C071C1C0000
0000000000000000000000000000000000000000000000000000000000001B21
BFF42900DEFF2800D8FF2800DAFF2500D8FF2A00D7FFAB1856FFEF330DFFFF35
00FFFC3800FFF94100FFFB4A00FFDB5700FFDCC600FFD0A300FFBF8201FFCA9F
07FFDC4776FFFF00FFFFFF01FFFFC100CBFFA800BDFF740467D24C071D1C0000
0000000000000000000000000000000000000000000000000000000000001C21
BDF02B00E5FF2800DAFF2700D5FF2500E3FF3700D2FFF0350AFFFE4D00FFF74D
00FFF66300FFF65D00FFF85E00FFDB5F00FFE4D900FFCA9B00FFB87500FFC69B
05FFD93C7AFFFC00FFFFEE05F2FFB002BEFF9D00B3FF6F0365D14D081D1B6A20
1E5272291B9271281B9371281B9272281B926F261C93540A245E4E04270A1C21
BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFEA4C0DFFF86700FFF46A
00FFF47A00FFF37A00FFF67400FFDE6600FFCDAB00FFCB9D00FFC28801FFBE8E
04FFCE3C70FFE501FBFFD10CDEFF9F05B0FF9300ABFF6C0263D04A041E1DB274
0ABBECBC00FFE6B600FFE6B500FFEABA00FFD19400FF90450DF3550B255B1C21
BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFE75F0EFFF38B00FFF287
00FFF18C00FFF58C00FFFD7700FFC96700FFCE9F00FFF5EB00FFEDE000FFD490
2EFFC7299CFFC709DFFFB611C8FF8E05A3FF8900A3FF690360D049001E1EBD90
0ABDFDEF00FFF0D700FFF2DC00FFF4E100FFDBAC00FFC78000FF6C231D8A1C21
BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFE5720EFFF0A500FFF397
00FFFD9200FFDD7A00FF976000FF317600FF5B8800FFD49F32FFDC568EFFC610
D4FFB80ED0FFA612BDFFA616BDFF9008A5FF7B0097FF66025DD14A021F14A267
0E98EAC300FFE5BF00FFE8C700FFEBCE00FFDDB000FFDB9C00FF70281D8C1C21
BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFE8830EFFFFAA00FFDF7E
00FF977600FF2E9500FF0CA400FF1D8800FF217D00FF94279BFFBD03DEFFA60C
BFFFA512BDFFC233D1FFED4DF2FFF354F5FFAE29C2FF6C0263D34C021F14560B
2408B1710ABBDCAB02F2DCB302F2DFBB02F2DFBF02F2C99002F26D231D741C21
BDF02B00E4FF2900DDFF2800D9FF2600E4FF3A01D1FFD4600EFF988500FF409B
00FF07BC00FF0DB900FF13B300FF239300FF2E8D00FF802A88FFB012CAFFC541
D4FFEE72F3FFFF99FFFFFFACFFFFFFB5FFFFFD89FBF37D3966D7451019765100
280D51072601580F241858102419580F241959102419570F24195208250A1C21
BDF02B00E4FF2900DDFF2800D9FF2800E4FF3003D1FF348D0EFF03D200FF1DC1
00FF0FC900FF0DCF00FF0AD600FF22A300FF339600FFAA73A1FFF8A8FAFFFED0
FEFFFFF1FFFFFFEBFFFFF7C7F5F5BE5FADA464324295248404EF297107FE4A1C
209D510328150000000000000000000000000000000000000000000000001D22
BDF02D00E4FF2A02DDFF2902DAFF2B01E4FF2907D1FF0AC10DFF03F300FF0BD9
00FF05EC00FF01F200FF07DD00FF229E00FF339B00FF889CA4FFF8DDFEFFFFDD
FFFFF1BFEEEBB961A8A16E0D482E40171450198F00E816A100FF24A90CFF3E9C
26FF510C274C0000000000000000000000000000000000000000000000002027
BEF03509E6FF310CDFFF300CDBFF330AE6FF3210D3FF0DC90DFF00FF00FF00F0
00FF04E800FF13D709FF23D117FF28D219FF33AD0DFF047578FF4564C7FF9F45
B2E3680C3C37000000004220184C16B405EE0ACD00FF1FBA0DFF55F350FF549C
3CEC4E072230000000000000000000000000000000000000000000000000262E
BFF04018E7FF3B19E1FF3A18DCFF3E19E8FF3D1ED5FF0AD00AFF00F100FF20CD
12FF4AC73BFF63EE5EFF6CFF6AFF62FC51FF40CC43FF0A7C94FF0072B3FF2035
5AC4550019084723204910CD05EF02F000FF1CC80FFF56FC54FF69B758ED5120
274E000000000000000000000000000000000000000000000000000000002B36
BFF04C2AEAFF4527E2FF4326DEFF4929EAFF432ED3FF2CB31FFF73D75FFF95DE
8CFFB5FFB3FFA4FB96FF72D06DFF32A072FF0999CBFF0083CCFF007AB9FF2C37
69C24C24166510CF06EA05EF00FF20CF15FF57FF56FF6BB55AED5120284F0000
000000000000000000000000000000000000000000000000000000000000313D
C1F05839ECFF4E34E4FF4D33E0FF533AE9FF503AE0FF4A5398FF95B2A9FFAFDB
9DFF96BD97FF447673FF0591C9FF009CF5FF00A2FCFF0085CAFF0080C3FF2E37
6CBF3762099A11DC05FF2AD81FFF57FF57FF6CB45BEB511E284D000000000000
0000000000000000000000000000000000000000000000000000000000003645
C2F06349EEFF5842E6FF5741E1FF5D4AE8FF5D48E9FF5E43F2FF5C44E0FF405C
8BFF1F20A2FF171FC7FF00A1F1FF00AAF2FF00ADF4FF008ACAFF0086CDFF2D3D
70C3530719183B6E1D8A42A12FBC5D8B45BA5220294800000000000000000000
0000000000000000000052082C2B5007262D0000000000000000000000003B4C
C3F06F5AF0FF6350E7FF604FE2FF6A59ECFF6B57ECFF5C51DBFF4451D2FF1F41
CDFF1225C3FF1B28C2FF02AFEDFF00B9F3FF00BCF6FF0091CCFF008DD8FF2C42
73C657001C130000000051002401000000000000000000000000000000000000
00000000000058093534AA0AAEDB7D0969C94A071C2600000000000000004053
C3F07968F1FF6B5DE9FF6D5BE7FF6D63E8FF4550C9FF2F54C7FF1F3FE0FF1F21
FCFF1828EDFF0E43BFFF02B7E7FF00C8F5FF00CCF9FF009ACFFF0092E2FF2C44
76C556001B140000000000000000000000000000000000000000000000000000
0000540A3031BD0BBCD7F104FAFFC10BCEFF650845994D07200A000000004356
C4F0826FF5FF6D5FE9FF4E5AD0FF3C5DC3FF455FD4FF5C62F7FF5A53FDFF4841
FBFF273EE6FF087DD1FF00CDEBFF00D8FAFF00D1F4FF0196C7FF0095E8FF2C46
7AC856001A15000000000000000000000000000000000000000000000000530A
2E2EB90BB7D5FF04FFFFCB06D7FFE21CEEFF9C1B8FD849051B1B000000003D51
C2F0606AE1FF4A64CCFF546BCCFF727AEBFF7A7EF3FF7378F2FF566EE4FF1C88
D0FF01C6DEFF00EBF9FF00E0F7FF02C8E6FF10B2D2FF03C7DCFF00C5ECFF2B4B
78BF57001A0F000000000000000000000000000000000000000052092D2BB70B
B5D3FF03FFFFD207DEFFE935EFFFEB59EFFF7518607B4C051F04000000004276
C0FC6875DAFF676CE3FF7078EDFF727BF0FF718CEAFF3496D1FF01C7DDFF00EF
F9FF00EFF9FF00D1E7FF1ABDD9FF3DD7E7FF32FBFFFF14E1EEFF24819AB64919
3A39000000000000000000000000000000000000000051092C29B50CB3D1FF02
FFFFD308DDFFE94EEFFFED78F1FF7820637D4A021C0100000000000000003E6F
A0A88290E4F37D85F2FF7E92EBFF5E7AB3D6263D698F00DAE3F500FBFEFF02D6
EAFF26C1DAFF5BD1E4FF71F9FFFF54DFECFE398AA6BD43274A50000000000000
00000000000000000000000000000000000054092E27B40CB2CFFF01FFFFD309
DEFFE968EFFFED94F0FF7823637D000000000000000000000000000000000000
00003B0F3402363D6F083734651C4702220B4E08270C03BAD3FC26D0E5FF6BDB
EEFF97FBFFFF81DEEBFC5286A4B94625484C51001E0100000000000000000000
00000000000000000000000000004F082504A70CA7C1F500FAFFD20DDDFFE982
EFFFEDADF0FE7924637D00000000000000000000000000000000000000000000
0000000000000000000000000000000000004F092806314D778460ABC6D774CF
E2F25384A1B64524474700000000000000000000000000000000000000000000
00000000000000000000000000004E072201940A8C81C614D6FFDE89E6FFEDC5
EEFF7C2769860000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000004C15360C4A34
561D4E001E010000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000A829B47BD271E5DF8C2B
838649001A06000000000000000000000000000000000000000000000000FFF8
7FFFFFE01FFFFF801FFFFE0003FFF80000FFE00000FFC00000FF000000FF0000
00FF000000FF0000000000000000000000000000000000000000000000000000
003F0000003F0000203F0000007F000000FF000001FF000003E700002FC30000
3F8100003F0100003E0100007C030001F80F8003F01FF81FF03FFE3FFC3F2800
0000100000002000000001002000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000502EB6FF3007
A8D70821DFFF252050A600000000000000000000000000000000000000000000
000000000000000000000000000000000000502EB6FF300F92C71403FAFF0B00
FFFF1B11D1FF1E13A4EE9806A4FF9806A4FF0000000000000000000000000000
00000000000000000000502EB6FF330F85BE1605F4FF0200FFFF2500E6FF7842
63FFC5A800FFC65B7BFFFF00FFFFA901AEFF0000000000000000000000000000
000000000000502EB6FF2408DFFF1600FFFF2300EBFF870776FFFE0401FFF88E
00FFD2CA00FFF56C61FFFF00FFFF9600A2F90000000000000000000000000000
0000000000001D14DFFF2000F3FF2200E3FFF02F10FFFF4B00FFFF4600FFEB9F
00FFBDB100FFE45B61FFEA00FFFF7B008FE9D69A00FFD69A00FFD69A00FFD69A
00FF000000002213D1FF1F00EFFF2C00E1FFFF7000FFFF8A00FFFF7300FFD78D
00FFE1D800FFD0466BFFAF00E3FF5F0084D7D69A00FFFFFD00FFFFF600FFD69A
00FF000000002112D0FF2000EFFF3400E4FFE38400FF87A800FF2CA100FF1D85
00FFC04093FFE243FCFFFE82FFFF9A28A1E3D69A00FFCAAD70FFA777129A9A5C
139500000000210FCFFF2800EFFF2800E3FF06C900FF00F300FF00E800FF0E98
00FFD19BE6FFFFD8FFE5DAB5CBFF218906ED20800EFF00000000000000000000
0000000000002C1CD1FF3801F1FF310BDFFF00FC00FF19FF07FF52FF2EFF3AD6
1AFF1475B0FFC2A2C3FF009400A513FF13FF58AE46E500000000000000000000
0000000000003F35D4FF5026F0FF4428E1FF68AC6CFFC2E993FF6CBC9EFF0DA9
DDFF006EDBFF145B22C321FF0FFF67B355DD0000000000000000000000000000
000000000000514FD9FF6A4CF0FF6B4BF3FF5B40E8FF2A14B0FF0048E1FF00C6
FFFF008BE5FF006EDBFF21FF0FFF00000000000000000000000073035C890000
0000000000006060DEFF6D62E7FF5460D5FF4A3FEEFF210FF4FF0095E2FF00E7
FFFF00AAF4FF006EDBFF000000000000000000000000BE00B7CAFF0EFFFFB890
A9FF000000005472DBFF6E7CF5FF7788F9FF3F9FF0FF00D5EEFF04F5FCFF1DFA
FFFF09C8E2FF006EDBFF0000000000000000B500ABC1FF22FFFFDC52E0FED88C
E3FF00000000000000007788F9FF7788F9FF00EBE8FF4BFFFFFF72D6E4FD1DFA
FFFF000000000000000000000000AE00A7C9FF3CFFFFD88CE3FFD88CE3FF0000
00000000000000000000000000000000000073D6E4FF73D6E4FF000000000000
0000000000000000000000000000B817C39FD687E2F4D88CE3FF000000000000
000000000000FFFFB1E1F87FD6FFE01FE7FF801FE2FF001FDFFF0001DCFF0001
D5FF0001A9FF000F52FF000F05FF001F00FF003B00FF007100FF006100FF81C3
00FFE7C701FF
</a:Content>
</o:PictureFile>
</c:PictureFiles>
<c:Categories>
<o:ProfileTargetItem Id="o3">
<a:ObjectID>F1248F56-CEE5-49B5-9481-2C78CD001E39</a:ObjectID>
<a:Name>Profile</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252930803</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>This category defines the various concepts used to model the mapping with an Excel file
The global script tab contains all functions used to perform the import.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o4">
<a:ObjectID>D8CCD6F7-A519-4682-957B-6497E11CAE1D</a:ObjectID>
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>This category stores common templates</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o5">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:ObjectID>E80BBA0C-E5C1-4A68-93DA-BB9D256D17D0</a:ObjectID>
<a:Name>Templates</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252048425</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o6">
<a:ObjectID>A20648E9-3D59-4A65-B498-3693CA30EB7D</a:ObjectID>
<a:Name>Locale</a:Name>
<a:CreationDate>1252047863</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253114760</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o7">
<a:ObjectID>112FE9F8-50C4-40ED-AEEA-DA9CE2AAB183</a:ObjectID>
<a:Name>txtColnTypeStandard</a:Name>
<a:TemplateTargetItem.Value>Standard</a:TemplateTargetItem.Value>
<a:CreationDate>1252047863</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252048425</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o8">
<a:ObjectID>C8E63ACA-C344-4062-9BD0-E416A7E8B378</a:ObjectID>
<a:Name>txtColnTypeReference</a:Name>
<a:TemplateTargetItem.Value>Reference</a:TemplateTargetItem.Value>
<a:CreationDate>1252047863</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252048425</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o9">
<a:ObjectID>5B600F64-3005-4C1F-A778-B4C9792A0A3C</a:ObjectID>
<a:Name>txtColnTypeRelationship</a:Name>
<a:TemplateTargetItem.Value>Relationship</a:TemplateTargetItem.Value>
<a:CreationDate>1252048425</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252048682</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o10">
<a:ObjectID>29AFEB27-E396-4D80-8438-919E59D90FDE</a:ObjectID>
<a:Name>txtColnTypeAttribute</a:Name>
<a:TemplateTargetItem.Value>Attribute</a:TemplateTargetItem.Value>
<a:CreationDate>1252048425</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252048682</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o11">
<a:ObjectID>D938DF5F-20F7-490C-9EC3-ADDD53FE8E14</a:ObjectID>
<a:Name>txtColnTypeList</a:Name>
<a:TemplateTargetItem.Value>List of associated objects</a:TemplateTargetItem.Value>
<a:CreationDate>1252048425</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252048682</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o12">
<a:ObjectID>06D7B80E-0B84-4B79-8E43-53054A87C328</a:ObjectID>
<a:Name>txtNewObjectAttribute</a:Name>
<a:TemplateTargetItem.Value>&lt;New Object Attribute&gt;</a:TemplateTargetItem.Value>
<a:CreationDate>1252310640</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252310779</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o13">
<a:ObjectID>53398A55-7455-4078-A549-22885A6A4BBD</a:ObjectID>
<a:Name>txtIdtfName</a:Name>
<a:TemplateTargetItem.Value>Name</a:TemplateTargetItem.Value>
<a:CreationDate>1252312993</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265199907</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o14">
<a:ObjectID>3E7B677B-0B9A-4588-8681-0B4FD9EBE6E9</a:ObjectID>
<a:Name>txtIdtfCode</a:Name>
<a:TemplateTargetItem.Value>Code</a:TemplateTargetItem.Value>
<a:CreationDate>1252312993</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265199907</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o15">
<a:ObjectID>5C7B8FD3-00CC-44A6-A6B2-F5ECADCF25B2</a:ObjectID>
<a:Name>txtIdtfQName</a:Name>
<a:TemplateTargetItem.Value>Qualified name</a:TemplateTargetItem.Value>
<a:CreationDate>1252312993</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252313704</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o16">
<a:ObjectID>1750CF9E-3836-4AF6-B15E-0652F0E4AF1E</a:ObjectID>
<a:Name>txtIdtfQCode</a:Name>
<a:TemplateTargetItem.Value>Qualified code</a:TemplateTargetItem.Value>
<a:CreationDate>1252312993</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252313704</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o17">
<a:ObjectID>FCD52213-B44D-4F22-A235-84E989B61993</a:ObjectID>
<a:Name>txtColnDttpString</a:Name>
<a:TemplateTargetItem.Value>String</a:TemplateTargetItem.Value>
<a:CreationDate>1253113367</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253114760</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o18">
<a:ObjectID>B2EB0510-59D5-4707-9041-394C49EE87B4</a:ObjectID>
<a:Name>txtColnDttpObject</a:Name>
<a:TemplateTargetItem.Value>Object</a:TemplateTargetItem.Value>
<a:CreationDate>1253113367</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253114760</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o19">
<a:ObjectID>0923F458-ADBA-4184-95C3-500517432D26</a:ObjectID>
<a:Name>txtColnDttpBoolean</a:Name>
<a:TemplateTargetItem.Value>Boolean</a:TemplateTargetItem.Value>
<a:CreationDate>1253113367</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253114760</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o20">
<a:ObjectID>657FD004-4FDF-4F7C-8CD9-5C47DEAF4A4D</a:ObjectID>
<a:Name>Utils</a:Name>
<a:CreationDate>1252047863</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252048425</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o21">
<a:ObjectID>A7007A69-6F0B-4537-86EF-BB41E0C53E13</a:ObjectID>
<a:Name>sortStringCollection</a:Name>
<a:TemplateTargetItem.Value>.vbscript(%*@1%)

   Dim inputStr, outputStr
   inputStr = ScriptInputArray(0)
   outputStr = inputStr
   
   &#39; Parse the input string
   set dict = CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
   if not dict is nothing then
      Dim pos, vale, key, pos2
      pos = instr(inputStr, &quot;;&quot;)
      while pos &gt; 0
         vale = left(inputStr, pos - 1) 
         if not vale = &quot;&quot; then
            key = vale
            pos2 = instr(vale, vbTab)
            if pos2 &gt; 0 then
               key = mid(vale, pos2 + 1)
            end if
            if not dict.Exists(key) then
               dict.Add key, vale
            end if
         end if
         inputStr = mid(inputStr, pos + 1)
         pos = instr(inputStr, &quot;;&quot;)
      wend   
      if dict.Count &gt; 0 then
         SortDictionary dict
         outputStr = &quot;&quot;
         For each key in dict.Keys
            vale = dict.item(key)
            if not outputStr = &quot;&quot; then
               outputStr = outputStr + &quot;;&quot; + vale
            else
               outputStr = vale
            end if
         Next
      end if
      set dict = nothing
   end if

   ScriptResult = outputStr
   
Const dictKey  = 1
Const dictItem = 2
   
Function SortDictionary(objDict)
  &#39; declare our variables
  Dim strDict()
  Dim objKey
  Dim strKey,strItem
  Dim X,Y,Z
  &#39; get the dictionary count
  Z = objDict.Count
  &#39; we need more than one item to warrant sorting
  If Z &gt; 1 Then
    &#39; create an array to store dictionary information
    ReDim strDict(Z,2)
    X = 0
    &#39; populate the string array
    For Each objKey In objDict
        strDict(X,dictKey)  = CStr(objKey)
        strDict(X,dictItem) = CStr(objDict(objKey))
        X = X + 1
    Next
    &#39; perform a shell sort of the string array
    For X = 0 to (Z - 2)
      For Y = X to (Z - 1)
        If StrComp(strDict(X,1),strDict(Y,1),vbTextCompare) &gt; 0 Then
            strKey  = strDict(X,dictKey)
            strItem = strDict(X,dictItem)
            strDict(X,dictKey)  = strDict(Y,dictKey)
            strDict(X,dictItem) = strDict(Y,dictItem)
            strDict(Y,dictKey)  = strKey
            strDict(Y,dictItem) = strItem
        End If
      Next
    Next
    &#39; erase the contents of the dictionary object
    objDict.RemoveAll
    &#39; repopulate the dictionary with the sorted information
    For X = 0 to (Z - 1)
      objDict.Add strDict(X,dictKey), strDict(X,dictItem)
    Next
  End If
End Function
   

.endvbscript</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265121106</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o22">
<a:ObjectID>0CD74B48-1D26-4818-AAF4-4391B1868979</a:ObjectID>
<a:Name>ExtendedObject</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252945636</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:EnableSelectionGeneration>1</a:EnableSelectionGeneration>
<c:Categories>
<o:TypedCategoryTargetItem Id="o23">
<a:TypePublicName>StereotypeTargetItem</a:TypePublicName>
<a:ObjectID>25C46CA9-5255-413E-AF44-9D94BBE3BA1F</a:ObjectID>
<a:Name>Stereotypes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:StereotypeTargetItem Id="o24">
<a:ObjectID>460D291E-9BA2-4E0E-93C2-F35B7C69C438</a:ObjectID>
<a:Name>GenericImport</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252945988</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>An abstract stereotype that factorizes all extensions common to all import features.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Generic Import</a:Label>
<a:Abstract>1</a:Abstract>
<c:Categories>
<o:TypedCategoryTargetItem Id="o25">
<a:TypePublicName>StereotypeTargetItem</a:TypePublicName>
<a:ObjectID>E8827FFC-0B89-4256-B30C-454A6D516569</a:ObjectID>
<a:Name>Stereotypes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:StereotypeTargetItem Id="o26">
<a:ObjectID>760AE8E9-0112-4B8A-99EA-38C48BC07EEA</a:ObjectID>
<a:Name>ExcelImport</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>An object that stores all mapping information to import the Excel file data</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Excel Import</a:Label>
<a:PluralLabel>Excel Imports</a:PluralLabel>
<a:EnableTool>1</a:EnableTool>
<a:ToolIcon>0D0000000800000008000000424D7E000000000000003E000000280000001000
0000100000000100010000000000400000000000000000000000000000000000
000000000000FFFFFF00FFFF0000F87F0000E01F0000801F0000001F00000001
00000001000000010000000F0000000F0000001F0000003B0000007100000061
000081C30000E7C70000424D3605000000000000360400002800000010000000
100000000100080000000000000100000000000000000000000000008F000000
000000000048E100006EDB00008BE500009400000095E20000AAF40000C6FF00
00D5EE0000E7FF0000E8000000EBE80000F3000000FC00000200FF0004F5FC00
06C900000821DF0009C8E2000B00FF000DA9DD000E98000013FF13001403FA00
145B22001475B0001600FF001605F40019FF07001B11D1001D14DF001D850000
1DFAFF001E13A4001F00EF002000EF002000F30020800E00210FCF00210FF400
2112D0002189060021FF0F002200E3002213D1002300EB002408DF002500E600
252050002800E3002800EF002A14B0002C00E1002C1CD1002CA100003007A800
300F9200310BDF00330F85003400E4003801F1003AD61A003F35D4003F9FF000
4428E1004A3FEE004BFFFF005026F000502EB600514FD90052FF2E005460D500
5472DB0058AE46005B40E8005F0084006060DE0067B3550068AC6C006A4CF000
6B4BF3006CBC9E006D62E7006E7CF50072D6E40073035C0073D6E4007788F900
784263007B008F008707760087A800009600A2009806A4009A28A1009A5C1300
A7771200A901AE00AE00A700AF00E300B500AB00B817C300B890A900BDB10000
BE00B700C0409300C2A2C300C2E99300C5A80000C65B7B00CAAD7000D0466B00
D19BE600D2CA0000D687E200D69A0000D78D0000D88CE300DAB5CB00DC52E000
E1D80000E243FC00E3840000E45B6100EA00FF00EB9F0000F02F1000F56C6100
F88E0000FE040100FE82FF00FF00FF00FF0EFF00FF22FF00FF3CFF00FF460000
FF4B0000FF700000FF730000FF8A0000FFD8FF00FFF60000FFFD000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000004437113000000000000000
000000443817131D215D5D000000000000443A1B0E2F586C6D83610000000000
442E1A2D5A8180717F835C00000000001E242B7E88877D677B7C597373737300
2C2234898B8A74786F634B738E8D730028233B7A5B361F6979825E736E605F00
263231100C0A15708C76292500000000353C390D1C463D196A04164900000000
3E43404E6B511402182A4D0000000000454F504A33010703022A000000550000
4C5247412705090602000000688466004853573F080F20120200006485777500
0057570B42542000000062867575000000000056560000000000657275000000
0D0000001000000010000000424DBE000000000000003E000000280000002000
0000200000000100010000000000800000000000000000000000000000000000
000000000000FFFFFF00FFF87FFFFFE01FFFFF801FFFFE0003FFF80000FFE000
00FFC00000FF000000FF000000FF000000FF0000000000000000000000000000
000000000000000000000000003F0000003F0000203F0000007F000000FF0000
01FF000003E700002FC300003F8100003F0100003E0100007C030001F80F8003
F01FF81FF03FFE3FFC3F424D3610000000000000360000002800000020000000
2000000001002000000000000010000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000530622164311466C3F17479E
5405213D00000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000054061F10460E3F6030138BCB2016CCFF103CA4FF
31235ED952082358520624070000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000054061D0B470E3B5733147FBF2213CAFF2603E6FF2803DFFF1431B0FF
1232B2FF2C2075EB5107263B0000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000055061B07
490D384F361473B32214C4FF2505E4FF2900E4FF2A00E2FF2502DDFF151CBDFF
1D15C5FF1C24ACFF480C254C5006231E5908355D4B071E240000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000055061B044A0C354839136BAA
2315BFFD2506E4FF2900E4FF2A00E1FF2800E1FF2000E5FF2910C3FF463195FF
2A0BD0FF1A1BB4FB610B4BABAD02A5D6C507CDFF7C0A67C65207274A50072503
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000054051C024C0C3040391367A42417B9F92407E3FF
2900E5FF2A00E1FF2800E1FF1C00E5FF200AD1FF4A2791FF9A6527FFC58F04FF
92714EFF3E2BA6FFDD03EDFFFF00FFFFE700EDFFCD06DEFF780864C84B071C17
0000000000000000000000000000000000000000000000000000000000000000
00000000000000004E0B2A373B12639C2418B4F42309E1FF2900E5FF2A00E1FF
2700E0FF1E00E4FF2306D2FF620696FF9D3C38FFCD9D00FFD3A301FFC48B00FF
D3A90CFFC55378FFFB00FFFFFC01FDFFD402DCFFC901DAFF7E0471D54A071B1D
0000000000000000000000000000000000000000000000000000000000000000
480A3D2A3E125A952618ADEE230BDFFF2800E6FF2A00E1FF2700E1FF1F00E3FF
2300D9FF540D9EFFB71140FFFF0700FFE13E00FFD3AE00FFD0A200FFC48A01FF
CFA508FFE5517BFFFC00FFFFF702F9FFD000D9FFBF00D0FF7A046CD24B071C1C
0000000000000000000000000000000000000000000000000000000000000000
1C1FB1E1230BD6FF2800E7FF2A00E2FF2900DFFF2600DCFF2800D5FF5508A9FF
AE1A52FFF62305FFFF1C00FFFD2A00FFDA4E00FFD3B300FFD1A400FFC18601FF
CCA10AFFDD5074FFFE00FFFFFF00FFFFC900D2FFB400C6FF77046AD24C071C1C
0000000000000000000000000000000000000000000000000000000000000000
1B21BFF42900DEFF2800D8FF2800DAFF2500D8FF2A00D7FFAB1856FFEF330DFF
FF3500FFFC3800FFF94100FFFB4A00FFDB5700FFDCC600FFD0A300FFBF8201FF
CA9F07FFDC4776FFFF00FFFFFF01FFFFC100CBFFA800BDFF740467D24C071D1C
0000000000000000000000000000000000000000000000000000000000000000
1C21BDF02B00E5FF2800DAFF2700D5FF2500E3FF3700D2FFF0350AFFFE4D00FF
F74D00FFF66300FFF65D00FFF85E00FFDB5F00FFE4D900FFCA9B00FFB87500FF
C69B05FFD93C7AFFFC00FFFFEE05F2FFB002BEFF9D00B3FF6F0365D14D081D1B
6A201E5272291B9271281B9371281B9272281B926F261C93540A245E4E04270A
1C21BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFEA4C0DFFF86700FF
F46A00FFF47A00FFF37A00FFF67400FFDE6600FFCDAB00FFCB9D00FFC28801FF
BE8E04FFCE3C70FFE501FBFFD10CDEFF9F05B0FF9300ABFF6C0263D04A041E1D
B2740ABBECBC00FFE6B600FFE6B500FFEABA00FFD19400FF90450DF3550B255B
1C21BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFE75F0EFFF38B00FF
F28700FFF18C00FFF58C00FFFD7700FFC96700FFCE9F00FFF5EB00FFEDE000FF
D4902EFFC7299CFFC709DFFFB611C8FF8E05A3FF8900A3FF690360D049001E1E
BD900ABDFDEF00FFF0D700FFF2DC00FFF4E100FFDBAC00FFC78000FF6C231D8A
1C21BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFE5720EFFF0A500FF
F39700FFFD9200FFDD7A00FF976000FF317600FF5B8800FFD49F32FFDC568EFF
C610D4FFB80ED0FFA612BDFFA616BDFF9008A5FF7B0097FF66025DD14A021F14
A2670E98EAC300FFE5BF00FFE8C700FFEBCE00FFDDB000FFDB9C00FF70281D8C
1C21BDF02B00E4FF2900DDFF2800D9FF2600E4FF3600D1FFE8830EFFFFAA00FF
DF7E00FF977600FF2E9500FF0CA400FF1D8800FF217D00FF94279BFFBD03DEFF
A60CBFFFA512BDFFC233D1FFED4DF2FFF354F5FFAE29C2FF6C0263D34C021F14
560B2408B1710ABBDCAB02F2DCB302F2DFBB02F2DFBF02F2C99002F26D231D74
1C21BDF02B00E4FF2900DDFF2800D9FF2600E4FF3A01D1FFD4600EFF988500FF
409B00FF07BC00FF0DB900FF13B300FF239300FF2E8D00FF802A88FFB012CAFF
C541D4FFEE72F3FFFF99FFFFFFACFFFFFFB5FFFFFD89FBF37D3966D745101976
5100280D51072601580F241858102419580F241959102419570F24195208250A
1C21BDF02B00E4FF2900DDFF2800D9FF2800E4FF3003D1FF348D0EFF03D200FF
1DC100FF0FC900FF0DCF00FF0AD600FF22A300FF339600FFAA73A1FFF8A8FAFF
FED0FEFFFFF1FFFFFFEBFFFFF7C7F5F5BE5FADA464324295248404EF297107FE
4A1C209D51032815000000000000000000000000000000000000000000000000
1D22BDF02D00E4FF2A02DDFF2902DAFF2B01E4FF2907D1FF0AC10DFF03F300FF
0BD900FF05EC00FF01F200FF07DD00FF229E00FF339B00FF889CA4FFF8DDFEFF
FFDDFFFFF1BFEEEBB961A8A16E0D482E40171450198F00E816A100FF24A90CFF
3E9C26FF510C274C000000000000000000000000000000000000000000000000
2027BEF03509E6FF310CDFFF300CDBFF330AE6FF3210D3FF0DC90DFF00FF00FF
00F000FF04E800FF13D709FF23D117FF28D219FF33AD0DFF047578FF4564C7FF
9F45B2E3680C3C37000000004220184C16B405EE0ACD00FF1FBA0DFF55F350FF
549C3CEC4E072230000000000000000000000000000000000000000000000000
262EBFF04018E7FF3B19E1FF3A18DCFF3E19E8FF3D1ED5FF0AD00AFF00F100FF
20CD12FF4AC73BFF63EE5EFF6CFF6AFF62FC51FF40CC43FF0A7C94FF0072B3FF
20355AC4550019084723204910CD05EF02F000FF1CC80FFF56FC54FF69B758ED
5120274E00000000000000000000000000000000000000000000000000000000
2B36BFF04C2AEAFF4527E2FF4326DEFF4929EAFF432ED3FF2CB31FFF73D75FFF
95DE8CFFB5FFB3FFA4FB96FF72D06DFF32A072FF0999CBFF0083CCFF007AB9FF
2C3769C24C24166510CF06EA05EF00FF20CF15FF57FF56FF6BB55AED5120284F
0000000000000000000000000000000000000000000000000000000000000000
313DC1F05839ECFF4E34E4FF4D33E0FF533AE9FF503AE0FF4A5398FF95B2A9FF
AFDB9DFF96BD97FF447673FF0591C9FF009CF5FF00A2FCFF0085CAFF0080C3FF
2E376CBF3762099A11DC05FF2AD81FFF57FF57FF6CB45BEB511E284D00000000
0000000000000000000000000000000000000000000000000000000000000000
3645C2F06349EEFF5842E6FF5741E1FF5D4AE8FF5D48E9FF5E43F2FF5C44E0FF
405C8BFF1F20A2FF171FC7FF00A1F1FF00AAF2FF00ADF4FF008ACAFF0086CDFF
2D3D70C3530719183B6E1D8A42A12FBC5D8B45BA522029480000000000000000
00000000000000000000000052082C2B5007262D000000000000000000000000
3B4CC3F06F5AF0FF6350E7FF604FE2FF6A59ECFF6B57ECFF5C51DBFF4451D2FF
1F41CDFF1225C3FF1B28C2FF02AFEDFF00B9F3FF00BCF6FF0091CCFF008DD8FF
2C4273C657001C13000000005100240100000000000000000000000000000000
000000000000000058093534AA0AAEDB7D0969C94A071C260000000000000000
4053C3F07968F1FF6B5DE9FF6D5BE7FF6D63E8FF4550C9FF2F54C7FF1F3FE0FF
1F21FCFF1828EDFF0E43BFFF02B7E7FF00C8F5FF00CCF9FF009ACFFF0092E2FF
2C4476C556001B14000000000000000000000000000000000000000000000000
00000000540A3031BD0BBCD7F104FAFFC10BCEFF650845994D07200A00000000
4356C4F0826FF5FF6D5FE9FF4E5AD0FF3C5DC3FF455FD4FF5C62F7FF5A53FDFF
4841FBFF273EE6FF087DD1FF00CDEBFF00D8FAFF00D1F4FF0196C7FF0095E8FF
2C467AC856001A15000000000000000000000000000000000000000000000000
530A2E2EB90BB7D5FF04FFFFCB06D7FFE21CEEFF9C1B8FD849051B1B00000000
3D51C2F0606AE1FF4A64CCFF546BCCFF727AEBFF7A7EF3FF7378F2FF566EE4FF
1C88D0FF01C6DEFF00EBF9FF00E0F7FF02C8E6FF10B2D2FF03C7DCFF00C5ECFF
2B4B78BF57001A0F000000000000000000000000000000000000000052092D2B
B70BB5D3FF03FFFFD207DEFFE935EFFFEB59EFFF7518607B4C051F0400000000
4276C0FC6875DAFF676CE3FF7078EDFF727BF0FF718CEAFF3496D1FF01C7DDFF
00EFF9FF00EFF9FF00D1E7FF1ABDD9FF3DD7E7FF32FBFFFF14E1EEFF24819AB6
49193A39000000000000000000000000000000000000000051092C29B50CB3D1
FF02FFFFD308DDFFE94EEFFFED78F1FF7820637D4A021C010000000000000000
3E6FA0A88290E4F37D85F2FF7E92EBFF5E7AB3D6263D698F00DAE3F500FBFEFF
02D6EAFF26C1DAFF5BD1E4FF71F9FFFF54DFECFE398AA6BD43274A5000000000
000000000000000000000000000000000000000054092E27B40CB2CFFF01FFFF
D309DEFFE968EFFFED94F0FF7823637D00000000000000000000000000000000
000000003B0F3402363D6F083734651C4702220B4E08270C03BAD3FC26D0E5FF
6BDBEEFF97FBFFFF81DEEBFC5286A4B94625484C51001E010000000000000000
000000000000000000000000000000004F082504A70CA7C1F500FAFFD20DDDFF
E982EFFFEDADF0FE7924637D0000000000000000000000000000000000000000
00000000000000000000000000000000000000004F092806314D778460ABC6D7
74CFE2F25384A1B6452447470000000000000000000000000000000000000000
000000000000000000000000000000004E072201940A8C81C614D6FFDE89E6FF
EDC5EEFF7C276986000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000004C15360C
4A34561D4E001E01000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000A829B47BD271E5DF
8C2B838649001A06000000000000000000000000000000000000000000000000
</a:ToolIcon>
<a:UseAsMetaClass>1</a:UseAsMetaClass>
<a:DefaultName>Excel</a:DefaultName>
<c:ParentSttp>
<o:StereotypeTargetItem Ref="o24"/>
</c:ParentSttp>
<c:Categories>
<o:TypedCategoryTargetItem Id="o27">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>4DD3C534-7BFC-4251-B46E-704D381A419F</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o28">
<a:ObjectID>988A4970-46E2-4D98-AC5A-75DC32A86A8A</a:ObjectID>
<a:Name>DataSource</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1268053529</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The filename of the Excel document to import. It can also be a CSV file or any other format that Excel can recognize.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>3</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>*.xls</a:ExtendedAttributeTargetItem.Value>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.DataSourcePersist&quot;)
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   
   &#39; Open source document
   Dim document
   set document = OpenSourceDocument(value)
   
   if not document is nothing then
   
      &#39; Disactivate error
      HandleErrorCase -1, &quot;&quot;
   
      &#39; Enumerate tables in document
      Dim dict
      set dict = EnumerateDocumentTables(document)
      
      &#39; Adjust table mapping objects (create new, delete obsolete)
      AdjustTableMappings obj, dict
         
      &#39; Close source document
      CloseSourceDocument(document)
      
      &#39; Restore error
      if not debugMode then
         On Error Goto 0
      end if
      
      &#39; Synchronize name &amp; code with new filename
      if not value = &quot;&quot; then
         Dim pos, newName
         pos = InStrRev(value, &quot;\&quot;)
         if pos &gt; 0 then
            newName = Right(value, Len(value) - pos)
         end if
         obj.SetNameAndCode newName, newName
      end if
      
      &#39; Set filename in persistence attribute
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.DataSourcePersist&quot;, value
      
      &#39; Some clean up
      set dict = nothing
      set document = nothing
   end if
   
End Sub</a:SetMethodScript>
<a:Label>Excel File</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o29">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:ObjectID>1167FFD8-9E21-48E7-A8C9-2CB46E66FACD</a:ObjectID>
<a:Name>Forms</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o30">
<a:ObjectID>47073973-E282-4B68-9A2E-247F781E630D</a:ObjectID>
<a:Name>ExcelImportWizard</a:Name>
<a:Code>Excel Import Wizard</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StaticText Name=&quot;Intro&quot; Caption=&quot;Welcome to the Excel Import Wizard. This wizard guides you\nthrough importing tables of objects defined in an Excel spreadsheet.\nTo get started, select an Excel file to import.&quot; /&gt;
   &lt;Space Name=&quot;Space1&quot; Width=&quot;411&quot; Height=&quot;12&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Data Source&quot; Caption=&quot; &quot; AttributeID=&quot;{9798709A-0772-4643-B38D-C4B9E4A42D19}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;15&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;Space Name=&quot;Space2&quot; Width=&quot;410&quot; Height=&quot;24&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; /&gt;
   &lt;CustomMethod Method=&quot;ShowOptions&quot; Name=&quot;ShowOptions&quot; Caption=&quot;Options...&quot; HorizontalResize=&quot;No&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Excel Import Wizard</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:StereotypeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o31">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>D332DDF5-AE7A-4AAD-8E4F-7167C04506E7</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1254324623</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o32">
<a:ObjectID>5410EA68-2730-4851-B011-571B5CF7D533</a:ObjectID>
<a:Name>Extension</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The extension where new extended attributes are going to be created</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>15</a:ExtendedAttributeTargetItem.DataType>
<a:DestinationClassID>186C8AC3-D3DC-11D3-881C-00508B03C75C</a:DestinationClassID>
<a:Label>Extension</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
<c:ExtendedCollection>
<o:ExtendedCollectionTargetItem Ref="o33"/>
</c:ExtendedCollection>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o34">
<a:ObjectID>CFBAE287-A8CA-488E-A143-1F68C9EAF905</a:ObjectID>
<a:Name>MappingDescription</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>A computed attribute that describes existing mapping</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>14</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim txt, tablCol, tabl, line, skip, tpnm
   set tablCol = obj.GetCollectionByName(&quot;TableMappings&quot;) &#39; NO-NLS
   if not tablCol is nothing then
      For each tabl in tablCol
         line = tabl.GetExtendedAttribute(&quot;%CurrentTargetCode%.Columns&quot;)
         skip = tabl.GetExtendedAttribute(&quot;%CurrentTargetCode%.Skip&quot;)
         tpnm = tabl.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedType&quot;)
         if not txt = &quot;&quot; then
            txt = txt + vbcrlf
         end if
         if tpnm = &quot;&quot; then
            tpnm = &quot;?&quot;
         end if
         txt = txt + &quot;Table &quot; + tabl.Name + &quot;=&quot; + tpnm
         if skip then
            txt = txt + &quot; (Skipped)&quot;
         else
            txt = txt + &quot;: &quot; + line
         end if
      Next
   end if
   set tablcol = nothing
   set tabl = nothing
   %Get% = txt
End Function</a:GetMethodScript>
<a:Label>Mapping Description</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o35">
<a:ObjectID>7843FCAD-9E29-443F-A922-A0A0AAC319D3</a:ObjectID>
<a:Name>DataSourcePersist</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>A string identification of the import data source for persistence.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>14</a:ExtendedAttributeTargetItem.DataType>
<a:Label>Persistent Data Source</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o36">
<a:ObjectID>9798709A-0772-4643-B38D-C4B9E4A42D19</a:ObjectID>
<a:Name>DataSource</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Computed attribute that allows to perform some checks &amp; cascade effects
when assigning new value for persisted data source</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>3</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>*.xls</a:ExtendedAttributeTargetItem.Value>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.DataSourcePersist&quot;)
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   
   &#39; Open source document
   Dim document
   set document = OpenSourceDocument(value)
   
   if not document is nothing then
   
      &#39; Disactivate error
      HandleErrorCase -1, &quot;&quot;
   
      &#39; Enumerate tables in document
      Dim dict
      set dict = EnumerateDocumentTables(document)
      
      &#39; Adjust table mapping objects (create new, delete obsolete)
      AdjustTableMappings obj, dict
         
      &#39; Close source document
      CloseSourceDocument(document)
      
      &#39; Restore error
      if not debugMode then
         On Error Goto 0
      end if
      
      &#39; Synchronize name &amp; code with new filename
      if not value = &quot;&quot; then
         Dim pos, newName
         pos = InStrRev(value, &quot;\&quot;)
         if pos &gt; 0 then
            newName = Right(value, Len(value) - pos)
         end if
         obj.SetNameAndCode newName, newName
      end if
      
      &#39; Set filename in persistence attribute
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.DataSourcePersist&quot;, value
      
      &#39; Some clean up
      set dict = nothing
      set document = nothing
   end if
   
End Sub</a:SetMethodScript>
<a:Label>Data Source</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:TypedCategoryTargetItem Id="o37">
<a:ObjectID>0E7EFBEF-516E-4D5A-AB84-75E879FCC90D</a:ObjectID>
<a:Name>Options</a:Name>
<a:CreationDate>1252502494</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1409674929</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o38">
<a:ObjectID>6151EB02-F2DA-4F08-B228-F419D142DE06</a:ObjectID>
<a:Name>CreateSymbols</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Create default symbols for imported objects in current diagram.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
<a:Label>Create Symbols</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o39">
<a:ObjectID>37ECED92-AF67-4A2A-A9F8-F6CBD723033C</a:ObjectID>
<a:Name>DeftCreateIfNotExist</a:Name>
<a:CreationDate>1252502494</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Create the object if the reference could not be found</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>true</a:ExtendedAttributeTargetItem.Value>
<a:Label>Create if not exist</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o40">
<a:ObjectID>93142B31-F763-4F62-8985-8741DDD59843</a:ObjectID>
<a:Name>DefaultColumnMapping</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Automatically guess the default mapping for columns, comparing the column name with attribute name and trying to reuse previous mapping of columns from other tables.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
<a:Label>Default Column Mapping</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o41">
<a:ObjectID>B0A1E97F-B9F3-421D-9B48-F0BC2083CEEA</a:ObjectID>
<a:Name>ListSeparator</a:Name>
<a:CreationDate>1252501765</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The separator string to use when several values are displayed in a cell.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>,</a:ExtendedAttributeTargetItem.Value>
<a:Label>List Separator</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o42">
<a:ObjectID>D900EB77-7A8C-458D-986D-209DE9C0A372</a:ObjectID>
<a:Name>QualifiedSeparator</a:Name>
<a:CreationDate>1252501765</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The separator string to use for qualified name.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>.</a:ExtendedAttributeTargetItem.Value>
<a:Label>Qualified Separator</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o43">
<a:ObjectID>C58D2023-853E-4934-8A1B-CE53EBAFF323</a:ObjectID>
<a:Name>DeftRefAttribute</a:Name>
<a:CreationDate>1252502494</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute of the referenced object displayed in the imported column</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>Name</a:ExtendedAttributeTargetItem.Value>
<a:ExtendedAttributeTargetItem.ListOfValues>Name\t%txtIdtfName%;Code\t%txtIdtfCode%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Referenced Attribute</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o44">
<a:ObjectID>A67DA30E-BB50-4728-8E9C-6D17A4E8E4DE</a:ObjectID>
<a:Name>DeftStringForTrue</a:Name>
<a:CreationDate>1254323831</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1254324623</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>This attribute stores the user-defined string that means &#39;True&#39;.
For instance, it can be &#39;OK&#39;, &#39;Valid&#39; or any other string.
The following predefined strings are already automatically considered as &#39;True&#39;: &#39;yes&#39;, &#39;true&#39;, &#39;1&#39;, &#39;Y&#39;, &#39;T&#39;, &#39;X&#39;, &#39;OK&#39;</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>X</a:ExtendedAttributeTargetItem.Value>
<a:Label>String for &#39;True&#39; value</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o45">
<a:ObjectID>1E2D195E-CC64-416C-ABF7-1E29B5CCDE09</a:ObjectID>
<a:Name>SearchExternalModels</a:Name>
<a:CreationDate>1371660833</a:CreationDate>
<a:Creator>I063974</a:Creator>
<a:ModificationDate>1372072625</a:ModificationDate>
<a:Modifier>I063974</a:Modifier>
<a:Comment>Search for referenced objects in other models if not found in the local model.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Search for referenced objects in other models</a:Label>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o46">
<a:ObjectID>E68EF764-4221-4F22-A953-8C27653BE7DE</a:ObjectID>
<a:Name>Validate</a:Name>
<a:CreationDate>1409673842</a:CreationDate>
<a:Creator>I063949</a:Creator>
<a:ModificationDate>1409917123</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:Comment>Enables validation of objects and property values (such as the uniqueness of names and codes) during import. Disabling this option can provide significant performance improvements when importing larger files. Data integrity can be confirmed after the import by selecting Tools &gt; Check Model (or pressing F4) in the model.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>true</a:ExtendedAttributeTargetItem.Value>
<a:Label>Check data integrity</a:Label>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o47">
<a:ObjectID>8C792302-B63B-4A43-996B-94E7E2F2D48E</a:ObjectID>
<a:Name>Old Option Wrappers</a:Name>
<a:CreationDate>1254324253</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1254324623</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o48">
<a:ObjectID>7E4F6C03-C24E-4B4E-A659-CCFA5A087671</a:ObjectID>
<a:Name>CreateIfNotExist</a:Name>
<a:CreationDate>1254324253</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Create the object if the reference could not be found</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>true</a:ExtendedAttributeTargetItem.Value>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = GetCommonOptionValue(obj, &quot;CreateIfNotExist&quot;, true) &#39; NO-NLS
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   SetCommonOptionValue obj, &quot;CreateIfNotExist&quot;, value &#39; NO-NLS
End Sub</a:SetMethodScript>
<a:Label>Create if not exist</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o49">
<a:ObjectID>5CC92034-C3A0-4F93-A646-32C790BE7FD8</a:ObjectID>
<a:Name>RefAttribute</a:Name>
<a:CreationDate>1254324253</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265199799</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute of the referenced object displayed in the imported column</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>Name</a:ExtendedAttributeTargetItem.Value>
<a:ExtendedAttributeTargetItem.ListOfValues>Name\t%txtIdtfName%;Code\t%txtIdtfCode%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = GetCommonOptionValue(obj, &quot;RefAttribute&quot;, &quot;&quot;) &#39; NO-NLS
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   if not value = &quot;&quot; then
      SetCommonOptionValue obj, &quot;RefAttribute&quot;, value &#39; NO-NLS
   end if
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Referenced Attribute</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o50">
<a:ObjectID>DB4C5516-449F-4CAE-B49A-389F3480FCB1</a:ObjectID>
<a:Name>StringForTrue</a:Name>
<a:CreationDate>1254324253</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265121431</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>This attribute stores the user-defined string that means &#39;True&#39;.
For instance, it can be &#39;OK&#39;, &#39;Valid&#39; or any other string.
The following predefined strings are already automatically considered as &#39;True&#39;: &#39;yes&#39;, &#39;true&#39;, &#39;1&#39;, &#39;Y&#39;, &#39;T&#39;, &#39;X&#39;, &#39;OK&#39;</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = GetCommonOptionValue(obj, &quot;StringForTrue&quot;, &quot;&quot;) &#39; NO-NLS
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   if not value = &quot;&quot; then
      SetCommonOptionValue obj, &quot;StringForTrue&quot;, value &#39; NO-NLS
   end if
End Sub</a:SetMethodScript>
<a:Label>String for &#39;True&#39; value</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o51">
<a:TypePublicName>ExtendedCollectionTargetItem</a:TypePublicName>
<a:ObjectID>53FBF211-2E8A-4FC5-8646-02206210C38A</a:ObjectID>
<a:Name>Extended Collections</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedCollectionTargetItem Id="o33">
<a:ObjectID>E8F3379A-2F2F-411F-B58E-A72635754042</a:ObjectID>
<a:Name>Extension</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:DestinationClassID>186C8AC3-D3DC-11D3-881C-00508B03C75C</a:DestinationClassID>
<a:Label>Extension</a:Label>
<a:DefaultColumnFilter>NAME 80 CODE 80</a:DefaultColumnFilter>
</o:ExtendedCollectionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o52">
<a:TypePublicName>ExtendedCompositionTargetItem</a:TypePublicName>
<a:ObjectID>0565507B-F964-44EE-9A04-FF2F64696A0C</a:ObjectID>
<a:Name>Extended Compositions</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedCompositionTargetItem Id="o53">
<a:ObjectID>5B8C40DA-027F-4EED-ACB0-39FCDDE48EDF</a:ObjectID>
<a:Name>TableMappings</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200502</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The list of table mappings</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:DestinationClassID>E66E5B1D-A046-4482-ADC2-5D6CCF8CBB85</a:DestinationClassID>
<a:DestinationStereotype>TableMapping</a:DestinationStereotype>
<a:Label>Table Mappings</a:Label>
<a:DefaultColumnFilter>NAME 100 &quot;_EXCEL_IMPORT.Skip.{E0805E1A-FB85-4D18-A94C-5125DF0B13B4}&quot; 20 &quot;_EXCEL_IMPORT.ImportedType.{785649BB-C36B-43F1-8E63-9506AAF6E6DC}&quot; 100</a:DefaultColumnFilter>
<c:DestinationStereotypeObject>
<o:StereotypeTargetItem Ref="o54"/>
</c:DestinationStereotypeObject>
</o:ExtendedCompositionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o55">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:ObjectID>302102D4-58C4-43E0-972C-CC46B0D0352C</a:ObjectID>
<a:Name>Forms</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252501940</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o56">
<a:ObjectID>C3535178-3B0D-46FB-A97C-4D9BCDA1BB43</a:ObjectID>
<a:Name>General</a:Name>
<a:Code>GENERAL</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StandardAttribute Attribute=&quot;Name&quot; Caption=&quot;Name&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout1&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;DataSource&quot; Caption=&quot;Imported file&quot; AttributeID=&quot;{9798709A-0772-4643-B38D-C4B9E4A42D19}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;Import&quot; Name=&quot;Import&quot; Caption=&quot;Import&quot; HorizontalResize=&quot;No&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;ExtendedAttribute Attribute=&quot;MappingDescription&quot; Caption=&quot;Mapping description&quot; AttributeID=&quot;{CFBAE287-A8CA-488E-A143-1F68C9EAF905}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Extension&quot; Caption=&quot;Extensions file\nfor new extended attributes&quot; AttributeID=&quot;{5410EA68-2730-4851-B011-571B5CF7D533}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; /&gt;
   &lt;StandardAttribute Attribute=&quot;Comment&quot; Caption=&quot;Comment&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; LeftText=&quot;false&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1266566714</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>General</a:Label>
<a:FormType>GENERAL</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
<o:FormTargetItem Id="o57">
<a:ObjectID>E22F01F9-2C74-4BA4-9B2B-9BA7FB4B189E</a:ObjectID>
<a:Name>SelectFile</a:Name>
<a:Code>Select File</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StaticText Name=&quot;Intro&quot; Caption=&quot;Select the data source to import:&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Data Source&quot; Caption=&quot; &quot; AttributeID=&quot;{9798709A-0772-4643-B38D-C4B9E4A42D19}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;15&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;Space Name=&quot;Space1&quot; Width=&quot;6&quot; Height=&quot;12&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;CustomMethod Method=&quot;ShowOptions&quot; Name=&quot;ShowOptions&quot; Caption=&quot;Options...&quot; HorizontalResize=&quot;No&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Select File</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
<o:FormTargetItem Id="o58">
<a:ObjectID>906C23B8-4C99-404C-AF21-37859558073B</a:ObjectID>
<a:Name>AllExas</a:Name>
<a:Code>All Extended Attributes</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Attribute=&quot;Data Source&quot; Caption=&quot;Data Source&quot; AttributeID=&quot;{9798709A-0772-4643-B38D-C4B9E4A42D19}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;DataSourcePersist&quot; Caption=&quot;caption&quot; AttributeID=&quot;{7843FCAD-9E29-443F-A922-A0A0AAC319D3}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;DefaultColumnMapping&quot; Caption=&quot;caption&quot; AttributeID=&quot;{93142B31-F763-4F62-8985-8741DDD59843}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Extension&quot; Caption=&quot;caption&quot; AttributeID=&quot;{5410EA68-2730-4851-B011-571B5CF7D533}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;MappingDescription&quot; Caption=&quot;caption&quot; AttributeID=&quot;{CFBAE287-A8CA-488E-A143-1F68C9EAF905}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;CreateIfNotExist&quot; Caption=&quot;caption&quot; AttributeID=&quot;{7E4F6C03-C24E-4B4E-A659-CCFA5A087671}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;CreateSymbols&quot; Caption=&quot;caption&quot; AttributeID=&quot;{6151EB02-F2DA-4F08-B228-F419D142DE06}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;DeftCreateIfNotExist&quot; Caption=&quot;caption&quot; AttributeID=&quot;{37ECED92-AF67-4A2A-A9F8-F6CBD723033C}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;DeftRefAttribute&quot; Caption=&quot;Referenced Attribute&quot; AttributeID=&quot;{C58D2023-853E-4934-8A1B-CE53EBAFF323}&quot; GrayHiddenAttributes=&quot;true&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;DeftStringForTrue&quot; Caption=&quot;String for &#39;True&#39; value&quot; AttributeID=&quot;{A67DA30E-BB50-4728-8E9C-6D17A4E8E4DE}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ListSeparator&quot; Caption=&quot;caption&quot; AttributeID=&quot;{B0A1E97F-B9F3-421D-9B48-F0BC2083CEEA}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;QualifiedSeparator&quot; Caption=&quot;caption&quot; AttributeID=&quot;{D900EB77-7A8C-458D-986D-209DE9C0A372}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RefAttribute&quot; Caption=&quot;Referenced Attribute&quot; AttributeID=&quot;{5CC92034-C3A0-4F93-A646-32C790BE7FD8}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;StringForTrue&quot; Caption=&quot;String for &#39;True&#39; value&quot; AttributeID=&quot;{DB4C5516-449F-4CAE-B49A-389F3480FCB1}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1277892078</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Just to avoid the extended attributes page on the property sheet</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>All Extended Attributes</a:Label>
<a:FormType>Dialog</a:FormType>
</o:FormTargetItem>
<o:FormTargetItem Id="o59">
<a:ObjectID>95E89B0F-4DA8-47DA-ABED-794D91CEF47A</a:ObjectID>
<a:Name>ImportOptions</a:Name>
<a:Code>Import Options</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Attribute=&quot;DefaultColumnMapping&quot; Caption=&quot;Auto-map columns to properties&quot; AttributeID=&quot;{93142B31-F763-4F62-8985-8741DDD59843}&quot; GrayHiddenAttributes=&quot;Yes&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Validate&quot; Caption=&quot;Check data integrity&quot; AttributeID=&quot;{E68EF764-4221-4F22-A953-8C27653BE7DE}&quot; GrayHiddenAttributes=&quot;Yes&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;CreateSymbols&quot; Caption=&quot;Create symbols in active diagram&quot; AttributeID=&quot;{6151EB02-F2DA-4F08-B228-F419D142DE06}&quot; GrayHiddenAttributes=&quot;Yes&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;CreateIfNotExist&quot; Caption=&quot;Create associated objects if not found&quot; AttributeID=&quot;{7E4F6C03-C24E-4B4E-A659-CCFA5A087671}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;SearchExternalModels&quot; Caption=&quot;Search for referenced objects in other models&quot; AttributeID=&quot;{1E2D195E-CC64-416C-ABF7-1E29B5CCDE09}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RefAttribute&quot; Caption=&quot;Reference associated objects by&quot; AttributeID=&quot;{5CC92034-C3A0-4F93-A646-32C790BE7FD8}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;HorizontalRadios&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;QualifiedSeparator&quot; Caption=&quot;Qualified name separator&quot; AttributeID=&quot;{D900EB77-7A8C-458D-986D-209DE9C0A372}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;2&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ListSeparator&quot; Caption=&quot;List value separator&quot; AttributeID=&quot;{B0A1E97F-B9F3-421D-9B48-F0BC2083CEEA}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;2&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;StringForTrue&quot; Caption=&quot;String literal for &#39;True&#39; value&quot; AttributeID=&quot;{DB4C5516-449F-4CAE-B49A-389F3480FCB1}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;2&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>1252501765</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1409917207</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Import Options</a:Label>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o60">
<a:TypePublicName>MenuTargetItem</a:TypePublicName>
<a:ObjectID>8D064FA2-CD55-4961-A49E-79B61B0F2B6D</a:ObjectID>
<a:Name>Menus</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MenuTargetItem Id="o61">
<a:ObjectID>1FAA3AE1-E9F9-44F5-9F5C-B7696C15A0D3</a:ObjectID>
<a:Name>Import</a:Name>
<a:MenuTargetItem.Value>&lt;Menu&gt;
   &lt;Command Name=&quot;Import&quot; Caption=&quot;Import...&quot; /&gt;
   &lt;Command Name=&quot;ShowMappings&quot; Caption=&quot;Change Mappings...&quot; /&gt;
   &lt;Command Name=&quot;ShowOptions&quot; Caption=&quot;Change Options...&quot; /&gt;
&lt;/Menu&gt;
</a:MenuTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1254226909</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:MenuTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o62">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>34A01196-D43F-4223-86F7-A44A08294648</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1254226795</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o63">
<a:ObjectID>A5AA5D85-6DD3-4564-B9F6-A117BD687246</a:ObjectID>
<a:Name>Import</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1409945701</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:Comment>Launches the import of data from the Excel file</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
      
   &#39; Change interactive mode
   Dim oldMode
   oldMode = interactiveMode
   interactiveMode = im_Dialog
   globalUserAbort = false

   &#39; Check that the application exists on the machine
   Dim errorMsg, userAbort
   userAbort = false
   errorMsg = CheckApplicationExist()
   if not errorMsg = &quot;&quot; then
      msgbox errorMsg, vbOKOnly, txtError
      userAbort = true
   end if
   
   &#39; Ask for filename 
   Dim filename
   if not userAbort then
      filename = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.DataSourcePersist&quot;)
      if filename = &quot;&quot; then
         Dim dlg
         set dlg = obj.CreateCustomDialog(&quot;%CurrentTargetCode%.ExcelImportWizard&quot;)
         If not dlg is nothing then
            dlg.EnforceCancelButton = true
            dlg.CloseButtonLabel = txtNextBtn
            if dlg.ShowDialog() then         
               filename = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.DataSourcePersist&quot;)
            else
               userAbort = true
            end if
            set dlg = nothing
         End If
      end if
   end if
   
   if not userAbort then
      &#39; Open source document
      Dim document
      set document = nothing
      if filename = &quot;&quot; then
         DisplayError &quot;The filename is not defined for the import&quot;
      else
         set document = OpenSourceDocument(filename)
      end if
   
      if not document is nothing then
   
         &#39; Disactivate error
         HandleErrorCase -1, &quot;&quot;
      
         &#39; Enumerate tables in document
         Dim dict
         set dict = EnumerateDocumentTables(document)
      
         &#39; Adjust table mapping objects (create new, delete obsolete)
         AdjustTableMappings obj, dict

         &#39; Import Data
         Dim totalCreate, totalUpdate, totalWarning, res
         totalCreate  = 0
         totalUpdate  = 0      
         totalWarning = 0
         res = ImportDocumentData (dict, obj, totalCreate, totalUpdate, totalWarning)
               
         &#39; Close source document
         CloseSourceDocument(document)
         
         &#39; Stop progress
         Dim prgs
         set prgs = Progress(&quot;GenericImport&quot;, debugMode)
         if not prgs is nothing then
            prgs.Stop
            set prgs = nothing
         end if
      
         &#39; Log message
         LogText Time         
         if totalCreate &gt; 0 or totalUpdate &gt; 0 then
            Dim msg
            if res then
               msg = &quot;The import of &quot; + filename + &quot; is complete&quot; + vbcrlf + &quot;and &quot;
            else
               msg = &quot;The import of &quot; + filename + &quot; has been interrupted&quot; + vbcrlf + &quot;and &quot;
            end if
            if totalCreate &gt; 0 then
               if totalCreate = 1 then
                  msg = msg + CStr(totalCreate) + &quot; object has been created&quot;
               else
                  msg = msg + CStr(totalCreate) + &quot; objects have been created&quot;
               end if
               if totalUpdate &gt; 0 then
                  msg = msg + &quot; and &quot; + CStr(totalUpdate) + &quot; updated.&quot;
               else
                  msg = msg + &quot;.&quot;
               end if
            else
               if totalUpdate = 1 then
                  msg = msg + CStr(totalUpdate) + &quot; object has been updated.&quot;
               else
                  msg = msg + CStr(totalUpdate) + &quot; object(s) have been updated.&quot;
               end if
            end if
            if totalWarning &gt; 0 then
               if totalWarning = 1 then
                  msg = msg + vbcrlf + vbcrlf + Cstr(totalWarning) + &quot; warning has been logged in the output window.&quot;
               else
                  msg = msg + vbcrlf + vbcrlf + Cstr(totalWarning) + &quot; warning(s) have been logged in the output window.&quot;
               end if
            end if
            LogText msg
            if interactivemode = im_Dialog then
               msgbox msg, vbOKOnly, txtDlgImportComplete
            end if
         Else
            DisplayError &quot;No object created or modified by the import.&quot;
         end if
            
         &#39; Restore error
         if not debugMode then
            On Error Goto 0
         end if
      
         &#39; Some clean up
         set dict = nothing
         set document = nothing
         set globalObject = nothing
      
      end if   
      
   end if
                     
   &#39; Restore old interactive mode
   interactiveMode = oldMode

End Sub</a:MethodScript>
</o:MethodTargetItem>
<o:MethodTargetItem Id="o64">
<a:ObjectID>B31FDBFF-4067-400B-ABCF-4A3F15364C06</a:ObjectID>
<a:Name>ShowOptions</a:Name>
<a:CreationDate>1252502494</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265199063</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   Dim dlg
   set dlg = obj.CreateCustomDialog(&quot;%CurrentTargetCode%.ImportOptions&quot;)
   if not dlg is nothing then
      dlg.CloseButtonLabel = txtOkBtn
      &#39;dlg.EnforceCancelButton = true : Cancel does not work
      dlg.ShowDialog()
      dlg.Delete
      set dlg = nothing
   end if
End Sub</a:MethodScript>
</o:MethodTargetItem>
<o:MethodTargetItem Id="o65">
<a:ObjectID>F7F39354-5569-4AA1-ABBC-93F1F407DD13</a:ObjectID>
<a:Name>ShowMappings</a:Name>
<a:CreationDate>1254226624</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1254329457</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   Dim tablCol
   set tablCol = obj.GetExtendedCollection(&quot;%CurrentTargetCode%.TableMappings&quot;)
   if not tablCol is nothing then
      interactiveMode = im_dialog
      if tablCol.Count = 0 then
         DisplayError txtNoMapping
      else
         DefineMapping tablCol, true
      end if
      set tablCol = nothing
   end if
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:CustomSymbolTargetItem Id="o66">
<a:ObjectID>02658201-7E14-4CC9-B7C6-24EA095E3B9D</a:ObjectID>
<a:Name>Custom Symbol</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1254487187</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:CornerStyle>1</a:CornerStyle>
<a:AutoAdjustToText>0</a:AutoAdjustToText>
<a:DefaultSize>(3600, 3600)</a:DefaultSize>
<a:LineColor>8421631</a:LineColor>
<a:FontList>NAME 0 Arial,8,N
LABL 0 Arial,8,N</a:FontList>
<a:BrushStyle>6</a:BrushStyle>
<a:GradientFillMode>64</a:GradientFillMode>
<a:CustomPictureType>4</a:CustomPictureType>
<a:CustomTextMode>1</a:CustomTextMode>
<a:CustomPictureID>BEDE6B65-4A5B-405E-8A6F-55697789D6ED</a:CustomPictureID>
<a:GradientEndColor>12632256</a:GradientEndColor>
<a:KeepAspect>1</a:KeepAspect>
<a:SymbolContent>ExtendedObject.Comment 0
ExtendedObject.IconPicture 1
ExtendedObject.IconPicture 1</a:SymbolContent>
<a:SubSymbolsLayout>&lt;Form&gt;
 &lt;StandardAttribute Name=&quot;Name&quot; Attribute=&quot;Name&quot; Prefix=&quot;&quot; Suffix=&quot;&quot; Alignment=&quot;CNTR&quot; Caption=&quot;&quot; Mandatory=&quot;Yes&quot; /&gt;
 &lt;Separator Name=&quot;Separator&quot; /&gt;
 &lt;StandardAttribute Name=&quot;Comment&quot; Attribute=&quot;Comment&quot; Prefix=&quot;&quot; Suffix=&quot;&quot; Alignment=&quot;LEFT&quot; Caption=&quot;&quot; Mandatory=&quot;No&quot; /&gt;
 &lt;StandardAttribute Name=&quot;Icon&quot; Attribute=&quot;IconPicture&quot; Prefix=&quot;&quot; Suffix=&quot;&quot; Alignment=&quot;CNTR&quot; Caption=&quot;&quot; Mandatory=&quot;Yes&quot; /&gt;
&lt;/Form&gt;</a:SubSymbolsLayout>
</o:CustomSymbolTargetItem>
</c:Categories>
</o:StereotypeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o67">
<a:ObjectID>F907068E-F3E3-439E-9F35-7E952229E524</a:ObjectID>
<a:Name>ExtendedSubObject</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:EnableSelectionGeneration>1</a:EnableSelectionGeneration>
<c:Categories>
<o:TypedCategoryTargetItem Id="o68">
<a:TypePublicName>StereotypeTargetItem</a:TypePublicName>
<a:ObjectID>1D41003F-364D-4593-A20F-D9059A72D67B</a:ObjectID>
<a:Name>Stereotypes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:StereotypeTargetItem Id="o54">
<a:ObjectID>A8676DDB-89B6-4CA8-83E5-C1A7EE987D94</a:ObjectID>
<a:Name>TableMapping</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Defines the mapping between a table stored in an Excel sheet and an object kind</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Table Mapping</a:Label>
<a:ToolIcon>0D0000000800000008000000424D7E000000000000003E000000280000001000
0000100000000100010000000000400000000000000000000000000000000000
000000000000FFFFFF00FFFF0000FFFF00008001000080010000800100008001
0000800100008001000080010000800100008001000080010000800100008001
000080010000FFFF0000424D3605000000000000360400002800000010000000
100000000100080000000000000100000000000000000000000000005C000000
0000000063493500B4403400B6422E00B7A29300B8473A00B9A49500BAA59600
BAA69700BBA69700BC463000BC4F4000BDA89A00BDA99A00BE4D2F00BEA99A00
BFAB9D00BFAC9D00BFAC9E00C0564600C2AEA000C2AEA100C2AFA100C35E4C00
C3AE9E00C5B2A500C7655200C8B2A300C8B5A800C8B5A900C8B6A900CB6D5900
CBB9AC00CBB9AD00CCB6A700CEBCB000CEBDB100CF745F00D1C0B400D1C0B500
D27C6500D4C3B800D4C4B800D5C4B900D6836B00D7C6BC00D7C7BB00D7C7BC00
D9C9BF00D9CBC200DA8B7100DBCCC100DCCCC100DDCEC500DE927700E0D3CA00
E49E8100E4D8D000EAAA8B00F3956500F5996A00F59D7100F5CFB700F5D5C000
F6A27700F6D5C000F7DBCA00F8A77D00F9AB8400F9E1D300F9E2D300FAB08B00
FAE7DC00FAEDE500FBB59000FBEDE400FBEDE500FBEEE400FBF3ED00FCB99600
FCF2EC00FCF2ED00FCF3ED00FCF7F400FDBD9A00FDF7F300FDF7F400FDFBF900
FDFBFA00FEC09F00FEFEFE00FFC2A20000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0004010101010101010101010101010000043124211D1915120C090604040100
00045A5A5821514B481042413E04010000045A5A5A2355504C1545423F060100
0004372D292724201E1916110D08010000075A5A5A2B5A58531E4D48460C0100
000F5A5A5A2E5A5A58204E49481001000018393534302F2A2624201D19140100
001B5A5A5A335A5A5A2657565219010000225A5A5A355A5A5A2A5A58551C0100
003836322C28251F1A17130B05020300003A5B59544F4A474443403D3C3B0E00
003836322C28251F1A17130B05020A0000000000000000000000000000000000
0D0000001000000010000000424DBE000000000000003E000000280000002000
0000200000000100010000000000800000000000000000000000000000000000
000000000000FFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000
0007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C000
0007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C000
0007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C000
0007FFFFFFFFFFFFFFFF424D3610000000000000360000002800000020000000
2000000001002000000000000010000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000002E2925405C514A80473B328032251B8032251B8032251B8032251B80
32251B8032251B8032251B8032251B8032251B8032251B8032251B8032251B80
32251B8032251B8032251B8032251B8032251B8032251B8032251B8032251B80
32251B8032251B8032251B8032251B8032251B8019130E400000000000000000
000000005C514A80B7A293FF8D7664FF634935FF634935FF634935FF634935FF
634935FF634935FF634935FF634935FF634935FF634935FF634935FF634935FF
634935FF634935FF634935FF634935FF634935FF634935FF634935FF634935FF
634935FF634935FF634935FF634935FF634935FF32251B800000000000000000
000000005C514A80B7A293FFAB9788FF9E8A7CFF9C8778FF998373FF988272FF
978171FF978070FF967F6FFF957F6EFF947E6DFF947D6CFF937C6BFF927B6BFF
917B6AFF917A69FF907968FF907867FF8F7866FF8F7766FF8E7765FF8E7665FF
8D7664FF8D7664FF8D7664FF78604DFF634935FF32251B800000000000000000
000000005C514A80B7A293FFC8B7ABFFD9CBC2FFD4C4BAFFCEBDB1FFCDBBAFFF
CBB9ADFFCAB7ABFFC8B5A9FFC7B4A7FFC5B2A5FFC4B0A3FFC2AEA1FFC1ADA0FF
BFAC9EFFBEAA9CFFBDA89AFFBCA799FFBBA697FFBAA596FFB9A495FFB8A394FF
B7A293FFB7A293FFB7A293FF8D7664FF634935FF32251B800000000000000000
000000005C514A80B7A293FFD2C4BAFFECE5E0FFE9E1DCFFE6DED8FFE6DCD6FF
E4DAD4FFD7C9C0FFCAB7ABFFD6C5BAFFE1D2C9FFE0D0C6FFDFCEC3FFDECCC0FF
DDCABDFFCEBAADFFBEAA9CFFCCB5A7FFD9C1B1FFD9BFAEFFD8BDABFFD7BBA8FF
D6B9A5FFC7AE9CFFB7A293FF8D7664FF634935FF32251B800000000000000000
000000005C514A80B7A293FFDBD0C9FFFEFEFEFFFEFEFEFFFEFEFEFFFEFDFCFF
FDFBFAFFE4DAD4FFCBB9ADFFE4D6CDFFFCF2EDFFFCF0E9FFFBEDE4FFFBEAE0FF
FAE7DCFFDDC9BDFFBFAB9DFFDBC3B4FFF7DBCAFFF7D8C5FFF6D5C0FFF6D2BCFF
F5CFB7FFD6B9A5FFB7A293FF8D7664FF634935FF32251B800000000000000000
000000005C514A80B7A293FFDBD0C9FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFDFF
FEFDFCFFE5DCD6FFCDBBAFFFE5D8D0FFFDF5F0FFFDF3EDFFFCF0E8FFFCEDE5FF
FBEAE1FFDECCC0FFC1AD9FFFDDC6B7FFF8DECFFFF8DBCAFFF7D8C5FFF6D5C1FF
F5D2BCFFD7BBA8FFB8A394FF8E7765FF634935FF32251B800000000000000000
000000005C514A80B7A293FFDBD0C9FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFE6DDD7FFCEBCB0FFE6DAD2FFFDF7F3FFFDF5F0FFFCF2ECFFFCF0E9FF
FBEDE5FFDFCEC3FFC2AEA1FFDEC8BAFFF9E1D3FFF8DECFFFF7DBCAFFF6D8C5FF
F5D5C0FFD7BDABFFB9A495FF8E7765FF634935FF32251B800000000000000000
000000005C514A80B7A293FFD4C6BCFFEFE9E4FFEDE6E1FFEBE2DDFFEAE2DCFF
E9E1DBFFDDD0C7FFD0BEB3FFDBCDC3FFE6DAD2FFE5D8D0FFE4D6CCFFE3D4CAFF
E2D2C7FFD3C1B5FFC4B0A3FFD1BDAFFFDEC8BAFFDDC6B7FFDBC4B4FFDAC2B1FF
D9BFADFFCAB3A2FFBAA596FF8F7866FF634935FF32251B800000000000000000
000000005C514A80B7A293FFCCBBAFFFE0D3CAFFDCCDC3FFD7C6BCFFD6C5BAFF
D4C3B8FFD3C2B7FFD1C0B5FFD0BFB3FFCEBDB1FFCDBBAFFFCBB9ACFFCAB8ABFF
C8B6A9FFC7B4A7FFC5B2A5FFC4B1A3FFC2AFA1FFC1AE9FFFBFAC9DFFBEAB9CFF
BDA99AFFBCA899FFBAA697FF8F7866FF634935FF32251B800000000000000000
000000005D524B80B9A495FFD4C7BDFFEFE9E4FFEDE6E1FFEBE2DDFFEAE2DCFF
E9E1DBFFDFD2CAFFD3C2B7FFDDD0C8FFE6DED8FFE6DCD6FFE4DAD3FFE4D9D1FF
E2D7CFFFD5C6BBFFC7B4A7FFD3C2B5FFDFCFC3FFDECDC0FFDDCABDFFDCC8BAFF
DBC6B7FFCCB7A8FFBCA799FF907967FF634935FF32251B800000000000000000
000000005D534B80BAA596FFDCD2CAFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEAE1DCFFD5C4B9FFEAE1DCFFFEFEFEFFFEFDFCFFFDFBFAFFFDF9F7FF
FCF7F4FFE2D7CFFFC8B6A9FFE2D2C7FFFBEEE4FFFBEBE0FFFAE7DCFFFAE5D8FF
F9E2D3FFDBC5B7FFBDA89AFF907968FF634935FF32251B800000000000000000
000000005E544C80BCA798FFDDD3CBFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEBE2DDFFD6C6BAFFEBE2DDFFFEFEFEFFFEFEFDFFFEFDFCFFFEFBFAFF
FDF9F7FFE3D9D1FFCAB8ABFFE3D4CAFFFBF1E9FFFBEEE5FFFAEAE1FFFAE8DDFF
FAE5D8FFDCC7BAFFBEAA9CFF917A69FF634935FF32251B800000000000000000
000000005F554D80BEA99AFFDED4CCFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEBE3DDFFD7C7BBFFEBE3DDFFFEFEFEFFFEFEFEFFFEFEFEFFFEFDFCFF
FDFBFAFFE4DAD3FFCBB9ACFFE3D6CDFFFBF3EDFFFBF0E9FFFAEDE5FFFAEAE1FF
FAE7DCFFDDC9BDFFBFAB9DFF917A69FF634935FF32251B800000000000000000
0000000061564E80C1AC9CFFD9CCC2FFF1EBE7FFF0E9E5FFEEE6E2FFEEE6E1FF
EDE5E0FFE3D7CFFFD8C8BDFFE2D6CEFFEBE3DDFFEAE2DCFFE9E1DBFFE9E0D9FF
E7DED7FFDACDC3FFCDBBAFFFD8C9BEFFE3D6CDFFE3D4CAFFE1D1C7FFE1CFC4FF
E0CDC1FFD1BDB0FFC1AD9FFF927B6AFF634935FF32251B800000000000000000
0000000062574F80C3AE9EFFD4C3B7FFE4D8D0FFE1D3CBFFDDCEC5FFDDCDC3FF
DCCCC1FFDBCBC0FFD9C9BFFFD8C8BEFFD7C7BCFFD6C6BAFFD4C4B8FFD3C2B6FF
D1C0B4FFD0BFB3FFCEBDB1FFCDBBAFFFCBB9ACFFCAB7ABFFC8B5A9FFC7B4A7FF
C5B2A5FFC4B0A3FFC2AEA0FF937C6BFF634935FF32251B800000000000000000
0000000063585180C6B0A1FFDCCEC4FFF1EBE7FFF0E9E5FFEEE6E2FFEEE6E1FF
EDE5E0FFE4D8D0FFDACBC0FFE3D7CFFFEBE3DDFFEAE2DCFFE9E1DBFFE9E0DAFF
E8DFD9FFDCCFC6FFD0BFB3FFDACDC3FFE4DAD3FFE4D8D1FFE3D6CFFFE2D5CCFF
E1D3C9FFD3C2B6FFC4B0A3FF947D6CFF634935FF32251B800000000000000000
0000000064595280C8B2A3FFE3D8D1FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEDE5E0FFDBCCC1FFEDE5E0FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFE8DFD9FFD1C0B4FFE7DED7FFFDFBF9FFFDF9F7FFFDF7F4FFFDF5F1FF
FCF3EDFFE1D3C9FFC5B2A5FF947E6DFF634935FF32251B800000000000000000
00000000655A5380CAB4A5FFE4D9D2FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEEE6E1FFDCCDC3FFEEE6E1FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFE9E0DAFFD3C2B6FFE8E0D9FFFEFDFCFFFEFBFAFFFDF9F7FFFDF7F4FF
FDF5F0FFE2D5CCFFC7B4A7FF957F6EFF634935FF32251B800000000000000000
00000000665B5480CCB6A7FFE5DAD3FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEEE6E2FFDDCEC5FFEEE6E2FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFE9E1DBFFD4C4B8FFE9E1DBFFFEFEFEFFFEFDFCFFFDFBFAFFFDF9F7FF
FDF7F3FFE3D6CEFFC8B5A8FF967F6FFF634935FF32251B800000000000000000
000000006C554B80D8AA94FFE3B9A8FFEEC8BBFFEDC7B9FFECC5B8FFEBC3B6FF
EAC1B5FFE1B3A5FFD8A595FFE0AFA2FFE7B9AFFFE6B8ADFFE5B6ACFFE4B4AAFF
E3B2A8FFD7A295FFCC9182FFD69E92FFDFAAA2FFDEA8A0FFDDA59DFFDCA29AFF
DB9F97FFCD8D83FFBE7B6EFFA66050FF8D4632FF472319800000000000000000
00000000724F4180E49E81FFE1987CFFDE9277FFDC8F74FFDA8B71FFD8876EFF
D6836BFFD48068FFD27C65FFD17862FFCF745FFFCD715CFFCB6D59FFC96956FF
C76552FFC5624FFFC35E4CFFC25A49FFC05646FFBE5343FFBC4F40FFBA4B3DFF
B8473AFFB64437FFB44034FFB54131FFB6422EFF5B2117800000000000000000
0000000074524480E7A486FFEBA78AFFEFAA8DFFEEA88BFFECA688FFEBA386FF
EAA083FFE99E80FFE79B7EFFE7987BFFE59578FFE49275FFE38F72FFE28C6FFF
E0886BFFDF8668FFDE8365FFDD8062FFDB7C5FFFDA7A5CFFD97659FFD87356FF
D77052FFD56E50FFD46B4DFFC7593EFFBA482FFF5D2418800000000000000000
0000000075554680EAAA8BFFF5B697FFFFC2A2FFFFC1A1FFFEC09FFFFEBF9DFF
FDBD9AFFFDBB98FFFCB996FFFCB793FFFBB590FFFBB38EFFFAB08BFFFAAE88FF
F9AB84FFF9A981FFF8A77DFFF7A57AFFF6A277FFF6A074FFF59D71FFF59B6EFF
F5996AFFF49768FFF39565FFD9714AFFBE4D2FFF5F2718800000000000000000
0000000074524480E7A486FFEBA78AFFEFAA8DFFEEA88BFFECA688FFEBA386FF
EAA083FFE99E80FFE79B7EFFE7987BFFE59578FFE49275FFE38F72FFE28C6FFF
E0886BFFDF8668FFDE8365FFDD8062FFDB7C5FFFDA7A5CFFD97659FFD87356FF
D77052FFD56E50FFD46B4DFFC95A3EFFBD4A30FF5F2518800000000000000000
00000000724F4180E49E81FFE1987CFFDE9277FFDC8F74FFDA8B71FFD8876EFF
D6836BFFD48068FFD27C65FFD17862FFCF745FFFCD715CFFCB6D59FFC96956FF
C76552FFC5624FFFC35E4CFFC25A49FFC05646FFBE5343FFBC4F40FFBA4B3DFF
B8473AFFB64437FFB44034FFB84332FFBC4630FF5E2318800000000000000000
0000000039282140724F4180714C3E806F493C806E483A806D4639806C443780
6B4236806A403480693E3380693C3180683A308067392E8066372D8065352B80
6433298063312880622F2680612D2580602B23805F2A22805E2820805D261F80
5C241D805B221C805A201A805C2219805E2318802F120C400000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
</a:ToolIcon>
<a:UseAsMetaClass>1</a:UseAsMetaClass>
<c:Categories>
<o:TypedCategoryTargetItem Id="o69">
<a:TypePublicName>ExtendedCompositionTargetItem</a:TypePublicName>
<a:ObjectID>8FCA02B4-FC57-47EC-86A5-1B5494B1BEBA</a:ObjectID>
<a:Name>Extended Compositions</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedCompositionTargetItem Id="o70">
<a:ObjectID>000522B0-5C69-492E-B204-BEEACAFAC7D9</a:ObjectID>
<a:Name>ColumnMappings</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:DestinationClassID>E66E5B1D-A046-4482-ADC2-5D6CCF8CBB85</a:DestinationClassID>
<a:DestinationStereotype>ColumnMapping</a:DestinationStereotype>
<a:Label>Column Mappings</a:Label>
<a:DefaultColumnFilter>NAME 80 &quot;_EXCEL_IMPORT.Skip.{C7A34CE3-E3F3-445D-A42E-B104A257C024}&quot; 20 &quot;_EXCEL_IMPORT.ColumnKind.{84D73BFA-C51B-47E2-BCE9-771FF6FF337C}&quot; 80 &quot;_EXCEL_IMPORT.AttributeDefinition.{BA0DC923-A1A5-41F3-9531-C625F58818ED}&quot; 80</a:DefaultColumnFilter>
<c:DestinationStereotypeObject>
<o:StereotypeTargetItem Ref="o71"/>
</c:DestinationStereotypeObject>
</o:ExtendedCompositionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o72">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>8FB6D878-F912-45C6-B13B-CDFC583C2BFD</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253811114</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o73">
<a:ObjectID>5B0EC107-3FCC-4AFC-8985-6994C8105D5A</a:ObjectID>
<a:Name>Columns</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>A description of columns mapping for this table</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim colnCol, list
   list = &quot;&quot;
   set colncol = obj.GetExtendedCollection(&quot;ColumnMappings&quot;, false)
   if not colncol is nothing then
      Dim coln, map, skip, knd
      For each coln in colncol
         if not list = &quot;&quot; then
            list = list + &quot;, &quot;
         end if
         skip = coln.GetExtendedAttribute(&quot;%CurrentTargetCode%.Skip&quot;)
         if skip then
            map = &quot;Skipped&quot; 
         else
            map = coln.GetExtendedAttribute(&quot;%CurrentTargetCode%.AttributeOrCollection&quot;)
            if map = &quot;&quot; then
               map = &quot;?&quot;
            end if
         end if
         list = list + coln.Name + &quot;=&quot; + map
      Next
      set coln = nothing
      set colncol = nothing
   end if
   %Get% = list
End Function</a:GetMethodScript>
<a:Label>Columns</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o74">
<a:ObjectID>E0805E1A-FB85-4D18-A94C-5125DF0B13B4</a:ObjectID>
<a:Name>Skip</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Indicates if this Excel table should be skipped from import</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
<a:Label>Skip Import</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o75">
<a:ObjectID>AB9851C0-AD5A-4519-8AD2-29991414EF5A</a:ObjectID>
<a:Name>ReadOnlyName</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The name of the document table to import</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.Name
End Function</a:GetMethodScript>
<a:Label>Read-only Name</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o76">
<a:ObjectID>6C124FC7-4ED7-4FAB-981A-6BB47C85F12D</a:ObjectID>
<a:Name>ImportedKind</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>A computed attribute that returns the kind of object that is associated to the table</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>10</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim metaclass, clssKind, clssname
   set metaclass = nothing
   clssKind = 0
   clssname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedType&quot;)
   if not clssname = &quot;&quot; then
      Dim metaclss
      set metaclss = RetrieveMetaclassFromImportedType(obj, clssname)
      if not metaclss is nothing then
         clsskind = CLng(metaclss.Kind)
         &#39;set metaclass = nothing
      else
         LogText &quot;Could not find &quot; + clssname + &quot; metaclass&quot;
      end if
   end if
   %Get% = clssKind
End Function</a:GetMethodScript>
<a:Label>Imported Kind</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o77">
<a:ObjectID>785649BB-C36B-43F1-8E63-9506AAF6E6DC</a:ObjectID>
<a:Name>ImportedType</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253545468</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The kind of object that must be created for this table</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allClassNames%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Imported Type</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o78">
<a:ObjectID>E814E07A-5911-45A0-B819-A4A4612C4967</a:ObjectID>
<a:Name>ImportedStereotype</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>An optional stereotype that the imported objects must have</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allTypeStereotypes%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Label>Imported Stereotype</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o79">
<a:ObjectID>4CF45A11-1932-427B-8552-EFCAC0C493A2</a:ObjectID>
<a:Name>ImportedClassName</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265121431</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The imported class name (may be a standard class name or a stereotype used as metaclass)</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allClassNames%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)

   Dim clssname
   clssname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedStereotype&quot;)
   if clssname = &quot;&quot; then
      clssname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedType&quot;)
   end if
   
   %Get% = clssname
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   
   dim metaclss, clssname
   if not value = &quot;&quot; then
      &#39; compute class name (last part) from value
      Dim pos
      pos = InStrRev(value, &quot;.&quot;)
      if pos &gt; 0 then
         clssname = Mid(value, pos+1)
      else
         clssname = value
      end if
      &#39; add library
      Dim lib, qualifiedClassname
      set lib = obj.model.metaclass.library
      qualifiedClassname = clssname
      if not lib is nothing then
         qualifiedClassname = lib.PublicName+&quot;.&quot;+clssname
         set lib = nothing
      end if
      &#39; retrieve metaclass by name
      set metaclss = metamodel.GetMetaClassByPublicName(qualifiedClassname)
      if not metaclss is nothing then
         &#39; Standard metaclass
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedType&quot;, value
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedStereotype&quot;, &quot;&quot;     
         set metaclss = nothing
      else
         &#39; Stereotype as metaclass
         &#39; We need to retrieve the stereotype definition
         &#39; and its associated metaclass
         Dim allStrnList, foundClassName
         foundClassname = &quot;ExtendedObject&quot; &#39; NO-NLS
         if pos &gt; 0 then
            &#39; sub-object case
            set allStrnList = obj.Model.GetMetaExtensionsForClass(cls_ExtendedSubObject, PdCommon.Cls_StereotypeTargetItem)
         else
            &#39; main object case
            set allStrnList = obj.GetCalculatedCollection(&quot;%CurrentTargetCode%.AllStereotypesAsMetaclass&quot;)  
         end if
         if not allStrnList is nothing then
            Dim strnDefn
            for each strnDefn in allStrnList
               if strnDefn.Name = clssname or strnDefn.Label = clssname then
                  if not strnDefn.Abstract and strnDefn.UseAsMetaclass and not strnDefn.Target.Code = &quot;%CurrentTargetCode%&quot; then
                     foundClassName = strnDefn.MetaclassName
                  end if
                  exit for
               end if
            next
            set strnDefn = nothing
            set allStrnList = nothing
         end if
         
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedType&quot;, foundClassName
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedStereotype&quot;, value        
      end if
   end if

End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Class Name</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o80">
<a:ObjectID>52F99473-F8E9-494E-9ECB-7EF2335AC730</a:ObjectID>
<a:Name>Selected</a:Name>
<a:CreationDate>1251987670</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Indicates if the import of this table is selected or should be skipped</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Skip&quot;) then
      %Get% = false
   else
      %Get% = true
   end if
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   if value then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Skip&quot;, false
   else
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Skip&quot;, true
   end if
End Sub</a:SetMethodScript>
<a:Label>Selected</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o81">
<a:ObjectID>5E0E4212-5CCD-4186-9C6F-79136F10391C</a:ObjectID>
<a:Name>ListOfInstantiableClasses</a:Name>
<a:CreationDate>1253001042</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Lists all classes that can be created in the model, including classes of sub-objects.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>14</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim clss, res, prefix1, prefix2
   res = &quot;&quot;
   For each clss in obj.GetCollectionByName(&quot;%CurrentTargetCode%.AllClasses&quot;)
      prefix1 = clss.PublicName &amp; &quot;.&quot;
      prefix2 = clss.LocalizedName &amp; &quot;.&quot;
      res = res &amp; clss.PublicName &amp; vbTab &amp; clss.LocalizedName &amp; &quot;;&quot;
      res = res &amp; ListOfSubObjectClasses(clss, prefix1, prefix2, 5)
   Next
   %Get% = res
End Function</a:GetMethodScript>
<a:Label>List of instantiable classes</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o82">
<a:ObjectID>426385FF-047A-4915-A98D-F0269115CC27</a:ObjectID>
<a:Name>IsSubObject</a:Name>
<a:CreationDate>1253547647</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Checks if objects associated to this table are sub-objects</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim clssname, subObj
   clssname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedType&quot;)
   if InStrRev(clssname, &quot;.&quot;) &gt; 0 then
      subObj = true
   else
      subObj = false
   end if
   %Get% = subObj
End Function</a:GetMethodScript>
<a:Label>Is sub-object</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o83">
<a:ObjectID>8930E344-33A2-49AB-B898-F5CF1F0D3348</a:ObjectID>
<a:Name>ListOfExtendedSubObjects</a:Name>
<a:CreationDate>1253809648</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Lists all extended sub-object classes available in the model.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   dim list, strnCol, strn, coll, clss, cont
   &#39; Retrieve all extended sub-objects stereotypes
   set strnCol = obj.Model.GetMetaExtensionsForClass(cls_ExtendedSubObject, PdCommon.Cls_StereotypeTargetItem)
   if not strnCol is nothing then
      for each strn in strnCol
         &#39; Filter to keep only metaclass ones
         if not strn.Abstract and not strn.Target.Code = &quot;%CurrentTargetCode%&quot; then
            &#39; Check if they are used by an extended composition
            for each coll in strn.AssociatedCollections
               if coll.IsKindOf(Cls_ExtendedCompositionTargetItem) then
                  &#39; Extended composition found
                  Dim sel
                  set sel = obj.Model.CreateSelection()
                  if not sel is nothing then
                     AddExtendedSubObjectParentsInSelection strn, sel
                     Dim prnt
                     for each prnt in sel.Objects                    
                        list = list + BuildListOfExtendedSubObjectForOneParent(obj.Model, prnt, strn.Name, strn.LabelOrName)
                     next
                     sel.Delete
                     set sel = nothing
                     set prnt = nothing
                  end if
               end if
            next
         end if
      next      
      set cont = nothing
      set clss = nothing
      set coll = nothing
      set strn = nothing
      set strnCol = nothing
   end if
   %Get% = list
End Function</a:GetMethodScript>
<a:Label>List of extended sub-objects</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o84">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:ObjectID>F754E2B9-3398-48D8-944F-F9ED88E101A0</a:ObjectID>
<a:Name>Forms</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1248190020</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o85">
<a:ObjectID>89115CD7-1B0D-4CF3-91FC-22FE7AF1387D</a:ObjectID>
<a:Name>General</a:Name>
<a:Code>GENERAL</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StandardAttribute Attribute=&quot;Parent&quot; Caption=&quot;Imported file&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ReadOnlyName&quot; Caption=&quot;Table&quot; AttributeID=&quot;{AB9851C0-AD5A-4519-8AD2-29991414EF5A}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout1&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;ImportedClassName&quot; Caption=&quot;Imported class name&quot; AttributeID=&quot;{4CF45A11-1932-427B-8552-EFCAC0C493A2}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewMetaclass&quot; Name=&quot;DefineNewMetaclass&quot; Caption=&quot;New...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;ExtendedAttribute Attribute=&quot;Columns&quot; Caption=&quot;Mapping&quot; AttributeID=&quot;{5B0EC107-3FCC-4AFC-8985-6994C8105D5A}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Selected&quot; Caption=&quot;Import table&quot; AttributeID=&quot;{52F99473-F8E9-494E-9ECB-7EF2335AC730}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;StandardAttribute Attribute=&quot;Comment&quot; Caption=&quot;Comment&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; LeftText=&quot;false&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265199063</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>General</a:Label>
<a:FormType>GENERAL</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
<o:FormTargetItem Id="o86">
<a:ObjectID>DE69B49F-D02C-4AF8-9C9F-8265461FCE8E</a:ObjectID>
<a:Name>ImportTable</a:Name>
<a:Code>Import Table</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StaticText Name=&quot;Intro&quot; Caption=&quot;The wizard has found a table to import. Select the kind of\nPowerDesigner object you want to create for each table row.&quot; /&gt;
   &lt;Space Name=&quot;Space2&quot; Width=&quot;411&quot; Height=&quot;12&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout1&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;Selected&quot; Caption=&quot;Import table&quot; AttributeID=&quot;{97559867-38CC-4D8C-B66B-8CB1A5E702FA}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
      &lt;ExtendedAttribute Attribute=&quot;ReadOnlyName&quot; Caption=&quot; &quot; AttributeID=&quot;{AB9851C0-AD5A-4519-8AD2-29991414EF5A}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;5&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;Space Name=&quot;Space1&quot; Width=&quot;6&quot; Height=&quot;6&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout2&quot; &gt;
      &lt;Space Name=&quot;Space3&quot; Width=&quot;64&quot; Height=&quot;54&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
      &lt;ExtendedAttribute Attribute=&quot;ImportedClassName&quot; Caption=&quot;As&quot; AttributeID=&quot;{4CF45A11-1932-427B-8552-EFCAC0C493A2}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;16&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewMetaclass&quot; Name=&quot;DefineNewMetaclass&quot; Caption=&quot;New...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265199063</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Import Table</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
<o:FormTargetItem Id="o87">
<a:ObjectID>AABD1E42-5494-4DEF-A4FA-BFF93E059CEC</a:ObjectID>
<a:Name>NewObjectType</a:Name>
<a:Code>New Object Type</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StaticText Name=&quot;Select class name&quot; Caption=&quot;Specify a name and plural name for your new object type.&quot; /&gt;
   &lt;Space Name=&quot;Space1&quot; Width=&quot;6&quot; Height=&quot;12&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;Edit Name=&quot;Name&quot; Caption=&quot;Name&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; ReadOnly=&quot;No&quot; /&gt;
   &lt;Edit Name=&quot;Plural&quot; Caption=&quot;Plural&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; ReadOnly=&quot;No&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265199063</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>New Object Type</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
<o:FormTargetItem Id="o88">
<a:ObjectID>9D4E7DD0-A1ED-41F2-BB1B-BD2F724CD076</a:ObjectID>
<a:Name>AllExas</a:Name>
<a:Code>All Extended Attributes</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Attribute=&quot;Columns&quot; Caption=&quot;caption&quot; AttributeID=&quot;{5B0EC107-3FCC-4AFC-8985-6994C8105D5A}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ImportedClassName&quot; Caption=&quot;caption&quot; AttributeID=&quot;{4CF45A11-1932-427B-8552-EFCAC0C493A2}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ImportedKind&quot; Caption=&quot;caption&quot; AttributeID=&quot;{6C124FC7-4ED7-4FAB-981A-6BB47C85F12D}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ImportedStereotype&quot; Caption=&quot;caption&quot; AttributeID=&quot;{E814E07A-5911-45A0-B819-A4A4612C4967}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ImportedType&quot; Caption=&quot;Imported Type&quot; AttributeID=&quot;{785649BB-C36B-43F1-8E63-9506AAF6E6DC}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ReadOnlyName&quot; Caption=&quot;caption&quot; AttributeID=&quot;{AB9851C0-AD5A-4519-8AD2-29991414EF5A}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;IsSubObject&quot; Caption=&quot;caption&quot; AttributeID=&quot;{426385FF-047A-4915-A98D-F0269115CC27}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ListOfExtendedSubObjects&quot; Caption=&quot;caption&quot; AttributeID=&quot;{8930E344-33A2-49AB-B898-F5CF1F0D3348}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ListOfInstantiableClasses&quot; Caption=&quot;label&quot; AttributeID=&quot;{5E0E4212-5CCD-4186-9C6F-79136F10391C}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ReadOnlyName&quot; Caption=&quot;caption&quot; AttributeID=&quot;{AB9851C0-AD5A-4519-8AD2-29991414EF5A}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Selected&quot; Caption=&quot;caption&quot; AttributeID=&quot;{52F99473-F8E9-494E-9ECB-7EF2335AC730}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Skip&quot; Caption=&quot;Skip Import&quot; AttributeID=&quot;{E0805E1A-FB85-4D18-A94C-5125DF0B13B4}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1277892078</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Just to avoid the extended attributes page on the property sheet</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>All Extended Attributes</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o89">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:ObjectID>2214817E-6142-415D-9732-DDADE4D4ACB1</a:ObjectID>
<a:Name>Templates</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253811114</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o90">
<a:ObjectID>0B23F799-12AE-41B6-AF15-649F101D9A7E</a:ObjectID>
<a:Name>allInstantiableClasses</a:Name>
<a:TemplateTargetItem.Value>%ListOfInstantiableClasses%</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253005435</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o91">
<a:ObjectID>5E8171C0-DBD7-4E43-A894-9D5CC1A9BFAA</a:ObjectID>
<a:Name>allStereotypes</a:Name>
<a:TemplateTargetItem.Value>.foreach_item(AllStereotypesAsMetaclass)
%Name%\t%LabelOrName%;
.next()</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1254132606</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o92">
<a:ObjectID>F325542B-7618-4B6E-9742-E1D052746064</a:ObjectID>
<a:Name>allTypeStereotypes</a:Name>
<a:TemplateTargetItem.Value>.vbscript()

   &#39; Retrieve the class kind associated to the table
   ScriptResult = &quot;&quot; 
   Dim mapping
   set mapping = ActiveSelection.Item(0)
   if not mapping is nothing then
      Dim metaclss
      set metaclss = Metamodel.GetMetaclassByKind(mapping.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
      if not metaclss is nothing then
         &#39; Retrieve all stereotypes
         dim strnCol
         set strnCol = mapping.Model.GetMetaExtensionsForClass(metaclss.Kind, PdCommon.Cls_StereotypeTargetItem)
         if not strnCol is nothing then
            dim sttp
            for each sttp in strnCol
               if not sttp.Abstract and sttp.UseAsMetaclass then
                  If not ScriptResult = &quot;&quot; then
                     ScriptResult = ScriptResult + &quot;;&quot;
                  end if            
                  ScriptResult = ScriptResult + sttp.LabelOrName
               end if
            next                  
            set strnCol = nothing
         end if
      
      end if
   end if
.endvbscript</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o93">
<a:ObjectID>FD448030-2B3D-4580-A6FD-E4C482F5EAB2</a:ObjectID>
<a:Name>allClassNames</a:Name>
<a:TemplateTargetItem.Value>.set_value (tmpStr, %allInstantiableClasses%[;%allStereotypes%][;%allExtSubObjects%], new)
%sortStringCollection(tmpStr)%</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1264157211</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o94">
<a:ObjectID>95BD53AA-B979-4E32-BDA0-1B639ABE77F3</a:ObjectID>
<a:Name>allExtSubObjects</a:Name>
<a:TemplateTargetItem.Value>%ListOfExtendedSubObjects%</a:TemplateTargetItem.Value>
<a:CreationDate>1253809648</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253897961</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o95">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>E22D9E25-AB37-4DD9-BD9F-F9729794E3A5</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o96">
<a:ObjectID>5F82F28A-1DC8-439F-BDD9-D813D571BC2C</a:ObjectID>
<a:Name>DefineNewMetaclass</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   
   &#39; Initialize the metaclass with extended object if empty
   Dim kind
   kind = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;)
   if kind = 0 then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedType&quot;, &quot;ExtendedObject&quot; 
      kind = PdCommon.Cls_ExtendedObject
   end if
   
   &#39; create stereotype
   Dim sttp
   set sttp = CreateNewMetaclass(obj, kind)
   if not sttp is nothing then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ImportedStereotype&quot;, sttp.Name 
      set sttp = nothing
   end if
   
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o97">
<a:TypePublicName>CalculatedCollectionTargetItem</a:TypePublicName>
<a:ObjectID>BF68FD7B-AACE-48D8-A964-0566822E63C6</a:ObjectID>
<a:Name>Calculated Collections</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CalculatedCollectionTargetItem Id="o98">
<a:ObjectID>0FCAC541-CF84-45F0-A1B2-E900364BAD4F</a:ObjectID>
<a:Name>AllClasses</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253004185</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Retrieves all instantiable classes</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:DefaultColumnFilter>SDSC 120</a:DefaultColumnFilter>
<a:EvaluationScript>Function %Collection%(obj, coll)

   &#39; Retrieve the folder of current import object
   &#39; that corresponds to the place where objects will be created
   dim fldr, fldrclss
   set fldr = obj.Folder
   
   &#39; Retrieve its metaclass
   set fldrclss = nothing
   if not fldr is nothing then
      set fldrclss = fldr.metaclass
   end if

   &#39; Deactivate validation because metaclasses are not supposed to be added in collection   
   Dim oldValidation
   oldValidation = validationMode
   validationMode = false
   
   &#39; To get all available object kinds,
   &#39; loop on all composition direct collection 
   &#39; of this folder metaclass
   ScriptResult = &quot;&quot;   
   if not fldrclss is nothing then
      dim fldrcoll, collclss
      for each fldrcoll in fldrclss.Collections
         if not fldrcoll.Inverse and fldrcoll.Composition and (fldrcoll.MemberFlags and SMEMB_HIDDEN) = 0 and (fldrcoll.flags and SCOLL_SHCTCONTENT) = 0 then
            &#39; Retrieve its content type and check it is not an abstract one
            set collclss = fldrcoll.ContentClass
            if not collclss is nothing then
               if not collclss.abstract and (collclss.flags and SCLSS_SUBOBJECT) = 0 then
                  if not collclss.Kind = cls_ExtendedModelDefinition and not collclss.Kind = cls_Shortcut and not collclss.Kind = cls_Replication and not collclss.Kind = cls_TargetModel and not collclss.Kind = cls_PersistentSelection and not collclss.Kind = cls_PersistentSelectionManager and not collclss.Kind = cls_Settings and not collclss.Kind = cls_ListReport then
                     Dim clssDefn
                     set clssDefn = Metamodel.GetMetaclassByKind(collclss.Kind)
                     if not clssDefn is nothing then
                        Dim canCreate, msg
                        canCreate = false
                        if (clssDefn.Flags and SCLSS_GLOBAL) = SCLSS_GLOBAL then
                           canCreate = fldr.CanCreateObject(clssDefn.Kind, msg)
                        else
                           canCreate = fldr.Model.CanCreateObject(clssDefn.Kind, msg)
                        end if
                        if canCreate then          
                           coll.Add clssDefn
                        end if
                        set clssDefn = nothing
                     end if
                  end if
               end if
            end if            
         end if      
      next
      set fldrcoll = nothing
      set collclss = nothing
   end if
   set fldr = nothing
   set fldrclss = nothing
   
   &#39; Restore old validation mode
   validationMode = oldValidation
   
   %Collection% = True
   
End Function</a:EvaluationScript>
</o:CalculatedCollectionTargetItem>
<o:CalculatedCollectionTargetItem Id="o99">
<a:ObjectID>0E6AC044-398F-4EBF-A02D-7AA82C00EEDF</a:ObjectID>
<a:Name>AllStereotypesAsMetaclass</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1254141854</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Retrieves all instantiable stereotype as metaclass definitions</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:DefaultColumnFilter>SDSC 120</a:DefaultColumnFilter>
<a:EvaluationScript>Function %Collection%(obj, coll)

   &#39; Deactivate validation because stereotype definitions are not supposed to be added in collection   
   Dim oldValidation
   oldValidation = validationMode
   validationMode = false

   &#39; Loop first on all instantiable classes
   Dim allClssList, strncol, sttp
   set allClssList = obj.GetCalculatedCollection(&quot;%CurrentTargetCode%.AllClasses&quot;)  
   if not allClssList is nothing then
      Dim clssDefn
      for each clssDefn in allClssList
         
         &#39; Retrieve all stereotypes for this class
         set strnCol = obj.Model.GetMetaExtensionsForClass(clssDefn.Kind, PdCommon.Cls_StereotypeTargetItem)
         if not strnCol is nothing then
            for each sttp in strnCol
               if not sttp.Abstract and sttp.UseAsMetaclass then
                  if not sttp.Target.Code = &quot;%CurrentTargetCode%&quot; then &#39; Skip Excel improt classes
                     coll.Add sttp
                  end if
               end if
            next             
         end if
                           
      next
      set clssDefn = nothing
      set allClssList = nothing
   end if

   &#39; Restore old validation mode
   validationMode = oldValidation
   set sttp = nothing     
   set strnCol = nothing

   %Collection% = True
   
End Function</a:EvaluationScript>
</o:CalculatedCollectionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:StereotypeTargetItem>
<o:StereotypeTargetItem Id="o71">
<a:ObjectID>F2CAE5CA-7A35-4572-936E-7EA8096E6782</a:ObjectID>
<a:Name>ColumnMapping</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1251992762</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Defines the mapping between an Excel column and an object attribute</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Column Mapping</a:Label>
<a:PluralLabel>Excel Column Mappings</a:PluralLabel>
<a:ToolIcon>0D0000000800000008000000424D7E000000000000003E000000280000001000
0000100000000100010000000000400000000000000000000000000000000000
000000000000FFFFFF00FFFF0000FFFF00008001000080010000800100008001
0000800100008001000080010000800100008001000080010000800100008001
000080010000FFFF0000424D3605000000000000360400002800000010000000
100000000100080000000000000100000000000000000000000000004D000000
000000006349350099999900B4403400B6422E00B7A29300B8473A00B9A49500
BAA59600BAA69700BBA69700BC463000BC4F4000BDA89A00BDA99A00BE4D2F00
BEA99A00BFAB9D00BFAC9D00BFAC9E00C0564600C2AEA000C2AEA100C2AFA100
C35E4C00C3AE9E00C5B2A500C7655200C8B2A300C8B5A800C8B5A900C8B6A900
CB6D5900CBB9AC00CBB9AD00CCB6A700CDCD0000CEBCB000CEBDB100CF745F00
D1C0B400D1C0B500D27C6500D4C3B800D4C4B800D5C4B900D6836B00D7C6BC00
D7C7BB00D7C7BC00D9C9BF00D9CBC200DA8B7100DBCCC100DCCCC100DDCEC500
DE927700E0D3CA00E49E8100E4D8D000EAAA8B00F5CFB700F5D5C000F6D5C000
F7DBCA00F9E1D300F9E2D300FAE7DC00FAEDE500FBEEE400FBF3ED00FCF3ED00
FDF7F300FDF7F400FDFBF900FDFBFA00FEFEFE00000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0005010101010101010101010101010000053326221E1A16130D0A0705050100
00054C4C4B2224242411403F3D05010000054C4C4C252424241641403E070100
0005392F2B2926211F1A17120E09010000084C4C4C2D2424241F4543420D0100
00104C4C4C302424242146444311010000193B373632312C2826211E1A150100
001C4C4C4C35242424284A49471A010000234C4C4C372424242C4C4B481D0100
003A38342E2A27201B18140C06030400003C0202020202020202020202020F00
003A38342E2A27201B18140C06030B0000000000000000000000000000000000
0D0000001000000010000000424DBE000000000000003E000000280000002000
0000200000000100010000000000800000000000000000000000000000000000
000000000000FFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000
0007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C000
0007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C000
0007C0000007C0000007C0000007C0000007C0000007C0000007C0000007C000
0007FFFFFFFFFFFFFFFF424D3610000000000000360000002800000020000000
2000000001002000000000000010000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000002E2925405C514A80473B328032251B8032251B8032251B8032251B80
32251B8032251B8032251B8032251B8032251B8032251B8032251B8032251B80
32251B8032251B8032251B8032251B8032251B8032251B8032251B8032251B80
32251B8032251B8032251B8032251B8032251B8019130E400000000000000000
000000005C514A80B7A293FF8D7664FF634935FF634935FF634935FF634935FF
634935FF634935FF634935FF634935FF634935FF634935FF634935FF634935FF
634935FF634935FF634935FF634935FF634935FF634935FF634935FF634935FF
634935FF634935FF634935FF634935FF634935FF32251B800000000000000000
000000005C514A80B7A293FFAB9788FF9E8A7CFF9C8778FF998373FF988272FF
978171FF978070FF967F6FFF957F6EFF947E6DFF947D6CFF937C6BFF927B6BFF
917B6AFF917A69FF907968FF907867FF8F7866FF8F7766FF8E7765FF8E7665FF
8D7664FF8D7664FF8D7664FF78604DFF634935FF32251B800000000000000000
000000005C514A80B7A293FFC8B7ABFFD9CBC2FFD4C4BAFFCEBDB1FFCDBBAFFF
CBB9ADFFCAB7ABFFC8B5A9FFC7B4A7FFC5B2A5FFC4B0A3FFC2AEA1FFC1ADA0FF
BFAC9EFFBEAA9CFFBDA89AFFBCA799FFBBA697FFBAA596FFB9A495FFB8A394FF
B7A293FFB7A293FFB7A293FF8D7664FF634935FF32251B800000000000000000
000000005C514A80B7A293FFD2C4BAFFECE5E0FFE9E1DCFFE6DED8FFE6DCD6FF
E4DAD4FFD7C9C0FFCAB7ABFFCABC7FFFC9C053FFC9BF52FFC8BE51FFC7BD50FF
C6BD4FFFC2B376FFBEAA9CFFCCB5A7FFD9C1B1FFD9BFAEFFD8BDABFFD7BBA8FF
D6B9A5FFC7AE9CFFB7A293FF8D7664FF634935FF32251B800000000000000000
000000005C514A80B7A293FFDBD0C9FFFEFEFEFFFEFEFEFFFEFEFEFFFEFDFCFF
FDFBFAFFE4DAD4FFCBB9ADFFCCC357FFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFC6BC4FFFBFAB9DFFDBC3B4FFF7DBCAFFF7D8C5FFF6D5C0FFF6D2BCFF
F5CFB7FFD6B9A5FFB7A293FF8D7664FF634935FF32251B800000000000000000
000000005C514A80B7A293FFDBD0C9FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFDFF
FEFDFCFFE5DCD6FFCDBBAFFFCDC458FFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFC7BD50FFC1AD9FFFDDC6B7FFF8DECFFFF8DBCAFFF7D8C5FFF6D5C1FF
F5D2BCFFD7BBA8FFB8A394FF8E7765FF634935FF32251B800000000000000000
000000005C514A80B7A293FFDBD0C9FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFE6DDD7FFCEBCB0FFCEC558FFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFC8BE51FFC2AEA1FFDEC8BAFFF9E1D3FFF8DECFFFF7DBCAFFF6D8C5FF
F5D5C0FFD7BDABFFB9A495FF8E7765FF634935FF32251B800000000000000000
000000005C514A80B7A293FFD4C6BCFFEFE9E4FFEDE6E1FFEBE2DDFFEAE2DCFF
E9E1DBFFDDD0C7FFD0BEB3FFCFC286FFCEC559FFCDC458FFCCC356FFCCC356FF
CBC255FFC8B97CFFC4B0A3FFD1BDAFFFDEC8BAFFDDC6B7FFDBC4B4FFDAC2B1FF
D9BFADFFCAB3A2FFBAA596FF8F7866FF634935FF32251B800000000000000000
000000005C514A80B7A293FFCCBBAFFFE0D3CAFFDCCDC3FFD7C6BCFFD6C5BAFF
D4C3B8FFD3C2B7FFD1C0B5FFD0BFB3FFCEBDB1FFCDBBAFFFCBB9ACFFCAB8ABFF
C8B6A9FFC7B4A7FFC5B2A5FFC4B1A3FFC2AFA1FFC1AE9FFFBFAC9DFFBEAB9CFF
BDA99AFFBCA899FFBAA697FF8F7866FF634935FF32251B800000000000000000
000000005D524B80B9A495FFD4C7BDFFEFE9E4FFEDE6E1FFEBE2DDFFEAE2DCFF
E9E1DBFFDFD2CAFFD3C2B7FFD1C488FFCEC559FFCDC458FFCCC356FFCCC356FF
CBC255FFC9BB7EFFC7B4A7FFD3C2B5FFDFCFC3FFDECDC0FFDDCABDFFDCC8BAFF
DBC6B7FFCCB7A8FFBCA799FF907967FF634935FF32251B800000000000000000
000000005D534B80BAA596FFDCD2CAFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEAE1DCFFD5C4B9FFD1C95DFFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFCBC255FFC8B6A9FFE2D2C7FFFBEEE4FFFBEBE0FFFAE7DCFFFAE5D8FF
F9E2D3FFDBC5B7FFBDA89AFF907968FF634935FF32251B800000000000000000
000000005E544C80BCA798FFDDD3CBFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEBE2DDFFD6C6BAFFD2CA5EFFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFCCC356FFCAB8ABFFE3D4CAFFFBF1E9FFFBEEE5FFFAEAE1FFFAE8DDFF
FAE5D8FFDCC7BAFFBEAA9CFF917A69FF634935FF32251B800000000000000000
000000005F554D80BEA99AFFDED4CCFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEBE3DDFFD7C7BBFFD2CA5EFFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFCCC356FFCBB9ACFFE3D6CDFFFBF3EDFFFBF0E9FFFAEDE5FFFAEAE1FF
FAE7DCFFDDC9BDFFBFAB9DFF917A69FF634935FF32251B800000000000000000
0000000061564E80C1AC9CFFD9CCC2FFF1EBE7FFF0E9E5FFEEE6E2FFEEE6E1FF
EDE5E0FFE3D7CFFFD8C8BDFFD5C98EFFD2CA5EFFD2CA5DFFD1C95CFFD0C85BFF
CFC75AFFCEC185FFCDBBAFFFD8C9BEFFE3D6CDFFE3D4CAFFE1D1C7FFE1CFC4FF
E0CDC1FFD1BDB0FFC1AD9FFF927B6AFF634935FF32251B800000000000000000
0000000062574F80C3AE9EFFD4C3B7FFE4D8D0FFE1D3CBFFDDCEC5FFDDCDC3FF
DCCCC1FFDBCBC0FFD9C9BFFFD8C8BEFFD7C7BCFFD6C6BAFFD4C4B8FFD3C2B6FF
D1C0B4FFD0BFB3FFCEBDB1FFCDBBAFFFCBB9ACFFCAB7ABFFC8B5A9FFC7B4A7FF
C5B2A5FFC4B0A3FFC2AEA0FF937C6BFF634935FF32251B800000000000000000
0000000063585180C6B0A1FFDCCEC4FFF1EBE7FFF0E9E5FFEEE6E2FFEEE6E1FF
EDE5E0FFE4D8D0FFDACBC0FFD6CB90FFD2CA5EFFD2CA5DFFD1C95CFFD0C85BFF
CFC75AFFD0C387FFD0BFB3FFDACDC3FFE4DAD3FFE4D8D1FFE3D6CFFFE2D5CCFF
E1D3C9FFD3C2B6FFC4B0A3FF947D6CFF634935FF32251B800000000000000000
0000000064595280C8B2A3FFE3D8D1FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEDE5E0FFDBCCC1FFD4CD61FFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFCFC75AFFD1C0B4FFE7DED7FFFDFBF9FFFDF9F7FFFDF7F4FFFDF5F1FF
FCF3EDFFE1D3C9FFC5B2A5FF947E6DFF634935FF32251B800000000000000000
00000000655A5380CAB4A5FFE4D9D2FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEEE6E1FFDCCDC3FFD5CE62FFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFD0C85BFFD3C2B6FFE8E0D9FFFEFDFCFFFEFBFAFFFDF9F7FFFDF7F4FF
FDF5F0FFE2D5CCFFC7B4A7FF957F6EFF634935FF32251B800000000000000000
00000000665B5480CCB6A7FFE5DAD3FFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFF
FEFEFEFFEEE6E2FFDDCEC5FFD5CE63FFCDCD00FFCDCD00FFCDCD00FFCDCD00FF
CDCD00FFD1C95CFFD4C4B8FFE9E1DBFFFEFEFEFFFEFDFCFFFDFBFAFFFDF9F7FF
FDF7F3FFE3D6CEFFC8B5A8FF967F6FFF634935FF32251B800000000000000000
000000006C554B80D8AA94FFE3B9A8FFEEC8BBFFEDC7B9FFECC5B8FFEBC3B6FF
EAC1B5FFE1B3A5FFD8A595FFD3A363FFCEA130FFCD9F2EFFCC9D2DFFCB9B2BFF
CA9929FFCB9656FFCC9182FFD69E92FFDFAAA2FFDEA8A0FFDDA59DFFDCA29AFF
DB9F97FFCD8D83FFBE7B6EFFA66050FF8D4632FF472319800000000000000000
00000000724F4180E49E81FFE1987CFFDE9277FFDC8F74FFDA8B71FFD8876EFF
D6836BFFD48068FFD27C65FFD17862FFCF745FFFCD715CFFCB6D59FFC96956FF
C76552FFC5624FFFC35E4CFFC25A49FFC05646FFBE5343FFBC4F40FFBA4B3DFF
B8473AFFB64437FFB44034FFB54131FFB6422EFF5B2117800000000000000000
0000000074524480E7A486FFD29D87FFBC9688FFBB9487FFBA9285FFB99084FF
B88E82FFB78D81FFB68B7FFFB5897EFFB4877CFFB3857BFFB28379FFB18178FF
B07F76FFAF7E74FFAE7C73FFAE7A71FFAD7870FFAC766EFFAB746DFFAA726BFF
A9706AFFA86F68FFA76D67FFB15A4BFFBA482FFF5D2418800000000000000000
0000000075554680EAAA8BFFC2A292FF999999FF999999FF999999FF999999FF
999999FF999999FF999999FF999999FF999999FF999999FF999999FF999999FF
999999FF999999FF999999FF999999FF999999FF999999FF999999FF999999FF
999999FF999999FF999999FFAC7364FFBE4D2FFF5F2718800000000000000000
0000000074524480E7A486FFD29D87FFBC9688FFBB9487FFBA9285FFB99084FF
B88E82FFB78D81FFB68B7FFFB5897EFFB4877CFFB3857BFFB28379FFB18178FF
B07F76FFAF7E74FFAE7C73FFAE7A71FFAD7870FFAC766EFFAB746DFFAA726BFF
A9706AFFA86F68FFA76D67FFB25B4BFFBD4A30FF5F2518800000000000000000
00000000724F4180E49E81FFE1987CFFDE9277FFDC8F74FFDA8B71FFD8876EFF
D6836BFFD48068FFD27C65FFD17862FFCF745FFFCD715CFFCB6D59FFC96956FF
C76552FFC5624FFFC35E4CFFC25A49FFC05646FFBE5343FFBC4F40FFBA4B3DFF
B8473AFFB64437FFB44034FFB84332FFBC4630FF5E2318800000000000000000
0000000039282140724F4180714C3E806F493C806E483A806D4639806C443780
6B4236806A403480693E3380693C3180683A308067392E8066372D8065352B80
6433298063312880622F2680612D2580602B23805F2A22805E2820805D261F80
5C241D805B221C805A201A805C2219805E2318802F120C400000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
</a:ToolIcon>
<a:UseAsMetaClass>1</a:UseAsMetaClass>
<c:Categories>
<o:TypedCategoryTargetItem Id="o100">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:ObjectID>5DB21CE8-C8FE-4AB1-9EB6-312BBDFA04A3</a:ObjectID>
<a:Name>Forms</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253087318</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o101">
<a:ObjectID>3B26E42A-7A22-47B8-9E3E-4724DD04820D</a:ObjectID>
<a:Name>General</a:Name>
<a:Code>GENERAL</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StandardAttribute Attribute=&quot;ParentObject&quot; Caption=&quot;Parent&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ReadOnlyName&quot; Caption=&quot;Column&quot; AttributeID=&quot;{D5C78C1E-274B-45A5-B540-E45F2644613D}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ColumnSimplifiedKind&quot; Caption=&quot;Import as&quot; AttributeID=&quot;{34607321-D629-4FA8-86F3-F1616CF6B72E}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;HorizontalRadios&quot; LeftText=&quot;false&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout4&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;StandardOrReferenceAttribute&quot; Caption=&quot;Attribute&quot; AttributeID=&quot;{A225AA6F-3423-45A3-902E-448167BF5C28}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewAttribute&quot; Name=&quot;DefineNewAttribute&quot; Caption=&quot;New...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout2&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;EditableRelationshipCollection&quot; Caption=&quot;List of objects&quot; AttributeID=&quot;{2C3F9569-78BC-4A6F-AF7A-19AF115519E7}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewRelationship&quot; Name=&quot;DefineNewRelationship&quot; Caption=&quot;New...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout3&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;EditableRefClassName&quot; Caption=&quot;Object type&quot; AttributeID=&quot;{971C97DA-C73D-4F57-8436-44E2D40AC560}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; Display=&quot;Combobox&quot; /&gt;
      &lt;ExtendedAttribute Attribute=&quot;ReadOnlyRefClassName&quot; Caption=&quot;Object type&quot; AttributeID=&quot;{902C95B3-6A48-48A2-84AE-4A18958F1011}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;ExtendedAttribute Attribute=&quot;Selected&quot; Caption=&quot;Import column&quot; AttributeID=&quot;{97559867-38CC-4D8C-B66B-8CB1A5E702FA}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;GroupBox Name=&quot;Options&quot; Caption=&quot;Options&quot; ControlAsLabel=&quot;No&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;CreateIfNotExist&quot; Caption=&quot;Create associated objects if not found&quot; AttributeID=&quot;{38713B5C-1C92-498B-97A0-92EA87A3826B}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
      &lt;ExtendedAttribute Attribute=&quot;RefAttribute&quot; Caption=&quot;Reference associated objects by&quot; AttributeID=&quot;{36DB3C72-8D30-49CA-B2EF-F34A858E8CC9}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;HorizontalRadios&quot; LeftText=&quot;false&quot; /&gt;
      &lt;ExtendedAttribute Attribute=&quot;StringForTrue&quot; Caption=&quot;String literal for &#39;True&#39; value&quot; AttributeID=&quot;{4118330A-50DF-44F5-B751-BFAC4DE8A238}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;3&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;/GroupBox&gt;
   &lt;StandardAttribute Attribute=&quot;Comment&quot; Caption=&quot;Comment&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;Yes&quot; LeftText=&quot;false&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1353062270</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>General</a:Label>
<a:FormType>GENERAL</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
<o:FormTargetItem Id="o102">
<a:ObjectID>D4EA9EDF-B534-49EB-90EC-C3FFED75BB49</a:ObjectID>
<a:Name>ImportColumn</a:Name>
<a:Code>Import Column</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StaticText Name=&quot;Intro&quot; Caption=&quot;Select the PowerDesigner attribute or list that is contained in this column.\nFor lists or attributes that reference other objects,\nyou must also specify the associated PowerDesigner object.&quot; /&gt;
   &lt;Space Name=&quot;Space2&quot; Width=&quot;410&quot; Height=&quot;12&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout1&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;Selected&quot; Caption=&quot;Import column&quot; AttributeID=&quot;{97559867-38CC-4D8C-B66B-8CB1A5E702FA}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
      &lt;ExtendedAttribute Attribute=&quot;ReadOnlyName&quot; Caption=&quot; &quot; AttributeID=&quot;{D5C78C1E-274B-45A5-B540-E45F2644613D}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;4&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
      &lt;StaticText Name=&quot;Table&quot; Caption=&quot;of table &quot; /&gt;
      &lt;StandardAttribute Attribute=&quot;ParentObject&quot; Caption=&quot; &quot; SizeInChars=&quot;4&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;Space Name=&quot;Space1&quot; Width=&quot;6&quot; Height=&quot;6&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ColumnSimplifiedKind&quot; Caption=&quot;As&quot; AttributeID=&quot;{34607321-D629-4FA8-86F3-F1616CF6B72E}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;HorizontalRadios&quot; LeftText=&quot;false&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout4&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;StandardOrReferenceAttribute&quot; Caption=&quot;Attribute&quot; AttributeID=&quot;{A225AA6F-3423-45A3-902E-448167BF5C28}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewAttribute&quot; Name=&quot;DefineNewAttribute&quot; Caption=&quot;New...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout2&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;EditableRelationshipCollection&quot; Caption=&quot;List of objects&quot; AttributeID=&quot;{2C3F9569-78BC-4A6F-AF7A-19AF115519E7}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewRelationship&quot; Name=&quot;DefineNewRelationship&quot; Caption=&quot;New...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout3&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;EditableRefClassName&quot; Caption=&quot;Object&quot; AttributeID=&quot;{971C97DA-C73D-4F57-8436-44E2D40AC560}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;BrowseExternalClasses&quot; Name=&quot;BrowseExternalClasses&quot; Caption=&quot;Browse...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Browse&quot; /&gt;
      &lt;ExtendedAttribute Attribute=&quot;ReadOnlyRefClassName&quot; Caption=&quot;Object&quot; AttributeID=&quot;{902C95B3-6A48-48A2-84AE-4A18958F1011}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;/HorizontalLayout&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1372072815</a:ModificationDate>
<a:Modifier>I063974</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>Import Column</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
<o:FormTargetItem Id="o103">
<a:ObjectID>6CE744D6-B91E-4314-9B23-B90B9D29379B</a:ObjectID>
<a:Name>AllExas</a:Name>
<a:Code>All Extended Attributes</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Attribute=&quot;Attribute&quot; Caption=&quot;Attribute&quot; AttributeID=&quot;{1AE67B0A-E27B-4924-A971-0239983D68D3}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;AttributeDefinition&quot; Caption=&quot;label&quot; AttributeID=&quot;{BA0DC923-A1A5-41F3-9531-C625F58818ED}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;IsBooleanAttribute&quot; Caption=&quot;label&quot; AttributeID=&quot;{63FF7293-8CEA-4CF7-859B-C0165C98FC91}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ColumnKind&quot; Caption=&quot;label&quot; AttributeID=&quot;{84D73BFA-C51B-47E2-BCE9-771FF6FF337C}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;CreateIfNotExist&quot; Caption=&quot;label&quot; AttributeID=&quot;{38713B5C-1C92-498B-97A0-92EA87A3826B}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ReadOnlyName&quot; Caption=&quot;label&quot; AttributeID=&quot;{D5C78C1E-274B-45A5-B540-E45F2644613D}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RefAttribute&quot; Caption=&quot;Referenced Attribute&quot; AttributeID=&quot;{36DB3C72-8D30-49CA-B2EF-F34A858E8CC9}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RefClassName&quot; Caption=&quot;Referenced class name&quot; AttributeID=&quot;{C6233B2C-FF77-4FDB-96A0-960A3527E0CC}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RefKind&quot; Caption=&quot;label&quot; AttributeID=&quot;{225BDDE3-D00F-429B-95A7-ED17E00FE4F7}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RefStereotype&quot; Caption=&quot;label&quot; AttributeID=&quot;{E5E5FC66-2D2A-4436-BED3-BA9B68120EBF}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RefType&quot; Caption=&quot;label&quot; AttributeID=&quot;{B96FD116-46E4-4416-A53F-3FD0EB109D7A}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Skip&quot; Caption=&quot;label&quot; AttributeID=&quot;{C7A34CE3-E3F3-445D-A42E-B104A257C024}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;StandardAttribute&quot; Caption=&quot;Standard attribute&quot; AttributeID=&quot;{8991C4EC-B99B-4E99-AF85-734B1539675B}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;StringForTrue&quot; Caption=&quot;String for &#39;True&#39; value&quot; AttributeID=&quot;{4118330A-50DF-44F5-B751-BFAC4DE8A238}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ColumnSimplifiedKind&quot; Caption=&quot;label&quot; AttributeID=&quot;{34607321-D629-4FA8-86F3-F1616CF6B72E}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;EditableRefClassName&quot; Caption=&quot;label&quot; AttributeID=&quot;{971C97DA-C73D-4F57-8436-44E2D40AC560}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;IsObjectAttribute&quot; Caption=&quot;label&quot; AttributeID=&quot;{109BAC2A-D3FA-4A24-918F-4482DBD8E119}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;IsSingleRefClass&quot; Caption=&quot;label&quot; AttributeID=&quot;{C10947C8-5F67-45B0-A28C-23F434ABCC50}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;MinimalRefClassName&quot; Caption=&quot;label&quot; AttributeID=&quot;{60145814-5022-4320-913F-2615A257347D}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;MinimalRefKind&quot; Caption=&quot;label&quot; AttributeID=&quot;{0395777D-B7F6-49C5-B8B9-BBEEDD49B104}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ParentReadOnlyName&quot; Caption=&quot;label&quot; AttributeID=&quot;{1460EB19-8607-4A35-9F1C-0D8CC2EA5728}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ParentSelected&quot; Caption=&quot;label&quot; AttributeID=&quot;{FEB6D66E-4E51-44D8-AC02-00B4988A07EA}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ReadOnlyRefClassName&quot; Caption=&quot;label&quot; AttributeID=&quot;{902C95B3-6A48-48A2-84AE-4A18958F1011}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RelationshipCollectionDefinition&quot; Caption=&quot;label&quot; AttributeID=&quot;{6279D2C2-CECD-472C-BF3A-6773EB167A21}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Selected&quot; Caption=&quot;label&quot; AttributeID=&quot;{97559867-38CC-4D8C-B66B-8CB1A5E702FA}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;PersistBooleanMapping&quot; Caption=&quot;label&quot; AttributeID=&quot;{55E5FAC7-21E6-46B3-9B4E-57B9C9575516}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;AttributeOrCollection&quot; Caption=&quot;caption&quot; AttributeID=&quot;{EEB74A57-2400-419F-8BA5-63DD10150170}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;ColumnSimplifiedKind&quot; Caption=&quot;caption&quot; AttributeID=&quot;{34607321-D629-4FA8-86F3-F1616CF6B72E}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;Mandatory&quot; Caption=&quot;caption&quot; AttributeID=&quot;{31FCE9DF-6D24-4845-906D-893036AEA309}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;EditableRelationshipCollection&quot; Caption=&quot;caption&quot; AttributeID=&quot;{2C3F9569-78BC-4A6F-AF7A-19AF115519E7}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;IsSubObjectRelationship&quot; Caption=&quot;caption&quot; AttributeID=&quot;{F7DE1675-C8A5-4C78-AA2C-71FFD88CBBF0}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; Display=&quot;Checkbox&quot; LeftText=&quot;No&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RelationshipAttribute&quot; Caption=&quot;caption&quot; AttributeID=&quot;{39A27FB6-E864-454F-984F-BE7DD1C41CAD}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;RelationshipCollection&quot; Caption=&quot;caption&quot; AttributeID=&quot;{56AA70E2-CDE1-40FC-9BF1-9485351EA8B8}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;SimplifiedDataType&quot; Caption=&quot;caption&quot; AttributeID=&quot;{93A05B24-B17A-464B-8A89-DE86C8690CA6}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
   &lt;ExtendedAttribute Attribute=&quot;StandardOrReferenceAttribute&quot; Caption=&quot;caption&quot; AttributeID=&quot;{A225AA6F-3423-45A3-902E-448167BF5C28}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1277892078</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Just to avoid the extended attributes page on the property sheet</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>All Extended Attributes</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o104">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:ObjectID>FDD49086-CE7B-447B-A73F-0574AC6CF34B</a:ObjectID>
<a:Name>Templates</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1261581082</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o105">
<a:ObjectID>DC2F05AA-C31D-40BA-AC3B-8E529E64765D</a:ObjectID>
<a:Name>allStandardAttributes</a:Name>
<a:TemplateTargetItem.Value>.vbscript()

   Dim const_newAttrValue
   const_newAttrValue = &quot;&lt;New Attribute&gt;&quot; &#39; NO-NLS

   &#39; Retrieve the table mapping
   dim tablmapp, kind, strn
   set tablmapp = ActiveSelection.Item(0).ParentObject
   kind = tablmapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;)
   strn = tablmapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedStereotype&quot;)
   
   &#39; Handle sub-objects
   Dim pos
   pos = InStrRev(strn, &quot;.&quot;)
   if pos &gt; 0 then
      strn = Mid(strn, pos+1)
   end if
     
   ScriptResult = ListAllAttributes(tablMapp.Model, kind, strn)
   set tablmapp = nothing

   Function ListAllAttributes(model, kind, strn)
      Dim list
      list = &quot;&quot;
      Dim tablclss
      set tablclss = Metamodel.GetMetaclassByKind(kind)
      if not tablclss is nothing then
         &#39; loop on all editable attributes of this metaclass
         dim attr, dict
         set dict =  CreateObject(&quot;Scripting.Dictionary&quot;) &#39; NO-NLS
         for each attr in tablclss.Attributes
            if not attr.ReadOnly and not attr.MemberFlags &amp; SMEMB_HIDDEN then
               if not attr.Type = SRepIOBJECT and not attr.Type = SRepBLOB then
                  if not attr.PublicName = &quot;ExtendedAttributesText&quot; and not attr.PublicName = &quot;History&quot; then &#39; NO-NLS
                     &#39; Add this editable meta attribute to the list
                     dict.Add attr.PublicName &amp; vbTab &amp; attr.LocalizedName, &quot;&quot;
                  end if
               end if
            end if            
         next
         &#39; loop on all extended attributes of this metaclass
         dim exaCol
         set exaCol = model.GetMetaExtensionsForClass(tablclss.Kind, PdCommon.Cls_ExtendedAttributeTargetItem)
         if not exaCol is nothing then
            for each attr in exaCol
               if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
                  dict.Add attr.Target.Code + &quot;.&quot; + attr.Name &amp; vbTab &amp; attr.LabelOrName, &quot;&quot;  
               end if
            next      
            set exaCol = nothing
         end if
         &#39; loop on all extended attributes of this stereotype
         if not strn = &quot;&quot; then
            set exaCol = model.GetMetaExtensionsForStereotype(tablclss.Kind, strn, PdCommon.Cls_ExtendedAttributeTargetItem)
            if not exaCol is nothing then
               for each attr in exaCol
                  if not attr.ComputedAccessType = &quot;RO&quot; then
                     dict.Add attr.Target.Code + &quot;.&quot; + attr.Name &amp; vbTab &amp; attr.LabelOrName, &quot;&quot;  
                  end if
               next      
               set exaCol = nothing
            end if   
         end if      
         set attr = nothing   
         &#39; Build the sorted list
         Dim vale
         for each vale in dict.Keys
            list = list + vale + &quot;;&quot;
         next
         set dict = nothing
         set tablclss = nothing
      end if
      ListAllAttributes = list
   End Function
.endvbscript</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265121106</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o106">
<a:ObjectID>E28384CC-B76E-476B-8F90-E6E7513BFBAB</a:ObjectID>
<a:Name>allClassNames</a:Name>
<a:TemplateTargetItem.Value>%ParentObject.allClassNames%</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o107">
<a:ObjectID>9C9691BC-2F26-4A2E-96A9-3292FD09341C</a:ObjectID>
<a:Name>allRefObjectsAttributes</a:Name>
<a:TemplateTargetItem.Value>.vbscript()

   Dim const_parentAttrValue
   const_parentAttrValue = &quot;&lt;Parent&gt;&quot; &#39; NO-NLS

   dim tablmapp, kind, strn
   set tablmapp = ActiveSelection.Item(0).ParentObject
   kind = tablmapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;)
   strn = tablmapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedStereotype&quot;)
     
   ScriptResult = ListAllRefAttributes(tablMapp.Model, kind, strn)
   set tablmapp = nothing

   Function ListAllRefAttributes(model, kind, strn)
      Dim list
      list = const_parentAttrValue &amp; &quot;;&quot;   
      
      Dim tablclss
      set tablclss = Metamodel.GetMetaclassByKind(kind)
      if not tablclss is nothing then
         &#39; loop on all editable attributes of this metaclass
         dim attr
         for each attr in tablclss.Attributes
            if not attr.ReadOnly and (attr.MemberFlags and SMEMB_HIDDEN) = 0 then
               If attr.Type = SRepIOBJECT then
                  &#39; Add this editable meta attribute to the list
                  list = list + attr.PublicName + vbTab + attr.LocalizedName + &quot;;&quot;
               end if                             
            end if            
         next
         &#39; loop on all extended attributes of this metaclass
         dim exaCol
			if not strn = &quot;&quot; then
         	set exaCol = model.GetMetaExtensionsForStereotype(tablclss.Kind, strn, PdCommon.Cls_ExtendedAttributeTargetItem)
			else
         	set exaCol = model.GetMetaExtensionsForClass(tablclss.Kind, PdCommon.Cls_ExtendedAttributeTargetItem)
			end if
         if not exaCol is nothing then
            for each attr in exaCol
               if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
                  If attr.DataType = 15 then
                     list = list + attr.Target.Code + &quot;.&quot; + attr.Name + vbTab + attr.LabelOrName + &quot;;&quot;
                  end if
               end if
            next      
            set exaCol = nothing
         end if
         set attr = nothing   
         set tablclss = nothing
      end if
      
      ListAllRefAttributes = list
   End Function

.endvbscript</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1337178562</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o108">
<a:ObjectID>099D0574-5691-4B6F-B760-EADD971A15C2</a:ObjectID>
<a:Name>allSortedStandardAttributes</a:Name>
<a:TemplateTargetItem.Value>.set_value (tmpStr, %allStandardAttributes%, new)
%sortStringCollection(tmpStr)%</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1251992762</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o109">
<a:ObjectID>FC24A8B4-39D2-4144-AEFD-20645BF12006</a:ObjectID>
<a:Name>allSortedRefObjectsAttributes</a:Name>
<a:TemplateTargetItem.Value>.set_value (tmpStr, %allRefObjectsAttributes%, new)
%sortStringCollection(tmpStr)%</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o110">
<a:ObjectID>92F02ED9-9406-49F4-B90C-0AED7C1D165F</a:ObjectID>
<a:Name>isBooleanAttribute</a:Name>
<a:TemplateTargetItem.Value>.if (%ColumnKind% == &quot;Standard&quot;)
%PersistBooleanMapping%
.else
false
.endif</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265202511</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o111">
<a:ObjectID>E512CB30-B59B-479A-9D80-0AB1F4E65A59</a:ObjectID>
<a:Name>allSortedAttributes</a:Name>
<a:TemplateTargetItem.Value>.set_value (tmpStr, %allStandardAttributes%;%allRefObjectsAttributes%, new)
%sortStringCollection(tmpStr)%</a:TemplateTargetItem.Value>
<a:CreationDate>1251991683</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1251992762</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o112">
<a:ObjectID>5613498C-577C-43DA-8917-31AE7C2E4CB7</a:ObjectID>
<a:Name>isRefMapping</a:Name>
<a:TemplateTargetItem.Value>false</a:TemplateTargetItem.Value>
<a:CreationDate>1252314137</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252314400</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o113">
<a:ObjectID>2877E1FA-1A53-4A1B-B221-3DBC4C354A06</a:ObjectID>
<a:Name>listOfDataTypes</a:Name>
<a:TemplateTargetItem.Value>.set_value (tmpStr, %txtColnDttpBoolean%;%txtColnDttpString%;%txtColnDttpObject%;, new)
%sortStringCollection(tmpStr)%</a:TemplateTargetItem.Value>
<a:CreationDate>1253113367</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1261581082</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o114">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>56579A7D-FC04-4AF1-81B2-839BE7B3C814</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1254472940</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o115">
<a:ObjectID>1AE67B0A-E27B-4924-A971-0239983D68D3</a:ObjectID>
<a:Name>Attribute</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1251992762</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute name corresponding to the data source column.
It can be the public name of a standard attribute or the qualified name of an extended attribute.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allSortedStandardAttributes%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Attribute</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o116">
<a:ObjectID>C7A34CE3-E3F3-445D-A42E-B104A257C024</a:ObjectID>
<a:Name>Skip</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Indicates if this Excel column should be skipped from import</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o117">
<a:ObjectID>D5C78C1E-274B-45A5-B540-E45F2644613D</a:ObjectID>
<a:Name>ReadOnlyName</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>The name attribute provided as read-only</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.Name
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o118">
<a:ObjectID>A753B15C-BE40-44AF-ADD9-0C119F058E6E</a:ObjectID>
<a:Name>IsKey</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1393845064</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:Comment>Indicates if the column is a key that allows object identification</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim keyAttr, attr
   keyAttr = false
   attr = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
   if attr = &quot;Name&quot; or attr = &quot;Code&quot; or attr = &quot;DisplayName&quot; or attr = &quot;QualifiedName&quot; or attr = &quot;QualifiedCode&quot; then &#39; NO-NLS
      keyAttr = true
   end if
   %Get% = keyAttr
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o119">
<a:ObjectID>BA0DC923-A1A5-41F3-9531-C625F58818ED</a:ObjectID>
<a:Name>AttributeDefinition</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265121431</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Retrieve the mapped attribute definition that could be an extended attribute definition or a meta attribute.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>15</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)

   &#39; Retrieve the table mapping
   dim tablmapp, tablclss, attrDefn
   set attrDefn = nothing
   set tablmapp = obj.ParentObject
   
   &#39; Retrieve the metaclass associated to it
   set tablclss = nothing
   if not tablmapp is nothing then
       set tablclss = Metamodel.GetMetaclassByKind(tablmapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
   end if
   
   &#39; Retrieve the attribute definition
   ScriptResult = false
   if not tablclss is nothing then
      Dim attrname
      &#39; Search as standard attribute
      attrname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
      set attrDefn = nothing
      if not attrname = &quot;&quot; and InStr(attrname, &quot;.&quot;) = 0 then
         set attrDefn = tablclss.GetMetaMemberByPublicName(attrname)
      end if
      If not attrDefn is nothing then
         if not attrDefn.IsKindOf(Cls_MetaAttribute) then
            set attrDefn = nothing
         end if
      end if
      &#39; Search as extended attribute if not found
      if attrDefn is nothing and InStr(attrname, &quot;.&quot;) &gt; 0 then
         &#39; Search for an extended attribute on the stereotype
         dim exaCol, strn, attr
         strn = tablmapp.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedStereotype&quot;)
         if not strn = &quot;&quot; then
            set exaCol = obj.Model.GetMetaExtensionsForStereotype(tablclss.Kind, strn, PdCommon.Cls_ExtendedAttributeTargetItem)
            if not exaCol is nothing then
               for each attr in exaCol
                  if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
                     If attrName = attr.Target.Code + &quot;.&quot; + attr.Name then
                        set attrDefn = attr            
                        Exit For
                     End If
                  end if
               next    
               set attr = nothing  
               set exaCol = nothing
            end if
         end if
         &#39; Search for an extended attribute on the metaclass
         if attrDefn is nothing then
            set exaCol = obj.Model.GetMetaExtensionsForClass(tablclss.Kind, PdCommon.Cls_ExtendedAttributeTargetItem)
            if not exaCol is nothing then
               for each attr in exaCol
                  if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
                     If attrName = attr.Target.Code + &quot;.&quot; + attr.Name then
                        set attrDefn = attr            
                        Exit For
                     End If
                  end if
               next    
               set attr = nothing  
               set exaCol = nothing
            end if
         end if
      end if
      set tablclss = nothing
   end if
   set %Get% = attrDefn
   set globalObject = attrDefn   &#39; keep the definition alive while it is returned
   set attrDefn = nothing
   set tablmapp = nothing   
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o120">
<a:ObjectID>84D73BFA-C51B-47E2-BCE9-771FF6FF337C</a:ObjectID>
<a:Name>ColumnKind</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265202305</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The kind of column: standard for an attribute stored on the metaclass or reference for referencing an attribute on another object.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>Standard</a:ExtendedAttributeTargetItem.Value>
<a:ExtendedAttributeTargetItem.ListOfValues>Standard\t%txtColnTypeStandard%;Reference\t%txtColnTypeReference%;Relationship\t%txtColnTypeRelationship%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o121">
<a:ObjectID>63FF7293-8CEA-4CF7-859B-C0165C98FC91</a:ObjectID>
<a:Name>IsBooleanAttribute</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252510839</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Check if selected attribute has Boolean data type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)

   Dim res
   res = false
   
   &#39; Check if we request explicitely the creation of a new Boolean exa attribute
   Dim selAttr
   selAttr = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
   if IsNewBoolAttributeRequest(selAttr) then
      res = true
   elseif IsNewAttributeRequest(selAttr) or selAttr = &quot;&quot; then
      res = false   
   else
      &#39; Retrieve the mapped attribute definition
      dim attrDefn
      set attrDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.AttributeDefinition&quot;)      
      if not attrDefn is nothing then
         if attrDefn.IsKindOf(Cls_MetaAttribute) then
            if attrDefn.Type = 262144 then &#39; 0x00040000
               res = true
            else
               res = false
            end if
         elseif attrDefn.IsKindOf(PdCommon.Cls_ExtendedAttributeTargetItem) then
            if attrDefn.DataType = 0 then &#39; 0 is Boolean
               res = true
            else
               res = false
            end if
         end if
         set attrDefn = nothing
      end if
   end if

   %Get% = res
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o122">
<a:ObjectID>55E5FAC7-21E6-46B3-9B4E-57B9C9575516</a:ObjectID>
<a:Name>PersistBooleanMapping</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>This attribute persists the computed Boolean Attribute status for the column mapping.
This is an optimization that avoids to recompute it on each commit of cell.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o123">
<a:ObjectID>34607321-D629-4FA8-86F3-F1616CF6B72E</a:ObjectID>
<a:Name>ColumnSimplifiedKind</a:Name>
<a:CreationDate>1251974849</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265202305</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The kind of model information contained in the cell. It can be an attribute value or a collection of objects.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>Attribute</a:ExtendedAttributeTargetItem.Value>
<a:ExtendedAttributeTargetItem.ListOfValues>Attribute\t%txtColnTypeAttribute%;List\t%txtColnTypeList%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   Dim colnKind
   colnKind = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnKind&quot;)
   if colnKind = const_colnType_Relationship then
      %Get% = const_colnType_List
   else 
      %Get% = const_colnType_Attribute
   end if
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   if not value = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnSimplifiedKind&quot;) then
      if value = const_colnType_List then
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Relationship
      elseif obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsObjectAttribute&quot;) then
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Reference      
      else
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Standard      
      end if
   end if
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o124">
<a:ObjectID>97559867-38CC-4D8C-B66B-8CB1A5E702FA</a:ObjectID>
<a:Name>Selected</a:Name>
<a:CreationDate>1251987452</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1251987825</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Indicates if the import of this column is selected or should be skipped</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Skip&quot;) then
      %Get% = false
   else
      %Get% = true
   end if
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   if value then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Skip&quot;, false
   else
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Skip&quot;, true
   end if
End Sub</a:SetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o125">
<a:ObjectID>109BAC2A-D3FA-4A24-918F-4482DBD8E119</a:ObjectID>
<a:Name>IsObjectAttribute</a:Name>
<a:CreationDate>1251991683</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1393854161</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:Comment>Check if selected attribute has Object data type</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)

   Dim res
   res = false
   
   On Error Resume next   
   
   &#39; Check if we request explicitely the creation of a new Object exa attribute
   Dim selAttr
   selAttr = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
   if IsNewObjAttributeRequest(selAttr) then
      res = true
   elseif IsNewAttributeRequest(selAttr) or selAttr = &quot;&quot; then
      res = false   
   else
      &#39; Retrieve the mapped attribute definition
      dim attrDefn
      set attrDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.AttributeDefinition&quot;)      
      if not attrDefn is nothing then
         if attrDefn.IsKindOf(Cls_MetaAttribute) then
            if attrDefn.Type = -2147287040 then &#39; 0x80030000
               res = true
            else
               res = false
            end if
         elseif attrDefn.IsKindOf(PdCommon.Cls_ExtendedAttributeTargetItem) then
            if attrDefn.DataType = 15 then &#39; 15 is Object
               res = true
            else
               res = false
            end if
         end if
         set attrDefn = nothing
      end if
   end if

   HandleErrorCase -1, &quot;&quot; &#39; Silent 

   %Get% = res
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o126">
<a:ObjectID>FEB6D66E-4E51-44D8-AC02-00B4988A07EA</a:ObjectID>
<a:Name>ParentSelected</a:Name>
<a:CreationDate>1252076174</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252076726</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Indicates if the import of this table is selected or should be skipped</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = false
   Dim prnt
   set prnt = obj.ParentObject
   if not prnt is nothing then
      %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Selected&quot;)
      set prnt = nothing
   end if
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   Dim prnt
   set prnt = obj.ParentObject
   if not prnt is nothing then
      prnt.SetExtendedAttribute &quot;%CurrentTargetCode%.Selected&quot;, value
   end if
End Sub</a:SetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o127">
<a:ObjectID>1460EB19-8607-4A35-9F1C-0D8CC2EA5728</a:ObjectID>
<a:Name>ParentReadOnlyName</a:Name>
<a:CreationDate>1252076174</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252076726</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The name of the document table to import</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = &quot;&quot;
   Dim prnt
   set prnt = obj.ParentObject
   if not prnt is nothing then
      %Get% = prnt.Name
      set prnt = nothing
   end if
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o128">
<a:ObjectID>31FCE9DF-6D24-4845-906D-893036AEA309</a:ObjectID>
<a:Name>Mandatory</a:Name>
<a:CreationDate>1254409762</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1393854161</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:Comment>Indicates that an empty is not accepted for this attribute.
The import will take the last non-empty value on previous rows in this case.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim attrname, res
   res = false
   
   On Error Resume next   
   
   attrname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
   if attrname = const_parentAttrValue then
      &#39; Parent is always mandatory
      res = true
   elseif not attrName = &quot;&quot; and InStr(attrName, &quot;.&quot;) &lt;= 0 then
      &#39; Not an extended attribute
      if not obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnKind&quot;) = const_colnType_Relationship then
         &#39; Check if attribute has mandatory flag
         Dim kind, clss
         kind = obj.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;)
         set clss = Metamodel.GetMetaClassByKind(kind)
         if not clss is nothing then
            Dim attr
            set attr = clss.GetMetaMemberByPublicName(attrname)
            if not attr is nothing then
               if attr.Flags and SATTR_MANDATORY then
                  res = true
               end if
            end if
            set clss = nothing
         end if
      end if
   end if
   
   HandleErrorCase -1, &quot;&quot; &#39; Silent 
   
   %Get% = res
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o129">
<a:ObjectID>EEB74A57-2400-419F-8BA5-63DD10150170</a:ObjectID>
<a:Name>AttributeOrCollection</a:Name>
<a:CreationDate>1254472544</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1254473144</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute or collection name corresponding to the data source column.
It can be the public name of a standard attribute or collection, or the qualified name of an extended attribute or collection.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim knd, attr
   knd = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnKind&quot;)
   if knd = const_colnType_Relationship then
      attr = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RelationshipCollection&quot;)
   else
      attr = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
   end if
   %Get% = attr
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o130">
<a:TypePublicName>CriterionTargetItem</a:TypePublicName>
<a:ObjectID>EADE08B3-AF46-438E-80A2-5D098C6D19CD</a:ObjectID>
<a:Name>Criteria</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252314448</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CriterionTargetItem Id="o131">
<a:ObjectID>25EC015B-C065-4F40-8466-3D5E7FFE065B</a:ObjectID>
<a:Name>ReferenceOrRelationship</a:Name>
<a:CriterionTargetItem.Value>(%ColumnKind% == &quot;Reference&quot;) || (%ColumnKind% == &quot;Relationship&quot;)</a:CriterionTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265202511</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o132">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>0A7CD53F-4DD0-43BD-BFAD-E2CAF4484BC4</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1261583069</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o133">
<a:ObjectID>36DB3C72-8D30-49CA-B2EF-F34A858E8CC9</a:ObjectID>
<a:Name>RefAttribute</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200319</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute of the referenced object displayed in the imported column</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>Name</a:ExtendedAttributeTargetItem.Value>
<a:ExtendedAttributeTargetItem.ListOfValues>Name\t%txtIdtfName%;Code\t%txtIdtfCode%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Referenced Attribute</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o134">
<a:ObjectID>C6233B2C-FF77-4FDB-96A0-960A3527E0CC</a:ObjectID>
<a:Name>RefClassName</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1393853179</a:ModificationDate>
<a:Modifier>I063949</a:Modifier>
<a:Comment>The class name of referenced object (can be a standard class or a stereotype used as metaclass)</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allClassNames%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   Dim clssname
   clssname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefStereotype&quot;)
   if clssname = &quot;&quot; then
      clssname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefType&quot;)
   end if
   %Get% = clssname
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)

   dim metaclss, clssname
   if not value = &quot;&quot; then
   &#39; compute class name
      Dim lib
      set lib = obj.model.metaclass.library
      if not lib is nothing then
         clssname = lib.PublicName+&quot;.&quot;+value
         set lib = nothing
      else
         clssname = value
      end if

      &#39; retrieve metaclass by name
      set metaclss = metamodel.GetMetaClassByPublicName(clssname)
      if not metaclss is nothing then
         &#39; Standard metaclass
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefType&quot;, value
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefStereotype&quot;, &quot;&quot;     
         set metaclss = nothing
      else
         &#39; Stereotype as metaclass
         Dim sttp
         set sttp = obj.model.GetExtendedMetaclassByName(value)
         if not sttp is nothing then
            obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefType&quot;, sttp.MetaclassName
         else            
            Dim pos
            pos = InStrRev(value, &quot;.&quot;)
            if pos &gt; 1 then
               &#39; Sub Object case
               Dim subValue
               subValue = Mid(value, pos+1)
               set metaclss = metamodel.GetMetaClassByPublicName(subValue)
               if not metaclss is nothing then
                  set sttp = metaclss
                  obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefType&quot;, subValue         
                  value = &quot;&quot;
               end if
            end if
            if sttp is nothing then
               if debugMode then
                  Debug &quot;Could not find metaclass &quot; &amp; value
               end if               
               obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefType&quot;, &quot;ExtendedObject&quot;
            end if
         end if
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefStereotype&quot;, value        
      end if
   end if

End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Referenced class name</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o135">
<a:ObjectID>E5E5FC66-2D2A-4436-BED3-BA9B68120EBF</a:ObjectID>
<a:Name>RefStereotype</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>The stereotype of referenced object.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o136">
<a:ObjectID>225BDDE3-D00F-429B-95A7-ED17E00FE4F7</a:ObjectID>
<a:Name>RefKind</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265121431</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>A computed attribute that returns the kind of referenced object</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>10</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim metaclass, clssKind, clssname, qualifiedClssname
   set metaclass = nothing
   clssKind = 0
   clssname = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefType&quot;)
   if not clssname = &quot;&quot; then
      Dim lib
      set lib = obj.model.metaclass.library
      if not lib is nothing then
         qualifiedClssname = lib.PublicName+&quot;.&quot;+clssname
      else
         qualifiedClssname = &quot;PdCommon.&quot;+clssname &#39; NO-NLS
      end if
      set lib = nothing
      set metaclass = Metamodel.GetMetaclassByPublicName(qualifiedClssname)
      if not metaclass is nothing then
         clsskind = metaclass.Kind
         set metaclass = nothing
      elseif obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsSingleRefClass&quot;) then
         clsskind = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.MinimalRefKind&quot;)
      else
         Dim stereotype
         stereotype = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefStereotype&quot;)
         if stereotype = &quot;&quot; then
            stereotype = clssname
         end if
         set metaclass = RetrieveMetaclassFromImportedType(obj.ParentObject, stereotype)
         if not metaclass is nothing then
            clsskind = metaclass.Kind
            set metaclass = nothing
         else
            LogText &quot;Could not find &quot; + clssname + &quot; metaclass&quot;
         end if
      end if
   end if
   %Get% = clssKind
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o137">
<a:ObjectID>38713B5C-1C92-498B-97A0-92EA87A3826B</a:ObjectID>
<a:Name>CreateIfNotExist</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Create the object if the reference could not be found</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>true</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o138">
<a:ObjectID>B96FD116-46E4-4416-A53F-3FD0EB109D7A</a:ObjectID>
<a:Name>RefType</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Stores the classname of referenced object</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allClassNames%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o139">
<a:ObjectID>60145814-5022-4320-913F-2615A257347D</a:ObjectID>
<a:Name>MinimalRefClassName</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265121431</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The class name of objects that can be referenced by the attribute or stored in the relationship.
This class name is computed from the meta definition of the object attribute or collection.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim clssname, attrDefn
   Dim kind
   kind = 0
   clssname = &quot;&quot;
   if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnKind&quot;) = const_colnType_Reference then
      &#39; Attribute case
      set attrDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.AttributeDefinition&quot;)
      if not attrDefn is nothing then
         &#39; Retrieve reference kind
         if attrDefn.IsKindOf(cls_MetaCollection) then
            kind = attrDefn.ContentKind
         elseif attrDefn.HasAttribute(&quot;DestinationClassKind&quot;) then &#39; NO-NLS
            kind = attrDefn.DestinationClassKind
            if  attrDefn.HasAttribute(&quot;DestinationStereotype&quot;) then &#39; NO-NLS
               clssname = attrDefn.DestinationStereotype
            end if
         end if
         set attrDefn = nothing
      end if
    else
       &#39; Collection case
      set attrDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RelationshipCollectionDefinition&quot;)
      if not attrDefn is nothing then
         if attrDefn.HasAttribute(&quot;ContentKind&quot;) then &#39; NO-NLS
            kind = attrDefn.ContentKind
         elseif attrDefn.HasAttribute(&quot;DestinationClassKind&quot;) then &#39; NO-NLS
            kind = attrDefn.DestinationClassKind
            clssname = attrDefn.DestinationStereotype
         end if
         set attrDefn = nothing
      end if      
    end if
   &#39; Retrieve the associated classname from the kind
   if clssname = &quot;&quot; and not kind = 0 then
      Dim clssDefn
      set clssDefn = nothing
      On Error Resume Next
      set clssDefn = Metamodel.GetMetaClassByKind(kind)
      HandleErrorCase -1, &quot;&quot;
      if not clssDefn is nothing then
         if not clssDefn.Abstract then
            clssName = clssDefn.PublicName
         end if
         set clssDefn = nothing
      end if
   end if
   %Get% = clssname
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o140">
<a:ObjectID>0395777D-B7F6-49C5-B8B9-BBEEDD49B104</a:ObjectID>
<a:Name>MinimalRefKind</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265121431</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The class kind of objects that can be referenced by the attribute or stored in the relationship.
This class kind is computed from the meta definition of the object attribute or collection.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>10</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim attrDefn, kind
   kind = 0
   if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.ColumnKind&quot;) = const_colnType_Reference then
      &#39; Reference attribute case   
      set attrDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.AttributeDefinition&quot;)
      if not attrDefn is nothing then
         &#39; Retrieve reference kind
         kind = 0
         if attrDefn.IsKindOf(cls_MetaCollection) then
            kind = attrDefn.ContentKind
         elseif attrDefn.HasAttribute(&quot;DestinationClassKind&quot;) then &#39; NO-NLS
            kind = attrDefn.DestinationClassKind
         end if 
         set attrDefn = nothing
      end if
   else
      &#39; Collection case
      set attrDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RelationshipCollectionDefinition&quot;)
      if not attrDefn is nothing then
         if attrDefn.HasAttribute(&quot;ContentKind&quot;) then &#39; NO-NLS
            kind = attrDefn.ContentKind
         elseif attrDefn.HasAttribute(&quot;DestinationClassKind&quot;) then &#39; NO-NLS
            kind = attrDefn.DestinationClassKind
         end if
         set attrDefn = nothing
      end if      
   end if
   %Get% = kind
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o141">
<a:ObjectID>C10947C8-5F67-45B0-A28C-23F434ABCC50</a:ObjectID>
<a:Name>IsSingleRefClass</a:Name>
<a:CreationDate>1252310779</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252317442</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Checks if the selected attribute or relationship can store several kind of objects.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   Dim attrDefn, concrete
   concrete = false
   Dim kind
   kind = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.MinimalRefKind&quot;)
   &#39; Retrieve class definition from kind
   if not kind = 0 then
      Dim clss
      set clss = Metamodel.GetMetaClassByKind(kind)
      if not clss is nothing then
         if not clss.Abstract then
            concrete = true
         end if
         set clss = nothing
      end if
   end if
   %Get% = concrete
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o142">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:ObjectID>38C33E2B-C770-4EFA-9CF9-36ECCE1209B4</a:ObjectID>
<a:Name>Templates</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252314400</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o143">
<a:ObjectID>8B8461BC-CA91-4F6C-88C1-694AFE5D66A2</a:ObjectID>
<a:Name>allRefAttributes</a:Name>
<a:TemplateTargetItem.Value>.vbscript()

   Function ListAllAttributes(model, kind, strn)
      Dim list
      list = &quot;&lt;New Attribute&gt;;&quot;   &#39; NO-NLS
      
      Dim tablclss
      set tablclss = Metamodel.GetMetaclassByKind(kind)
      if not tablclss is nothing then
         &#39; loop on all editable attributes of this metaclass
         dim attr
         for each attr in tablclss.Attributes
            if not attr.ReadOnly and not attr.MemberFlags &amp; SMEMB_HIDDEN then
               &#39; Add this editable meta attribute to the list
               list = list + attr.PublicName   + &quot;;&quot;                               
            end if            
         next
         &#39; loop on all extended attributes of this metaclass
         dim exaCol
			if not strn = &quot;&quot; then
         	set exaCol = model.GetMetaExtensionsForStereotype(tablclss.Kind, strn, PdCommon.Cls_ExtendedAttributeTargetItem)
		   else
         	set exaCol = model.GetMetaExtensionsForClass(tablclss.Kind, PdCommon.Cls_ExtendedAttributeTargetItem)
			end if
         if not exaCol is nothing then
            for each attr in exaCol
               if not attr.ComputedAccessType = &quot;RO&quot; then &#39; NO-NLS
                  list = list + attr.Target.Code + &quot;.&quot; + attr.Name + &quot;;&quot;
               end if
            next      
            set exaCol = nothing
         end if
         set attr = nothing   
         set tablclss = nothing
      end if
      
      ListAllAttributes = list
   End Function

   &#39; Retrieve the column mapping
   dim colnmapp, kind, strn
   set colnmapp = ActiveSelection.Item(0)
   kind = colnmapp.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;)
   strn = colnmapp.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedStereotype&quot;)
   ScriptResult = ListAllAttributes(colnmapp.Model, kind, strn)
   set colnmapp = nothing

.endvbscript</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1337178373</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o144">
<a:ObjectID>D574B72F-F41D-4BD1-9433-DA0525BB8D07</a:ObjectID>
<a:Name>allSortedRefAttributes</a:Name>
<a:TemplateTargetItem.Value>.set_value (tmpStr, %allRefAttributes%, new)
%sortStringCollection(tmpStr)%</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o145">
<a:ObjectID>752F4BA0-FC7B-4336-B073-9E784401914A</a:ObjectID>
<a:Name>isRefMapping</a:Name>
<a:TemplateTargetItem.Value>true</a:TemplateTargetItem.Value>
<a:CreationDate>1252314137</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252314400</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o146">
<a:TypePublicName>CriterionTargetItem</a:TypePublicName>
<a:ObjectID>1EC5902D-F3BE-4400-9CA7-4C5C3915DFE5</a:ObjectID>
<a:Name>Criteria</a:Name>
<a:CreationDate>1253112476</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253112765</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CriterionTargetItem Id="o147">
<a:ObjectID>978EDF93-0541-4439-9E22-5ABD2F2B179A</a:ObjectID>
<a:Name>NewReferenceAttribute</a:Name>
<a:CriterionTargetItem.Value>%isNewMetaMember%</a:CriterionTargetItem.Value>
<a:CreationDate>1252310640</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253112765</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:ParentCriterion>
<o:CriterionTargetItem Ref="o131"/>
</c:ParentCriterion>
<c:Categories>
<o:TypedCategoryTargetItem Id="o148">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>9D10BBF8-4283-4B42-883B-A99F115F6602</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>1252310640</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252310779</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o149">
<a:ObjectID>D008AB27-90CF-4EB8-A4CF-26E843E2AD98</a:ObjectID>
<a:Name>DefineNewRefMetaclass</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252310779</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   
   &#39; create stereotype
   Dim sttp
   set sttp = CreateNewMetaclass(obj.ParentObject, PdCommon.Cls_ExtendedObject)
   if not sttp is nothing then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefType&quot;, &quot;ExtendedObject&quot; 
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefStereotype&quot;, sttp.Name
      set sttp = nothing
   end if
   
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
<o:CriterionTargetItem Id="o150">
<a:ObjectID>34FF2C78-8A62-4FE4-96F9-B79AA467B8B5</a:ObjectID>
<a:Name>StandardColumn</a:Name>
<a:CriterionTargetItem.Value>%ColumnKind% == &quot;Standard&quot;</a:CriterionTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265202511</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o151">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>FA2CDB6B-39B6-471B-B440-7CD248E25CBB</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1252314400</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o152">
<a:ObjectID>8991C4EC-B99B-4E99-AF85-734B1539675B</a:ObjectID>
<a:Name>StandardAttribute</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1256752181</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute name corresponding to the data source column.
It can be the public name of a standard attribute or the qualified name of an extended attribute.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allSortedStandardAttributes%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Attribute&quot;, value
   
   &#39; Update Boolean status and detect object attribute case
   Dim boolStatus
   boolStatus = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsBooleanAttribute&quot;)   
   if boolStatus then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, true
   else
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, false
      if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsObjectAttribute&quot;) then
         &#39; Object attribute should be switched into Reference mode
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Reference
         &#39; Initialize default reference class name
         if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefType&quot;) = &quot;&quot; then
            Dim clssName
            clssName = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.MinimalRefClassName&quot;)
            if not clssName = &quot;&quot; then
               obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefClassName&quot;, clssName
            end if
         end if         
      end if
   end if
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:Label>Standard attribute</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
<o:CriterionTargetItem Id="o153">
<a:ObjectID>8D7AA2CF-E93F-4EE7-8BA6-D31D5EE00989</a:ObjectID>
<a:Name>AttributeReference</a:Name>
<a:CriterionTargetItem.Value>%ColumnKind% == &quot;Reference&quot;</a:CriterionTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265202511</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o154">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>E274F364-0DDE-4689-8C34-89250B6DF32B</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o155">
<a:ObjectID>39A27FB6-E864-454F-984F-BE7DD1C41CAD</a:ObjectID>
<a:Name>RelationshipAttribute</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200502</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute name corresponding to the data source column.
It can be the public name of a standard attribute or the qualified name of an extended attribute.
The attribute must have object data type (it corresponds to a relationship)</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allSortedRefObjectsAttributes%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Attribute&quot;, value
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, false
   Dim clssName
   clssName = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.MinimalRefClassName&quot;)
   if not clssName = &quot;&quot; then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefClassName&quot;, clssName
   end if
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o156">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:ObjectID>0E1729EF-9EB8-4524-8CCE-F7BBC7E7E976</a:ObjectID>
<a:Name>Templates</a:Name>
<a:CreationDate>1253112476</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253112765</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o157">
<a:ObjectID>6091BF48-004F-4618-A6BD-7D2F804C2373</a:ObjectID>
<a:Name>isNewMetaMember</a:Name>
<a:TemplateTargetItem.Value>.bool(%Attribute% == %txtNewObjectAttribute%)</a:TemplateTargetItem.Value>
<a:CreationDate>1253112476</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253112765</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
<o:CriterionTargetItem Id="o158">
<a:ObjectID>A4C1FEBB-38A4-4E1B-AFE6-8A3D9BEC76E0</a:ObjectID>
<a:Name>CollectionReference</a:Name>
<a:CriterionTargetItem.Value>%ColumnKind% == &quot;Relationship&quot;</a:CriterionTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265202511</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o159">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>9D1EB2EC-2244-4E54-8E5E-470341EC3A9A</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1251988196</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o160">
<a:ObjectID>56AA70E2-CDE1-40FC-9BF1-9485351EA8B8</a:ObjectID>
<a:Name>RelationshipCollection</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200502</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The collection name where the reference object should be stored
It can be the public name of a standard collection or the qualified name of an extended collection</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allSortedRefObjectCollections%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o161">
<a:ObjectID>F7DE1675-C8A5-4C78-AA2C-71FFD88CBBF0</a:ObjectID>
<a:Name>IsSubObjectRelationship</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200502</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Returns true if the selected relationship lists sub-objects</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   &#39; Retrieve first the collection definition
   Dim collDefn, subObjRlsh
   subObjRlsh = false
   set collDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RelationshipCollectionDefinition&quot;)
   if not collDefn is nothing then
      &#39; Standard collection specific case
      if collDefn.IsKindOf(PDCommon.Cls_MetaCollection) then
         if collDefn.Composition and not collDefn.Inverse then
            subObjRlsh = true
         end if
      &#39; Extended composition case
      elseif collDefn.IsKindOf(PDCommon.Cls_ExtendedCompositionTargetItem) then
         subObjRlsh = true
      end if
      set collDefn = nothing
   end if
   &#39; Return the result
   %Get% = subObjRlsh
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o162">
<a:ObjectID>2C3F9569-78BC-4A6F-AF7A-19AF115519E7</a:ObjectID>
<a:Name>EditableRelationshipCollection</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1265200502</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The collection name where the reference object should be stored
It can be the public name of a standard collection or the qualified name of an extended collection.
A change of collection can update the reference class name</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allSortedRefObjectCollections%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)   
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RelationshipCollection&quot;)
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   &#39; Change the relationship stored attribute
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Attribute&quot;, &quot;&quot;
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RelationshipCollection&quot;, value
   &#39; Update the referenced class name
   Dim collDefn
   set collDefn = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RelationshipCollectionDefinition&quot;)
   if not collDefn is nothing then
      Dim clssname
      clssname = &quot;&quot;
      Dim kind
      kind = 0
      if collDefn.HasAttribute(&quot;DestinationClassKind&quot;) then &#39; NO-NLS
         kind = collDefn.DestinationClassKind
      elseif collDefn.HasAttribute(&quot;ContentKind&quot;) then &#39; NO-NLS
         kind = collDefn.ContentKind
      end if
      if not kind = 0 then
         Dim clssDefn
         set clssDefn = MetaModel.GetMetaClassByKind(kind)
         if not clssDefn is nothing then
            clssname = clssDefn.PublicName
            set clssDefn = nothing
         end if
      end if
      if not clssname = &quot;&quot; then
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefType&quot;, clssname
         if collDefn.HasAttribute(&quot;DestinationStereotype&quot;) then &#39; NO-NLS
            obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefStereotype&quot;, collDefn.DestinationStereotype
         else
            obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefStereotype&quot;, &quot;&quot;
         end if
      end if
      set collDefn = nothing
   end if
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o163">
<a:ObjectID>6279D2C2-CECD-472C-BF3A-6773EB167A21</a:ObjectID>
<a:Name>RelationshipCollectionDefinition</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1257426317</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>Retrieve the collection definition associated to current collection name.
It could be an extended collection definition or a meta collection.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>15</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   &#39; Retrieve the collection name
   Dim collName, subObjRlsh
   subObjRlsh = false
   collName = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RelationshipCollection&quot;)   
   &#39; Retrieve the metaclass
   Dim classId, metaClass
   set metaClass = nothing
   classId = 0
   If not obj.ParentObject is nothing then
      classId = CLng(obj.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
      set metaClass = MetaModel.GetMetaClassByKind(classId)
   end if
   &#39; Retrieve the collection standard definition
   Dim collDefn
   set collDefn = nothing
   if not collName = &quot;&quot; then
      if not metaClass is nothing then
         set collDefn = metaClass.GetMetaMemberByPublicName(collName)
         set metaClass = nothing
      end if
      &#39; Detect extended collection case
      Dim extCollName, extCollTarget
      extCollName = collName
      extCollTarget = &quot;&quot;
      if collDefn is nothing then
         Dim pos
         pos = InStrRev(collName, &quot;.&quot;)
         if pos &gt; 1 then
            extCollName = Mid(collName, pos+1)
            extCollTarget = Mid(collName, 1, pos-1)
         end if
         Dim extColl
         set extColl = obj.model.GetMetaExtensionsForClass(classId, PdCommon.Cls_ExtendedCollectionTargetItem)
         if not extColl is nothing then
            set collDefn = SearchInCollByName(extColl, extCollName, false)
            set extColl = nothing
         end if
      end if         
      &#39; Detect extended composition case
      if collDefn is nothing then
         Dim extComp
         set extComp = obj.model.GetMetaExtensionsForClass(classId, PdCommon.Cls_ExtendedCompositionTargetItem)
         if not extComp is nothing then
            set collDefn = SearchInCollByName(extComp, extCollName, false)
            set extComp = nothing
         end if
      end if         
   end if
   &#39; Return the result
   set %Get% = collDefn
   set globalObject = collDefn   &#39; keep the definition alive while it is returned   
   set collDefn = nothing
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o164">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:ObjectID>2CB6D51C-4502-433A-8DE9-A9349D597586</a:ObjectID>
<a:Name>Templates</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253112765</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o165">
<a:ObjectID>96F7CD82-B91D-442C-9052-3172C13067FE</a:ObjectID>
<a:Name>allRefObjectCollections</a:Name>
<a:TemplateTargetItem.Value>.vbscript()

   Function ListAllCollections(model, kind, strn)
      Dim list
      list = &quot;&quot;   
      
      Dim tablclss
      set tablclss = Metamodel.GetMetaclassByKind(kind)
      if not tablclss is nothing then
         &#39; loop on all editable collection of this metaclass
         dim coll
         for each coll in tablclss.Collections
            if not coll.Inverse and not (coll.MemberFlags and SMEMB_HIDDEN) and not (coll.Flags and COLL_MAXONE) and not (coll.Flags and COLL_COLLSET) and not (coll.MemberFlags and SMEMB_CUSTOM = SMEMB_CUSTOM) then
               Dim collCntt
               set collCntt = Metamodel.GetMetaclassByKind(coll.ContentKind)
               if not collCntt is nothing then
                  if not coll.PublicName = &quot;ExtendedCollections&quot; and  not coll.PublicName = &quot;ExtendedCompositions&quot; and not coll.PublicName = &quot;AllExtendedSubObjects&quot; then &#39; NO-NLS
                     if not collCntt.GetMetaMemberByPublicName(&quot;Code&quot;) is nothing and collCntt.GetMetaMemberByPublicName(&quot;Object2&quot;) is nothing and not (collCntt.Flags and SCLSS_SUBOBJECT) then &#39; NO-NLS
                        &#39; Add this editable meta collection to the list
                        list = list + coll.PublicName + vbTab + coll.LocalizedName + &quot;;&quot;
                     &#39;elseif coll.Composition and collCntt.InheritsFrom(Cls_CompositionLink) then
                     &#39;   &#39; Add this editable meta collection to the list
                     &#39;   list = list + coll.PublicName + vbTab + coll.LocalizedName + &quot;;&quot;
                     end if
                  end if           
                  set collCntt = nothing
               end if    
            end if        
         next
         &#39; loop on all extended collections of this metaclass
         dim exaCol
			if not strn = &quot;&quot; then
			   set exaCol = model.GetMetaExtensionsForStereotype(tablclss.Kind, strn, PdCommon.Cls_ExtendedCollectionTargetItem)
		   else
            set exaCol = model.GetMetaExtensionsForClass(tablclss.Kind, PdCommon.Cls_ExtendedCollectionTargetItem)
		   end if
         if not exaCol is nothing then
            for each coll in exaCol
               if not coll.DestinationClassKind = 0 and coll.ExtendedAttribute is nothing then
                  list = list + coll.Target.Code + &quot;.&quot; + coll.Name + vbTab + coll.LabelOrName + &quot;;&quot;
               end if
            next      
            set exaCol = nothing
         end if
         &#39; loop on all extended compositions of this metaclass
			if not strn = &quot;&quot; then
			   set exaCol = model.GetMetaExtensionsForStereotype(tablclss.Kind, strn, PdCommon.Cls_ExtendedCompositionTargetItem)
		   else		
            set exaCol = model.GetMetaExtensionsForClass(tablclss.Kind, PdCommon.Cls_ExtendedCompositionTargetItem)
		   end if
         if not exaCol is nothing then
            for each coll in exaCol
               if not coll.DestinationClassKind = 0 then
                  list = list + coll.Target.Code + &quot;.&quot; + coll.Name + vbTab + coll.LabelOrName + &quot;;&quot;
               end if
            next      
            set exaCol = nothing
         end if
         set coll = nothing   
         set tablclss = nothing
      end if
      
      ListAllCollections = list
   End Function

   &#39; Retrieve the column mapping
   dim colnmapp, kind, strn
   set colnmapp = ActiveSelection.Item(0)
   kind = colnmapp.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;)
   strn = colnmapp.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedStereotype&quot;)
   ScriptResult = ListAllCollections(colnmapp.Model, kind, strn)
   set colnmapp = nothing

.endvbscript</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1337178231</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o166">
<a:ObjectID>2E923442-3F39-4FC0-BEAB-84B914290FA0</a:ObjectID>
<a:Name>allSortedRefObjectCollections</a:Name>
<a:TemplateTargetItem.Value>.set_value (tmpStr, %allRefObjectCollections%, new)
%sortStringCollection(tmpStr)%</a:TemplateTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o167">
<a:ObjectID>D8092622-E710-40B3-AEA5-A5FE5C814D42</a:ObjectID>
<a:Name>isNewMetaMember</a:Name>
<a:TemplateTargetItem.Value>.bool(%RelationshipCollection% == &quot;&quot;)</a:TemplateTargetItem.Value>
<a:CreationDate>1253112476</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253112765</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o168">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>0E7B2E23-ABC9-481F-B3A1-A92E2CA3D191</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o169">
<a:ObjectID>965A016D-9A93-468E-AAAC-D781FCBA261B</a:ObjectID>
<a:Name>DefineNewRelationship</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1253104520</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)

   CreateNewCollection obj
   
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o170">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:ObjectID>900ADD0A-1018-48A8-B13E-3631039F382B</a:ObjectID>
<a:Name>Forms</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o171">
<a:ObjectID>AD1CDE71-60CE-4A53-8093-5495790EB539</a:ObjectID>
<a:Name>NewObjectList</a:Name>
<a:Code>New Object List</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StaticText Name=&quot;Intro&quot; Caption=&quot;Specify a name for your list, along with the kind of PowerDesigner object it will contain.&quot; /&gt;
   &lt;Space Name=&quot;Space1&quot; Width=&quot;6&quot; Height=&quot;12&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;Edit Name=&quot;Name&quot; Caption=&quot;List name&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; ReadOnly=&quot;No&quot; /&gt;
   &lt;HorizontalLayout Name=&quot;HorizontalLayout1&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;RefClassName&quot; Caption=&quot;Object type&quot; AttributeID=&quot;{C6233B2C-FF77-4FDB-96A0-960A3527E0CC}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewRefMetaclass&quot; Name=&quot;DefineNewRefMetaclass&quot; Caption=&quot;New object type...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1268055521</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>New Object List</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
<o:CriterionTargetItem Id="o172">
<a:ObjectID>E434A264-0DA5-4639-A2AD-C3E96D2EA9F7</a:ObjectID>
<a:Name>BooleanMapping</a:Name>
<a:CriterionTargetItem.Value>%isBooleanAttribute%</a:CriterionTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o173">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>35A4BA41-0C24-4E86-8E7A-DEE67DBE040A</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o174">
<a:ObjectID>4118330A-50DF-44F5-B751-BFAC4DE8A238</a:ObjectID>
<a:Name>StringForTrue</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>This attribute stores the user-defined string that means &#39;True&#39;.
For instance, it can be &#39;OK&#39;, &#39;Valid&#39; or any other string.
The following predefined strings are already automatically considered as &#39;True&#39;: &#39;yes&#39;, &#39;true&#39;, &#39;1&#39;, &#39;Y&#39;, &#39;T&#39;, &#39;X&#39;, &#39;OK&#39;</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>X</a:ExtendedAttributeTargetItem.Value>
<a:Label>String for &#39;True&#39; value</a:Label>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
<o:CriterionTargetItem Id="o175">
<a:ObjectID>2F81EB35-8A99-4F7E-BB52-BE6DEF9EB77E</a:ObjectID>
<a:Name>Attribute</a:Name>
<a:CriterionTargetItem.Value>(%ColumnKind% == &quot;Standard&quot;) || (%ColumnKind% == &quot;Reference&quot;)</a:CriterionTargetItem.Value>
<a:CreationDate>1251993811</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265202511</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o176">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>6604682D-844C-4042-893E-F6FEA357303C</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>1251993811</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253114760</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o177">
<a:ObjectID>A225AA6F-3423-45A3-902E-448167BF5C28</a:ObjectID>
<a:Name>StandardOrReferenceAttribute</a:Name>
<a:CreationDate>1251991683</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200502</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The attribute that will be set during the import of data.
It can be an attribute with standard data type (Boolean, String, Integer...) or an attribute that references another object (Object data type).</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allSortedAttributes%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.Attribute&quot;)
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.Attribute&quot;, value
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Standard
   
   if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsObjectAttribute&quot;) then
      &#39; Object attribute case
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.ColumnKind&quot;, const_colnType_Reference
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefType&quot;, &quot;&quot;
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefStereotype&quot;, &quot;&quot;      
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RelationshipAttribute&quot;, value
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefAttribute&quot;, obj.ParentObject.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.DeftRefAttribute&quot;) 
   else
      &#39; Standard attribute case
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.StandardAttribute&quot;, value
      if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsBooleanAttribute&quot;) then
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.PersistBooleanMapping&quot;, true
      end if
   end if
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o178">
<a:ObjectID>93A05B24-B17A-464B-8A89-DE86C8690CA6</a:ObjectID>
<a:Name>SimplifiedDataType</a:Name>
<a:CreationDate>1253113367</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1265200502</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The global kind of data type for import consideration.
It can be an object and in this case, we need to find the referenced object in the model. 
It can be a Boolean and in this case we need to consider the global option for converting the string into Boolean value.
Or at last, it can be anything else like &#39;String&#39; that do not need any value conversion.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%listOfDataTypes%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   Dim dttp
   dttp = txtListDttpString
   if obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsBooleanAttribute&quot;) then
      dttp = txtListDttpBoolean
   elseif obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.IsObjectAttribute&quot;) then
      dttp = txtListDttpObject
   end if
   %Get% = dttp
End Function
</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   Dim dttp
   dttp = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.SimplifiedDataType&quot;)
   if not dttp = value then
      if value = txtListDttpBoolean then
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.StandardOrReferenceAttribute&quot;, const_newBoolAttrValue
      elseif value = txtListDttpObject then
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.StandardOrReferenceAttribute&quot;, const_newObjAttrValue
      else
         obj.SetExtendedAttribute &quot;%CurrentTargetCode%.StandardOrReferenceAttribute&quot;, const_newAttrValue
      end if
   end if
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o179">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>D4444E6A-C40A-4F48-A69B-B5CB5419AFA5</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>1252924682</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252924772</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o180">
<a:ObjectID>3FB2A3C4-A6EE-4B9C-88DF-A1F36A18E40A</a:ObjectID>
<a:Name>DefineNewAttribute</a:Name>
<a:CreationDate>1252924682</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253118374</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   
   &#39; create extended attribute
   Dim attr, oldValue
   oldValue = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.StandardOrReferenceAttribute&quot;)
   set attr = CreateNewAttribute(obj, obj.ParentObject.GetExtendedAttribute(&quot;%CurrentTargetCode%.ImportedKind&quot;))
   if not attr is nothing then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.StandardOrReferenceAttribute&quot;, attr.Target.Code &amp; &quot;.&quot; &amp; attr.Name
      set attr = nothing
   else
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.StandardOrReferenceAttribute&quot;, oldValue
   end if
   
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o181">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:ObjectID>EF6B802F-AC08-4F07-9334-E566FC8D0307</a:ObjectID>
<a:Name>Forms</a:Name>
<a:CreationDate>1253085823</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1253087318</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o182">
<a:ObjectID>A81E5F9B-B5A9-4D8A-A7AB-0C7953375F5E</a:ObjectID>
<a:Name>NewAttribute</a:Name>
<a:Code>New Attribute</a:Code>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;StaticText Name=&quot;Intro&quot; Caption=&quot;Specify a name and a data type for your attribute,\nalong with the kind of PowerDesigner object if the data type is object.&quot; /&gt;
   &lt;Space Name=&quot;Space1&quot; Width=&quot;6&quot; Height=&quot;12&quot; HorizontalResize=&quot;No&quot; VerticalResize=&quot;No&quot; /&gt;
   &lt;Edit Name=&quot;Name&quot; Caption=&quot;Name&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; ReadOnly=&quot;No&quot; /&gt;
   
   &lt;HorizontalLayout Name=&quot;HorizontalLayout1&quot; &gt;
      &lt;ExtendedAttribute Attribute=&quot;RefClassName&quot; Caption=&quot;Object type&quot; AttributeID=&quot;{C6233B2C-FF77-4FDB-96A0-960A3527E0CC}&quot; GrayHiddenAttributes=&quot;No&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;Yes&quot; VerticalResize=&quot;true&quot; Display=&quot;Combobox&quot; LeftText=&quot;false&quot; /&gt;
      &lt;CustomMethod Method=&quot;DefineNewRefMetaclass&quot; Name=&quot;DefineNewRefMetaclass&quot; Caption=&quot;New object type...&quot; HorizontalResize=&quot;No&quot; Display=&quot;Img_Create&quot; /&gt;
   &lt;/HorizontalLayout&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>1252928359</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1268055521</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:Label>New Attribute</a:Label>
<a:FormType>Dialog</a:FormType>
<a:HelpFile>5375</a:HelpFile>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
<o:CriterionTargetItem Id="o183">
<a:ObjectID>2500087C-334E-40EC-A267-FEFFBB439DE8</a:ObjectID>
<a:Name>MultipleRefClasses</a:Name>
<a:CriterionTargetItem.Value>(%isRefMapping%) &amp;&amp; (%IsSingleRefClass% == false)</a:CriterionTargetItem.Value>
<a:CreationDate>1252310779</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1372780213</a:ModificationDate>
<a:Modifier>I063974</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o184">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>8966C7C3-44DE-40B6-A1BF-6B73C4837A45</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>1252311411</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252311611</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o185">
<a:ObjectID>971C97DA-C73D-4F57-8436-44E2D40AC560</a:ObjectID>
<a:Name>EditableRefClassName</a:Name>
<a:CreationDate>1252311411</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1261573529</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The class name of referenced object (can be a standard class or a stereotype used as metaclass)</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.ListOfValues>%allClassNames%</a:ExtendedAttributeTargetItem.ListOfValues>
<a:Computed>1</a:Computed>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.RefClassName&quot;)
End Function</a:GetMethodScript>
<a:SetMethodScript>Sub %Set%(obj, value)
   obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefClassName&quot;, value
End Sub</a:SetMethodScript>
<a:ExtendedAttributeTargetItem.Complete>1</a:ExtendedAttributeTargetItem.Complete>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o186">
<a:TypePublicName>CriterionTargetItem</a:TypePublicName>
<a:ObjectID>2A82DC16-C33C-4E74-B340-C63F00E9ADF2</a:ObjectID>
<a:Name>Criteria</a:Name>
<a:CreationDate>1372779924</a:CreationDate>
<a:Creator>I063974</a:Creator>
<a:ModificationDate>1372780213</a:ModificationDate>
<a:Modifier>I063974</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CriterionTargetItem Id="o187">
<a:ObjectID>46807129-97B3-47F1-A469-9A40DE8089B2</a:ObjectID>
<a:Name>SearchExternalModels</a:Name>
<a:CriterionTargetItem.Value>%ParentObject.ParentObject.SearchExternalModels%</a:CriterionTargetItem.Value>
<a:CreationDate>1372779924</a:CreationDate>
<a:Creator>I063974</a:Creator>
<a:ModificationDate>1372781037</a:ModificationDate>
<a:Modifier>I063974</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:ParentCriterion>
<o:CriterionTargetItem Ref="o183"/>
</c:ParentCriterion>
<c:Categories>
<o:TypedCategoryTargetItem Id="o188">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>E5DCE4F5-7F7D-4954-A322-A0577895A4A9</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>1372779924</a:CreationDate>
<a:Creator>I063974</a:Creator>
<a:ModificationDate>1372780213</a:ModificationDate>
<a:Modifier>I063974</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o189">
<a:ObjectID>1B1B35B2-DFBD-4A9C-AD00-BB4AA554B06E</a:ObjectID>
<a:Name>BrowseExternalClasses</a:Name>
<a:CreationDate>1371660991</a:CreationDate>
<a:Creator>I063974</a:Creator>
<a:ModificationDate>1372780213</a:ModificationDate>
<a:Modifier>I063974</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   &#39; Display metaclass picker dialog
   Dim metaClssQName
   metaClssQName = MetaModel.SelectAnyMetaClass()
   if not metaClssQName = &quot;&quot; then
      obj.SetExtendedAttribute &quot;%CurrentTargetCode%.RefClassName&quot;, metaClssQName   
   end if
   
   &#39;Commit selection in EditableRefClassName extended attr
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
<o:CriterionTargetItem Id="o190">
<a:ObjectID>6ABCDCDE-0EFD-4F6E-A1A6-A4C27FE4A36C</a:ObjectID>
<a:Name>SingleRefClass</a:Name>
<a:CriterionTargetItem.Value>(%isRefMapping%) &amp;&amp; (%IsSingleRefClass% == true)</a:CriterionTargetItem.Value>
<a:CreationDate>1252310779</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252314448</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o191">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>37406251-D4A5-48DB-B565-7ED2EAA56618</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>1252311411</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252311611</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o192">
<a:ObjectID>902C95B3-6A48-48A2-84AE-4A18958F1011</a:ObjectID>
<a:Name>ReadOnlyRefClassName</a:Name>
<a:CreationDate>1252311411</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252311611</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:Comment>The class name of objects that can be referenced by the attribute or stored in the relationship.
This class name is computed from the meta definition of the object attribute or collection.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   %Get% = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.MinimalRefClassName&quot;)
End Function</a:GetMethodScript>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:StereotypeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o193">
<a:ObjectID>0481D500-F278-47A0-A0AD-CDFCC0337749</a:ObjectID>
<a:Name>BasePackage</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1290502101</a:ModificationDate>
<a:Modifier>yuz</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o194">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>55DC0CAE-EE01-460E-9646-8E831DB46585</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o195">
<a:ObjectID>5757E3D8-9B6D-4CE3-A1AA-5C0C4E74053C</a:ObjectID>
<a:Name>ImportNewExcelFile</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Creates a new Excel Import object and launches the import on it in order to create or update objects.
The mapping will be defined on demand.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   
   &#39; Create new object
   Dim import
   set import = obj.ExtendedObjects.CreateNew()
   if not import is nothing then
      import.Stereotype = &quot;ExcelImport&quot;     
      
      &#39; Launch import 
      import.ExecuteCustomMethod &quot;%CurrentTargetCode%.Import&quot;
      
      &#39; Detect error
      If import.GetExtendedAttribute( &quot;%CurrentTargetCode%.DataSourcePersist&quot;) = &quot;&quot; then
         import.Delete
      End If
      set import = nothing
   End If
   
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o196">
<a:TypePublicName>EventHandlerTargetItem</a:TypePublicName>
<a:ObjectID>A8E87796-75B1-48DC-AE92-0D757FCC0F66</a:ObjectID>
<a:Name>Event Handlers</a:Name>
<a:CreationDate>1258651878</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1258651900</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:EventHandlerTargetItem Id="o197">
<a:ObjectID>7E0CD31D-B84B-4E49-BD55-79CDC14352C8</a:ObjectID>
<a:Name>OnDropFile</a:Name>
<a:CreationDate>1258651878</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1263995827</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HandlerScript>Function %OnDropFile%(dropDestination, filename)
   %OnDropFile% = True
   if (ucase(mid(filename, len(filename)-3)) = &quot;.XLS&quot;) or (ucase(mid(filename, len(filename)-4)) = &quot;.XLSX&quot;) or (ucase(mid(filename, len(filename)-3)) = &quot;.CSV&quot;) then
      Dim res
      res = msgbox (txtConfirmImport, vbYesNoCancel, txtImportConfirmation)
      if res = vbCancel then
         %OnDropFile% = False
      elseif res = vbYes then
         Dim newImport
         set newImport = dropDestination.ExtendedObjects.CreateNew()
         newImport.Stereotype = &quot;ExcelImport&quot;
         newImport.SetExtendedAttribute &quot;%CurrentTargetCode%.DataSource&quot;, filename
         newImport.ExecuteCustomMethod &quot;%CurrentTargetCode%.Import&quot;
         %OnDropFile% = False
      end if
   end if
End Function</a:HandlerScript>
</o:EventHandlerTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o198">
<a:TypePublicName>CriterionTargetItem</a:TypePublicName>
<a:ObjectID>BEFE8BCE-6618-4EF0-B50A-D54B6B238775</a:ObjectID>
<a:Name>Criteria</a:Name>
<a:CreationDate>1288663044</a:CreationDate>
<a:Creator>yuz</a:Creator>
<a:ModificationDate>1288663093</a:ModificationDate>
<a:Modifier>yuz</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:CriterionTargetItem Id="o199">
<a:ObjectID>2A361240-49A0-4109-951B-4181A438E466</a:ObjectID>
<a:Name>NotGlossary</a:Name>
<a:CriterionTargetItem.Value>%Model.MetaClass.Library.PublicName% != &quot;PdGLM&quot;</a:CriterionTargetItem.Value>
<a:CreationDate>1288663044</a:CreationDate>
<a:Creator>yuz</a:Creator>
<a:ModificationDate>1290502243</a:ModificationDate>
<a:Modifier>yuz</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o200">
<a:TypePublicName>MenuTargetItem</a:TypePublicName>
<a:ObjectID>B9F37726-FD74-46A8-AB8C-90D7CCDB3A23</a:ObjectID>
<a:Name>Menus</a:Name>
<a:CreationDate>1290502062</a:CreationDate>
<a:Creator>yuz</a:Creator>
<a:ModificationDate>1290502101</a:ModificationDate>
<a:Modifier>yuz</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MenuTargetItem Id="o201">
<a:ObjectID>BD8C6AAD-B98F-4CD1-893E-A06243F99550</a:ObjectID>
<a:Name>Import</a:Name>
<a:MenuTargetItem.Value>&lt;Menu&gt;
   &lt;Command Name=&quot;ImportNewExcelFile&quot; Caption=&quot;Import Excel File...&quot; /&gt;
&lt;/Menu&gt;
</a:MenuTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>1290502101</a:ModificationDate>
<a:Modifier>yuz</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:MenuTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:CriterionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o202">
<a:ObjectID>6057B6C7-4E96-4E13-A101-7961886CB8DF</a:ObjectID>
<a:Name>MetaClass</a:Name>
<a:CreationDate>1252930010</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252944726</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TypedCategoryTargetItem Id="o203">
<a:TypePublicName>TemplateTargetItem</a:TypePublicName>
<a:ObjectID>DD016B53-83AD-42EC-AB3D-B9779FC3722A</a:ObjectID>
<a:Name>Templates</a:Name>
<a:CreationDate>1252930010</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252946469</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TemplateTargetItem Id="o204">
<a:ObjectID>CDF0AA56-9339-4477-8968-FD99A9EB4488</a:ObjectID>
<a:Name>allSubObjects</a:Name>
<a:TemplateTargetItem.Value>.foreach_item(Collections,,,%Composition%)
   .if %ContentClass%
      .if %ContentClass.isConcreteSubObject%
.set_value(_oldPrnt, %_prnt%, new)
.set_value(_prnt, %_oldPrnt%.%ContentClass.PublicName%, update)
%_prnt%;[%ContentClass.allSubObjects%]
.set_value(_prnt, %_oldPrnt%, update)
      .endif
   .endif
.next(;)</a:TemplateTargetItem.Value>
<a:CreationDate>1252930010</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252944574</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o205">
<a:ObjectID>34916A63-D700-42B3-AB56-22F28BC332F8</a:ObjectID>
<a:Name>isConcreteSubObject</a:Name>
<a:TemplateTargetItem.Value>.if (%Abstract%)
false
.elsif (%PublicName% == &quot;ExtendedCollection&quot;) || (%PublicName% == &quot;ExtendedComposition&quot;) || (%PublicName% == &quot;ExtendedSubObject&quot;)
false
.else
   .if %checkIsAlreadyInParent% == %_prnt%
      .set_value(_subObj,%Flags%, new)
      .log %_subObj%
   .//   .if %&amp;%(Flags, 8388608)
      .if (true)
true
      .else
false
      .endif
   .else
false
   .endif
.endif</a:TemplateTargetItem.Value>
<a:CreationDate>1252944268</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252946713</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
<o:TemplateTargetItem Id="o206">
<a:ObjectID>BEFBC5E9-3865-431A-A47B-B24D9CEEA0A1</a:ObjectID>
<a:Name>checkIsAlreadyInParent</a:Name>
<a:TemplateTargetItem.Value>.replace(%PublicName%,XXX)
%_prnt%
.endreplace</a:TemplateTargetItem.Value>
<a:CreationDate>1252946326</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1252946713</a:ModificationDate>
<a:Modifier>lpommier</a:Modifier>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TemplateTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
</c:Categories>
</o:ExtendedModelDefinition>

</EXASET>