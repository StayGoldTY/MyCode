<?xml version="1.0" encoding="UTF-8"?>
<?PowerDesigner AppLocale="UTF16" AutoAttach="FALSE" Code="MS_Project_Export" HasExtendedMetaClass="FALSE" ID="{28057AB8-5F84-4D8C-AFAF-92299DFEF9C5}" LastModificationDate="1181368773" LibID="{95383AA3-C9A7-4EA0-9F3B-2A8F183A2C9B}" Name="Microsoft Project" Objects="28" Symbols="0" Type="{186C8AC3-D3DC-11D3-881C-00508B03C75C}" signature="XEM_XML" version="16.5.5.4689"?>
<!-- do not edit this file -->

<EXASET xmlns:a="attribute" xmlns:c="collection" xmlns:o="object">

<o:ExtendedModelDefinition Id="o1">
<a:ObjectID>28057AB8-5F84-4D8C-AFAF-92299DFEF9C5</a:ObjectID>
<a:Name>Microsoft Project</a:Name>
<a:Code>MS_Project_Export</a:Code>
<a:CreationDate>1133528485</a:CreationDate>
<a:Creator>lpommier</a:Creator>
<a:ModificationDate>1181368773</a:ModificationDate>
<a:Modifier>xwang</a:Modifier>
<a:Comment>This extension allows to export a requirement model into a Microsoft Project file.
It requires Microsoft Project (at least version 2000) to be installed on the workstation.</a:Comment>
<a:LibraryID>95383AA3-C9A7-4EA0-9F3B-2A8F183A2C9B</a:LibraryID>
<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined



&#39; *****************************************************************************************
&#39; *
&#39; *       Misc methods for both export and import:
&#39; *
&#39; *   FindTaskInProject
&#39; *   FindResourceInProject
&#39; *   FindRequirementFromProject
&#39; *   FindPDUserFromAssign
&#39; *
&#39; *       Main methods for import/export could be found at end of this script:
&#39; *
&#39; *   ExportReqIntoProject
&#39; *   ImportReqFromProject
&#39; *
&#39; *****************************************************************************************

&#39; Find the task associated to the requirement
&#39; based on its name or code
Function FindTaskInProject(doc, req)
   Set FindTaskInProject = Nothing
   If not doc is nothing and not req is nothing then
   
      Dim T
      For Each T In doc.Tasks
         If not T is nothing then
            If T.Name = req.Name Then
               Set FindTaskInProject = T
            End If
           If T.WBS = req.Code Then
               Set FindTaskInProject = T
            End If            
         end if
      Next
      Set T = Nothing
   
   End If
End Function

&#39; Find the resource associated to the user
Function FindResourceInProject(doc, user)
   Set FindResourceInProject = Nothing
   If not doc is nothing and not user is nothing then
   
      Dim R
      For Each R In doc.Resources
         If not R is nothing then
            If R.Name = user.Name Then
               Set FindResourceInProject = R
            End If
           If R.OutlineCode1 = user.Code Then
               Set FindResourceInProject = R
            End If            
         end if
      Next
      Set R = Nothing
   
   End If
End Function

&#39; Find the requirement associated to the task
Function FindRequirementFromProject(reqPrnt, task)
   Set FindRequirementFromProject = Nothing
   If not task is nothing and not reqPrnt is nothing then
   
      Dim R
      For Each R In reqPrnt.Requirements
         If not R is nothing then
            If R.Name = task.Name Then
               Set FindRequirementFromProject = R
            End If
           If task.OutlineCode1 = R.Code Then
               Set FindRequirementFromProject = T
            End If            
         end if
      Next
      Set R = Nothing
   
   End If
End Function

&#39; Find the user associated to the resource
Function FindPDUserFromAssign(model, assign)
   Set FindPDUserFromAssign = Nothing
   If not model is nothing and not assign is nothing then
   
      Dim res, proj
      Set proj = assign.Application.ActiveProject
      For each res in proj.Resources
         If assign.ResourceName = res.Name Then            
            exit for
         End If
         set res = Nothing
      Next
      
      If not res is nothing then
         Dim U
         For Each U In model.GroupsAndUsers
            If not U is nothing then
               If U.Code = res.Code Then
                  Set FindPDUserFromAssign = U
               End If
              If U.Name = res.Name Then
                  Set FindPDUserFromAssign = U
               End If            
            end if
         Next
      
         If FindPDUserFromAssign is Nothing Then
            For Each U In model.GroupsAndUsers
               If not U is nothing then
                  If U.Code = res.Name Then
                     Set FindPDUserFromAssign = U
                  End If
                 If U.Name = res.Code Then
                     Set FindPDUserFromAssign = U
                  End If            
               end if
            Next
         End If
         Set U = Nothing
      End If
      
      Set res = nothing
   
   End If
End Function



&#39; *****************************************************************************************
&#39; *
&#39; *       EXPORT to MS Project
&#39; *
&#39; *****************************************************************************************

&#39; This method copies requirement attributes into the task
Sub CopyReqIntoTask(doc, req, currTask)

   &#39; copy attributes
   If not req.Composite Then
      currTask.ActualDuration = req.workload*480
      currTask.Estimated = false
   End If
   currTask.PercentComplete = 0
   If 1000 - req.priority*400 &lt; 0 Then
      currTask.Priority = 100
   Else
      currTask.Priority = 1000 - req.priority*400
   End If
   currTask.WBS = req.code
   &#39;currTask.Notes = Rtf2ASCII(req.Description)
   
   &#39; copy user allocations
   Dim userAlloc, user, res
   For Each userAlloc in req.UserAllocations
      Set user = userAlloc.user
      If userAlloc.Type = &quot;Development&quot; or userAlloc.Type = &quot;DEVL&quot; or userAlloc.Type = &quot;&quot; Then
         &#39; Search for a MS Project resource corresponding to the user object
         Set res = FindResourceInProject(doc, user)
         If res is Nothing then
            &#39; Create new MS Project resource if it does not already exist
            set res = doc.Resources.Add(user.Name)
            If not res is Nothing Then
               res.Initials = user.Code
               &#39;res.Notes = Rtf2ASCII(user.Description)
            end If
         End If  
         &#39; Assign the resource to the task
         If not res is nothing then
            currTask.Assignments.Add ,res.UniqueID
         End If       
      End If
   Next
   Set userAlloc = Nothing
   Set user = Nothing
   
End Sub


&#39; Main entry point for first export
&#39; Creates recursively tasks from requirements
&#39; Parameters:
&#39;  - doc is the MS Project document
&#39;  - req is the requirement object (or package) to export
&#39;  - prntTask is the MS Project task on which the obejct will be exported 
&#39;    (should be nothing for root package)
&#39;  - view is the optional requirement object view used to filter
&#39;    the list of requirements to export
&#39;  
Sub ExportReqIntoProject(doc, req, prntTask, view)

   &#39; Check existing task in MS Project document
   Dim existingTask
   set existingTask = FindTaskInProject(doc, req)
   if not existingTask is nothing then
      Set existingTask = nothing
      Exit Sub
   end if
   
   &#39; Stop if requirement object is not selected
   &#39; or not in specified view
   If req.IsKindOf(PDRQM.Cls_Requirement) Then   
      If not req.Selected Then
         Exit Sub &#39; Not selected
      End If
      If not view is nothing Then
         If not view.ObjectMatchfilter(req) Then
            Exit Sub &#39; Not in view
         End If
      End If
   End If
   
   &#39; Create MS Project task if required
   Dim currTask
   set currTask = Nothing
   If req.IsKindOf(PDRQM.Cls_Requirement) Then
      If not existingTask is nothing then
         set currTask = existingTask     
      else
         set currTask = doc.Tasks.Add(req.Title)     
      End If
      If not currTask is nothing then
         CopyReqIntoTask doc, req, currTask &#39; Copy all requirement attributes into the task
      End If
   End If
   
   &#39; Move newlky created task under appropriated parent task
   If existingTask is nothing Then
      If not prntTask is Nothing then
         While currTask.OutlineLevel &lt; req.Level
            currTask.outlineIndent
         Wend
      End If
      If not currTask is Nothing then
         While currTask.OutlineLevel &gt; req.Level
            currTask.outlineOutdent
         Wend
      End If
   End If
   
   &#39; Loop on sub-requirements
   Dim subReq
   For each subReq in req.Requirements
      ExportReqIntoProject doc, subReq, currTask, view
   Next
   
   &#39; Release references
   Set subReq = Nothing
   Set currTask = Nothing
   Set existingTask = Nothing
   
End Sub





&#39; *****************************************************************************************
&#39; *
&#39; *       IMPORT from MS Project
&#39; *
&#39; *****************************************************************************************

&#39; Main entry point for import
&#39; Recursively update requirements from tasks
&#39; Parameters:
&#39;  - doc is the MS Project document to import
&#39;  - task is the MS Project task to import (nothing on first call)
&#39;  - reqPrnt is the requirement object (or package) under which tasks will be imported
Sub ImportReqFromProject(doc, task, reqPrnt)

   If task is nothing then
      
      &#39; Loop on all tasks of current document
      Dim currTask
      For Each currTask in doc.Tasks
         If not currTask is Nothing Then
            If currTask.OutlineLevel = 1 Then
               ImportReqFromProject doc, currTask, reqPrnt
            End If
         End If
      Next
      Set currTask = Nothing

   Else
   
      Dim req
      Set Req = FindRequirementFromProject(reqPrnt, task)
      If not req is Nothing Then      
      
         &#39; Retrieve option values
         Dim UpdTitle, UpdWkld, UpdAlloc   
         UpdTitle = req.Package.GetExtendedAttribute(&quot;%CurrentTargetCode%.UpdTitleOnImport&quot;)
         UpdWkld  = req.Package.GetExtendedAttribute(&quot;%CurrentTargetCode%.UpdWorkloadOnImport&quot;)
         UpdAlloc = req.Package.GetExtendedAttribute(&quot;%CurrentTargetCode%.UpdAllocOnImport&quot;)      
         
         &#39; Update name
         If UpdTitle And not req.Title = task.Name Then
            output &quot;  Updating title for requirement &quot; + req.Title
            req.Title = task.Name
         End If
      
         If req.Composite Then
         
            &#39; Import as composite requirement
            Dim subTask, RefLevel, CurLevel
            RefLevel = -2
            For Each subTask in doc.Tasks
               If not subTask is Nothing Then
                  If subTask = task Then
                     RefLevel = task.OutlineLevel
                  Else
                     CurLevel = subTask.OutlineLevel
                     If CurLevel = RefLevel + 1 Then
                        ImportReqFromProject doc, subTask, req
                     Else
                        If CurLevel &lt;= RefLevel Then
                           RefLevel = -3
                        End If
                     End If
                  End If
               End If
            Next
            Set subTask = Nothing
            
         Else
                     
            &#39; Updating workload
            If UpdWkld Then
               Dim wkld
               wkld  = task.Duration/480
               If wkld &gt; 0 And not wkld = Req.Workload Then
                  output &quot;  Updating workload for requirement &quot; + req.Title
                  req.Workload = wkld
               End If 
            End If
                     
            &#39; Updating user allocation
            If UpdAlloc Then
               Dim assign, user, userAlloc, found
               Set found = Nothing
               For Each assign In task.Assignments
                   Set user = FindPDUserFromAssign(req.model, assign)
                   If not user is nothing then
                      For Each userAlloc in req.UserAllocations
                         If userAlloc.Type = &quot;Development&quot; or userAlloc.Type = &quot;DEVL&quot; or userAlloc.Type = &quot;&quot; Then
                            If not userAlloc.user = user Then
                              Set found = userAlloc
                            End If
                         End If
                      Next
                      Set userAlloc = Nothing
                   End If
               Next
               If not found is Nothing Then
                  Dim newUserAlloc
                  Set newUserAlloc = req.UserAllocations.CreateNew()
                  If not newUserAlloc is Nothing then
                     output &quot;  Updating user allocation for requirement &quot; + req.Title
                     newUserAlloc.user = user
                     newUserAlloc.Stereotype = found.Stereotype
                     newUserAlloc.Type = found.Type
                     found.Delete
                     Set newUserAlloc = Nothing
                  End If
                  Set found = Nothing
               End If
               Set assign = Nothing
            End If
            
         End If
         
         Set Req = Nothing
         
      Else
         Output &quot;Unrecognized task &quot; + task.Name         
      End If
   End If
   
End Sub

</a:CheckGlobalScript>
<c:Categories>
<o:TargetCategory Id="o2">
<a:ObjectID>D7EE9EE8-5AA2-4969-851D-257948D0FB57</a:ObjectID>
<a:Name>Generation</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
</o:TargetCategory>
<o:ProfileTargetItem Id="o3">
<a:ObjectID>746A0DCD-4C2C-4210-8698-E41B72051961</a:ObjectID>
<a:Name>Profile</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:TargetCategory Id="o4">
<a:ObjectID>F7E283C3-8420-4BB0-B4D4-43B63E0BB33F</a:ObjectID>
<a:Name>Shared</a:Name>
<a:Code>Shared</a:Code>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:TargetCategory>
<o:MetaClassTargetItem Id="o5">
<a:ObjectID>EC8387DF-60A3-4E32-B45F-F5497A689F5A</a:ObjectID>
<a:Name>BasePackage</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:EnableSelectionGeneration>1</a:EnableSelectionGeneration>
<c:Categories>
<o:TypedCategoryTargetItem Id="o6">
<a:TypePublicName>MethodTargetItem</a:TypePublicName>
<a:ObjectID>591BC20E-0D73-4251-808C-4C58D3ACDC49</a:ObjectID>
<a:Name>Methods</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MethodTargetItem Id="o7">
<a:ObjectID>65C91FA8-552A-4580-B9B9-1E00ED6C415E</a:ObjectID>
<a:Name>ExportRequirements</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Exports the requirements of the selected package as a new Microsoft Project file.
</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj) &#39; obj is the package or model on which the command is executed
        
   &#39; Get project application
   Dim pjapp
   Set pjapp = CreateObject(&quot;MSProject.Project&quot;)
   If pjapp is Nothing Then
      MsgBox &quot;Cannot open Microsoft Project application&quot;, 0, &quot;Error&quot;
      Exit Sub
   End If
   
   &#39; Select the file name
   Dim dialog, filename, view, path
   Set view = Nothing
   Set dialog = obj.CreateCustomDialog(&quot;%CurrentTargetCode%.Export Microsoft Project&quot;)
   If dialog is nothing then
      filename = InputBox (&quot;Select the Microsoft Project file name:&quot;, &quot;Export Requirements to Microsoft Project&quot;, &quot;.\&quot; + obj.name + &quot;.mpp&quot;)
   Else
      If not dialog.ShowDialog() then
         Exit Sub &#39; Cancel in dialog
      End If
      &#39; Retrieve values committed in extended attributes
      path = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.LastMSProjectExportDirectory&quot;)
      filename = path
      Set view = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.LastProjectExportView&quot;)
      &#39; Compute a default mpp filename
      If not path = &quot;&quot; then
         If not view is nothing then
            filename = path + &quot;\&quot; + view.name + &quot;.mpp&quot;
         Else
            filename = path + &quot;\&quot; + obj.name + &quot;.mpp&quot;
         End If
      End If
      Set dialog = Nothing
   End If
   If filename = &quot;&quot; Then
      Exit Sub
   End If
   
   &#39; Copy template if any
   &#39; A template must be named template.mpp and be located under the export directory
   Dim templateFile
   templateFile = &quot;&quot;
   If not path = &quot;&quot; Then
      Dim fso
      Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)
      If not fso is nothing then
         templateFile = path + &quot;\template.mpp&quot;
         If fso.FileExists(templateFile) Then
            If fso.FileExists(filename) Then
               If not MsgBox (&quot;File already exist, click OK to replace it.&quot;, 1, &quot;File Replace&quot;) = 1 Then
                  Exit sub
               End If
            End If
            fso.copyFile templateFile, filename, true
         Else
            templateFile = &quot;&quot;
         End If
         Set fso = Nothing
      End If
   End If
   
   &#39; Create a new project document with specified filename
   Dim pj
   If templateFile = &quot;&quot; Then
      output &quot;Creating a new project file: &quot; + filename
      pjapp.Application.FileNew
   Else
      output &quot;Initializing a project file from template: &quot; + filename
      pjapp.Application.FileOpen filename
   End If
   Set pj = pjapp.Application.ActiveProject
   If pj is nothing then
      MsgBox &quot;Cannot create new Microsoft Project document&quot;, 0, &quot;Error&quot;
      Set pjapp = Nothing
      Exit Sub
   End If
   If templateFile = &quot;&quot; Then
      pj.Application.FileSaveAs filename
   End If
   
   &#39; Export requirements to project
   &#39; This method is located in Global Script section
   ExportReqIntoProject pj, obj, nothing, view
   
   &#39; Call MS Project Level feature
   pj.Application.LevelNow
   
   &#39; Done
   pj.Application.FileSave   
   set pj = Nothing
   pjapp.Application.FileClose   
   set pjapp = Nothing
   output &quot;Microsoft Project generation succeeded&quot;
   
End Sub</a:MethodScript>
</o:MethodTargetItem>
<o:MethodTargetItem Id="o8">
<a:ObjectID>197F8587-88F3-4756-8B47-2A744829C33B</a:ObjectID>
<a:Name>ImportRequirements</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>Imports requirements in the selected package from an existing Microsoft Project file.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
        
   &#39; Get project application
   Dim pjapp
   Set pjapp = CreateObject(&quot;MSProject.Project&quot;)
   If pjapp is Nothing Then
      MsgBox &quot;Cannot open Microsoft Project application&quot;, 0, &quot;Error&quot;
      Exit Sub
   End If
   
   &#39; Select the file name
   Dim dialog, filename, view
   Set view = Nothing
   Set dialog = obj.CreateCustomDialog(&quot;%CurrentTargetCode%.Import Microsoft Project&quot;)
   If dialog is nothing then
      filename = InputBox (&quot;Select the Microsoft Project file name:&quot;, &quot;Import Requirements from Microsoft Project&quot;, &quot;.\&quot; + obj.name + &quot;.mpp&quot;)
   Else
      If not dialog.ShowDialog() then
         Exit Sub
      End If
      filename = obj.GetExtendedAttribute(&quot;%CurrentTargetCode%.LastMSProjectImportedFile&quot;)
      Set dialog = Nothing
   End If
   If filename = &quot;&quot; Then
      Exit Sub
   End If
   
   &#39; Check file existence
   Dim fso
   Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)
   If not fso is nothing then
      If not fso.FileExists(filename) Then  
         MsgBox &quot;The selected file does not exist: &quot; + filename, 0, &quot;Error&quot;
         Exit Sub
         Set fso = Nothing
      End If
   End If
      
   &#39; Open new project document with specified filename
   output &quot;Opening the project file: &quot; + filename
   On Error Resume Next
   pjapp.Application.FileOpen filename
   On error GoTo 0                
   Dim pj
   Set pj = pjapp.Application.ActiveProject
   If pj is nothing then
      MsgBox &quot;Cannot open Microsoft Project document &quot; + filename, 0, &quot;Error&quot;
      Set pjapp = Nothing
      Exit Sub
   End If
   
   &#39; Import requirements from project
   ImportReqFromProject pj, nothing, obj
   
   &#39; Done
   set pj = Nothing
   pjapp.Application.FileClose   
   set pjapp = Nothing
   output &quot;Microsoft Project import succeeded&quot;
   
End Sub</a:MethodScript>
</o:MethodTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o9">
<a:TypePublicName>MenuTargetItem</a:TypePublicName>
<a:ObjectID>CCC80F81-0AEF-425A-AEF4-6E44DF88815C</a:ObjectID>
<a:Name>Menus</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:MenuTargetItem Id="o10">
<a:ObjectID>F1DD4D86-6CBC-43D0-91EB-8CE0716FB3D9</a:ObjectID>
<a:Name>Custom</a:Name>
<a:MenuTargetItem.Value>&lt;Menu&gt;
   &lt;Command Name=&quot;ExportRequirements&quot; Caption=&quot;Export Requirements to Microsoft Project...&quot; /&gt;
   &lt;Command Name=&quot;ImportRequirements&quot; Caption=&quot;Import Requirements from Microsoft Project...&quot; /&gt;
&lt;/Menu&gt;
</a:MenuTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
</o:MenuTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o11">
<a:TypePublicName>FormTargetItem</a:TypePublicName>
<a:ObjectID>44B0D0E9-19D7-473B-9AF1-ACC1EE77A5E6</a:ObjectID>
<a:Name>Forms</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:FormTargetItem Id="o12">
<a:ObjectID>9D271752-A7A0-47B5-A38B-EFDBE6471987</a:ObjectID>
<a:Name>Export Microsoft Project</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Name=&quot;Select the export directory&quot; Caption=&quot;Select the export directory&quot; Attribute=&quot;LastMSProjectExportDirectory&quot; AttributeID=&quot;{B3436947-0AD8-4D18-AC56-3C28FCAFA680}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; /&gt;
   &lt;ExtendedAttribute Name=&quot;Select an optional view for filtering&quot; Caption=&quot;Select an optional view for filtering&quot; Attribute=&quot;LastProjectExportView&quot; AttributeID=&quot;{C0D0127D-1C4F-45B6-B13E-16A105CCFB4C}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; /&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:FormType>Dialog</a:FormType>
</o:FormTargetItem>
<o:FormTargetItem Id="o13">
<a:ObjectID>2B5685F8-64E3-4CBA-A630-19FF7C8375E6</a:ObjectID>
<a:Name>Import Microsoft Project</a:Name>
<a:FormTargetItem.Value>&lt;Form  &gt;
   &lt;ExtendedAttribute Name=&quot;Select the Microsoft Project file to import&quot; Caption=&quot;Select the Microsoft Project file to import&quot; Attribute=&quot;LastMSProjectImportedFile&quot; AttributeID=&quot;{590721A4-180A-40F8-8E23-95B123CA9F5B}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; HorizontalResize=&quot;Yes&quot; /&gt;
   &lt;GroupBox Name=&quot;GroupBox1&quot; Caption=&quot;Import options&quot;   ControlAsLabel=&quot;No&quot; &gt;
      &lt;ExtendedAttribute Name=&quot;UpdateTitle&quot; Caption=&quot;Update title&quot; Attribute=&quot;UpdTitleOnImport&quot; AttributeID=&quot;{42278D35-F987-4DE0-A12A-C30A9CEC9EC8}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; LeftText=&quot;No&quot; /&gt;
      &lt;ExtendedAttribute Name=&quot;UpdateWorkload&quot; Caption=&quot;Update workload&quot; Attribute=&quot;UpdWorkloadOnImport&quot; AttributeID=&quot;{9A835179-06D3-4BF9-BF42-7EDE049B2647}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; LeftText=&quot;No&quot; /&gt;
      &lt;ExtendedAttribute Name=&quot;UpdateUserAllocation&quot; Caption=&quot;Update user allocation&quot; Attribute=&quot;UpdAllocOnImport&quot; AttributeID=&quot;{557882B3-9A57-4DC8-A008-C2447164DCD7}&quot; GrayHiddenAttributes=&quot;Yes&quot; SizeInChars=&quot;1&quot; LineNumber=&quot;3&quot; HorizontalResize=&quot;true&quot; VerticalResize=&quot;true&quot; LeftText=&quot;No&quot; /&gt;
   &lt;/GroupBox&gt;
&lt;/Form&gt;
</a:FormTargetItem.Value>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:FormType>Dialog</a:FormType>
</o:FormTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o14">
<a:TypePublicName>ExtendedAttributeTargetItem</a:TypePublicName>
<a:ObjectID>B6C5792C-D00B-45CE-A892-7597E7DFBD3C</a:ObjectID>
<a:Name>Extended Attributes</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedAttributeTargetItem Id="o15">
<a:ObjectID>B3436947-0AD8-4D18-AC56-3C28FCAFA680</a:ObjectID>
<a:Name>LastMSProjectExportDirectory</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>This attribute stores the directory used in last export to Microsoft Project.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>11</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>\\neo\share</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o16">
<a:ObjectID>C0D0127D-1C4F-45B6-B13E-16A105CCFB4C</a:ObjectID>
<a:Name>LastProjectExportView</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>This attribute stores the requirement view selected in last export to Microsoft Project.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>15</a:ExtendedAttributeTargetItem.DataType>
<a:DestinationClassID>9453AEF1-7EB1-4D2E-BAE9-D396B24CF703</a:DestinationClassID>
<a:ValidateDataType>0</a:ValidateDataType>
<c:ExtendedCollection>
<o:ExtendedCollectionTargetItem Ref="o17"/>
</c:ExtendedCollection>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o18">
<a:ObjectID>590721A4-180A-40F8-8E23-95B123CA9F5B</a:ObjectID>
<a:Name>LastMSProjectImportedFile</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>This attribute stores the Microsoft Project document selected in last import from Microsoft Project.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>3</a:ExtendedAttributeTargetItem.DataType>
<a:ExtendedAttributeTargetItem.Value>*.mpp</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o19">
<a:ObjectID>42278D35-F987-4DE0-A12A-C30A9CEC9EC8</a:ObjectID>
<a:Name>UpdTitleOnImport</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>During import, should we update the requirement titles using values defined in the Microsoft Project document?</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>false</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o20">
<a:ObjectID>9A835179-06D3-4BF9-BF42-7EDE049B2647</a:ObjectID>
<a:Name>UpdWorkloadOnImport</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>During import, should we update the requirement workloads using values defined in the Microsoft Project document?</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>true</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
<o:ExtendedAttributeTargetItem Id="o21">
<a:ObjectID>557882B3-9A57-4DC8-A008-C2447164DCD7</a:ObjectID>
<a:Name>UpdAllocOnImport</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:Comment>During import, should we update the requirements user allocations using values defined in the Microsoft Project document?</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.Value>true</a:ExtendedAttributeTargetItem.Value>
<a:ValidateDataType>0</a:ValidateDataType>
</o:ExtendedAttributeTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
<o:TypedCategoryTargetItem Id="o22">
<a:TypePublicName>ExtendedCollectionTargetItem</a:TypePublicName>
<a:ObjectID>C0631AE4-7DB9-4083-B5FF-478F41BF043A</a:ObjectID>
<a:Name>Extended Collections</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<c:Categories>
<o:ExtendedCollectionTargetItem Id="o17">
<a:ObjectID>9E458D00-0FCE-4D2E-BD93-CBBA53CCB282</a:ObjectID>
<a:Name>LastSelectedView</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:InverseCollectionName>LastProjectExportView</a:InverseCollectionName>
<a:DestinationClassID>9453AEF1-7EB1-4D2E-BAE9-D396B24CF703</a:DestinationClassID>
</o:ExtendedCollectionTargetItem>
</c:Categories>
</o:TypedCategoryTargetItem>
</c:Categories>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o23">
<a:ObjectID>35F4B498-8629-45DE-8068-3342C2F234C4</a:ObjectID>
<a:Name>Model</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:EnableSelectionGeneration>1</a:EnableSelectionGeneration>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o24">
<a:ObjectID>4D94BD41-C929-4734-BC36-9D691C42BFC4</a:ObjectID>
<a:Name>RequirementUser</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:EnableSelectionGeneration>1</a:EnableSelectionGeneration>
</o:MetaClassTargetItem>
<o:MetaClassTargetItem Id="o25">
<a:ObjectID>153EB23A-4AC1-47AB-A4DD-36516A07BA45</a:ObjectID>
<a:Name>RequirementGroup</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:EnableSelectionGeneration>1</a:EnableSelectionGeneration>
</o:MetaClassTargetItem>
</c:Categories>
</o:ProfileTargetItem>
<o:TargetCategory Id="o26">
<a:ObjectID>7D05A2D9-F123-432F-810A-B6A0BA35F012</a:ObjectID>
<a:Name>Settings</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
<c:Categories>
<o:TargetCategory Id="o27">
<a:ObjectID>453D09F1-7ED5-4A86-A801-D37214167FA5</a:ObjectID>
<a:Name>Custom Values</a:Name>
<a:CreationDate>0</a:CreationDate>
<a:Creator/>
<a:ModificationDate>0</a:ModificationDate>
<a:Modifier/>
</o:TargetCategory>
</c:Categories>
</o:TargetCategory>
</c:Categories>
</o:ExtendedModelDefinition>

</EXASET>